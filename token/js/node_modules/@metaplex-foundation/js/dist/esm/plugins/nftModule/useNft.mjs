import { createUtilizeInstruction } from '@metaplex-foundation/mpl-token-metadata';
import { isNft, isLazyNft } from './Nft.mjs';
import { findMetadataPda, findUseAuthorityRecordPda } from './pdas.mjs';
import { useOperation } from '../../types/Operation.mjs';
import { findAssociatedTokenAccountPda } from '../tokenModule/pdas.mjs';
import { TransactionBuilder } from '../../utils/TransactionBuilder.mjs';

// Operation
// -----------------

const Key = 'UseNftOperation';
const useNftOperation = useOperation(Key);
// -----------------
// Handler
// -----------------
const useNftOperationHandler = {
  handle: async (operation, metaplex) => {
    return useNftBuilder(metaplex, operation.input).sendAndConfirm(metaplex, operation.input.confirmOptions);
  }
}; // -----------------
// Builder
// -----------------

const useNftBuilder = (metaplex, params) => {
  var _params$utilizeInstru;

  const {
    numberOfUses = 1,
    useAuthority = metaplex.identity(),
    owner = metaplex.identity().publicKey,
    isDelegated = false,
    burner
  } = params;
  const mintAddress = isNft(params.nft) || isLazyNft(params.nft) ? params.nft.mintAddress : params.nft;
  const metadata = findMetadataPda(mintAddress);
  const tokenAccount = findAssociatedTokenAccountPda(mintAddress, owner);
  const useAuthorityRecord = isDelegated ? findUseAuthorityRecordPda(mintAddress, useAuthority.publicKey) : undefined;
  return TransactionBuilder.make().setContext({
    mintAddress
  }) // Update the metadata account.
  .add({
    instruction: createUtilizeInstruction({
      metadata,
      tokenAccount,
      useAuthority: useAuthority.publicKey,
      mint: mintAddress,
      owner,
      useAuthorityRecord,
      burner
    }, {
      utilizeArgs: {
        numberOfUses
      }
    }),
    signers: [useAuthority],
    key: (_params$utilizeInstru = params.utilizeInstructionKey) !== null && _params$utilizeInstru !== void 0 ? _params$utilizeInstru : 'utilize'
  });
};

export { useNftBuilder, useNftOperation, useNftOperationHandler };
//# sourceMappingURL=useNft.mjs.map
