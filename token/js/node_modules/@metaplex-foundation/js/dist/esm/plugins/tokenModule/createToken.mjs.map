{"version":3,"file":"createToken.mjs","sources":["../../../../src/plugins/tokenModule/createToken.ts"],"sourcesContent":["import {\n  createInitializeAccountInstruction,\n  ACCOUNT_SIZE,\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  createAssociatedTokenAccountInstruction,\n} from '@solana/spl-token';\nimport { ConfirmOptions, PublicKey } from '@solana/web3.js';\nimport type { Metaplex } from '@/Metaplex';\nimport { Operation, OperationHandler, Signer, useOperation } from '@/types';\nimport { DisposableScope, TransactionBuilder } from '@/utils';\nimport { SendAndConfirmTransactionResponse } from '../rpcModule';\nimport { findAssociatedTokenAccountPda } from './pdas';\nimport { TokenProgram } from './program';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'CreateTokenOperation' as const;\nexport const createTokenOperation = useOperation<CreateTokenOperation>(Key);\nexport type CreateTokenOperation = Operation<\n  typeof Key,\n  CreateTokenInput,\n  CreateTokenOutput\n>;\n\nexport type CreateTokenInput = {\n  mint: PublicKey;\n  owner?: PublicKey; // Defaults to mx.identity().\n  token?: Signer; // Defaults to creating an associated token address instead.\n  payer?: Signer; // Defaults to mx.identity().\n  tokenProgram?: PublicKey; // Defaults to System Program.\n  associatedTokenProgram?: PublicKey; // Defaults to Associated Token Program.\n  confirmOptions?: ConfirmOptions;\n};\n\nexport type CreateTokenOutput = {\n  response: SendAndConfirmTransactionResponse;\n  tokenAddress: PublicKey;\n};\n\n// -----------------\n// Handler\n// -----------------\n\nexport const createTokenOperationHandler: OperationHandler<CreateTokenOperation> =\n  {\n    async handle(\n      operation: CreateTokenOperation,\n      metaplex: Metaplex,\n      scope: DisposableScope\n    ): Promise<CreateTokenOutput> {\n      const builder = await createTokenBuilder(metaplex, operation.input);\n      scope.throwIfCanceled();\n      return builder.sendAndConfirm(metaplex, operation.input.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\nexport type CreateTokenBuilderParams = Omit<\n  CreateTokenInput,\n  'confirmOptions'\n> & {\n  createAssociatedTokenAccountInstructionKey?: string;\n  createAccountInstructionKey?: string;\n  initializeTokenInstructionKey?: string;\n};\n\nexport type CreateTokenBuilderContext = Omit<CreateTokenOutput, 'response'>;\n\nexport const createTokenBuilder = async (\n  metaplex: Metaplex,\n  params: CreateTokenBuilderParams\n): Promise<TransactionBuilder<CreateTokenBuilderContext>> => {\n  const {\n    mint,\n    owner = metaplex.identity().publicKey,\n    token,\n    payer = metaplex.identity(),\n    tokenProgram = TokenProgram.publicKey,\n    associatedTokenProgram = ASSOCIATED_TOKEN_PROGRAM_ID,\n  } = params;\n\n  const isAssociatedToken = token === undefined;\n  const builder =\n    TransactionBuilder.make<CreateTokenBuilderContext>().setFeePayer(payer);\n\n  if (isAssociatedToken) {\n    const associatedTokenAddress = findAssociatedTokenAccountPda(\n      mint,\n      owner,\n      tokenProgram,\n      associatedTokenProgram\n    );\n\n    return (\n      builder\n        .setContext({ tokenAddress: associatedTokenAddress })\n\n        // Create an associated token account.\n        .add({\n          instruction: createAssociatedTokenAccountInstruction(\n            payer.publicKey,\n            associatedTokenAddress,\n            owner,\n            mint,\n            tokenProgram,\n            associatedTokenProgram\n          ),\n          signers: [payer],\n          key:\n            params.createAssociatedTokenAccountInstructionKey ??\n            'createAssociatedTokenAccount',\n        })\n    );\n  }\n\n  return (\n    builder\n      .setContext({ tokenAddress: token.publicKey })\n\n      // Create an empty account for the Token.\n      .add(\n        await metaplex\n          .system()\n          .builders()\n          .createAccount({\n            payer,\n            newAccount: token,\n            space: ACCOUNT_SIZE,\n            program: tokenProgram,\n            instructionKey:\n              params.createAccountInstructionKey ?? 'createAccount',\n          })\n      )\n\n      // Initialize the Token.\n      .add({\n        instruction: createInitializeAccountInstruction(\n          token.publicKey,\n          mint,\n          owner,\n          tokenProgram\n        ),\n        signers: [token],\n        key: params.initializeTokenInstructionKey ?? 'initializeToken',\n      })\n  );\n};\n"],"names":["Key","createTokenOperation","useOperation","createTokenOperationHandler","handle","operation","metaplex","scope","builder","createTokenBuilder","input","throwIfCanceled","sendAndConfirm","confirmOptions","params","mint","owner","identity","publicKey","token","payer","tokenProgram","TokenProgram","associatedTokenProgram","ASSOCIATED_TOKEN_PROGRAM_ID","isAssociatedToken","undefined","TransactionBuilder","make","setFeePayer","associatedTokenAddress","findAssociatedTokenAccountPda","setContext","tokenAddress","add","instruction","createAssociatedTokenAccountInstruction","signers","key","createAssociatedTokenAccountInstructionKey","system","builders","createAccount","newAccount","space","ACCOUNT_SIZE","program","instructionKey","createAccountInstructionKey","createInitializeAccountInstruction","initializeTokenInstructionKey"],"mappings":"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"}