{"version":3,"file":"createListing.mjs","sources":["../../../../src/plugins/auctionHouseModule/createListing.ts"],"sourcesContent":["import {\n  ConfirmOptions,\n  PublicKey,\n  SYSVAR_INSTRUCTIONS_PUBKEY,\n} from '@solana/web3.js';\nimport {\n  createAuctioneerSellInstruction,\n  createPrintListingReceiptInstruction,\n  createSellInstruction,\n} from '@metaplex-foundation/mpl-auction-house';\nimport type { Metaplex } from '@/Metaplex';\nimport type { SendAndConfirmTransactionResponse } from '../rpcModule';\nimport {\n  useOperation,\n  Operation,\n  OperationHandler,\n  Signer,\n  toPublicKey,\n  token,\n  lamports,\n  isSigner,\n  Pda,\n  amount,\n  SolAmount,\n  SplTokenAmount,\n} from '@/types';\nimport { TransactionBuilder } from '@/utils';\nimport {\n  findAuctioneerPda,\n  findAuctionHouseProgramAsSignerPda,\n  findAuctionHouseTradeStatePda,\n  findListingReceiptPda,\n} from './pdas';\nimport { AuctionHouse } from './AuctionHouse';\nimport { findAssociatedTokenAccountPda } from '../tokenModule';\nimport { findMetadataPda } from '../nftModule';\nimport { AUCTIONEER_PRICE } from './constants';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'CreateListingOperation' as const;\nexport const createListingOperation = useOperation<CreateListingOperation>(Key);\nexport type CreateListingOperation = Operation<\n  typeof Key,\n  CreateListingInput,\n  CreateListingOutput\n>;\n\nexport type CreateListingInput = {\n  auctionHouse: AuctionHouse;\n  seller?: PublicKey | Signer; // Default: identity\n  authority?: PublicKey | Signer; // Default: auctionHouse.authority\n  auctioneerAuthority?: Signer; // Use Auctioneer ix when provided\n  mintAccount: PublicKey; // Required for checking Metadata\n  tokenAccount?: PublicKey; // Default: ATA\n  price?: SolAmount | SplTokenAmount; // Default: 0 SOLs or tokens.\n  tokens?: SplTokenAmount; // Default: token(1)\n  bookkeeper?: Signer; // Default: identity\n  printReceipt?: boolean; // Default: true\n\n  // Options.\n  confirmOptions?: ConfirmOptions;\n};\n\nexport type CreateListingOutput = {\n  response: SendAndConfirmTransactionResponse;\n  sellerTradeState: Pda;\n  freeSellerTradeState: Pda;\n  tokenAccount: PublicKey;\n  metadata: Pda;\n  seller: PublicKey;\n  receipt: Pda;\n  bookkeeper: PublicKey;\n  price: SolAmount | SplTokenAmount;\n  tokens: SplTokenAmount;\n};\n\n// -----------------\n// Handler\n// -----------------\n\nexport const createListingOperationHandler: OperationHandler<CreateListingOperation> =\n  {\n    handle: async (operation: CreateListingOperation, metaplex: Metaplex) => {\n      return createListingBuilder(metaplex, operation.input).sendAndConfirm(\n        metaplex,\n        operation.input.confirmOptions\n      );\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\nexport type CreateListingBuilderParams = Omit<\n  CreateListingInput,\n  'confirmOptions'\n> & {\n  instructionKey?: string;\n};\n\nexport type CreateListingBuilderContext = Omit<CreateListingOutput, 'response'>;\n\nexport const createListingBuilder = (\n  metaplex: Metaplex,\n  params: CreateListingBuilderParams\n): TransactionBuilder<CreateListingBuilderContext> => {\n  // Data.\n  const auctionHouse = params.auctionHouse;\n  const tokens = params.tokens ?? token(1);\n  const priceBasisPoint = params.auctioneerAuthority\n    ? AUCTIONEER_PRICE\n    : params.price?.basisPoints ?? 0;\n  const price = auctionHouse.isNative\n    ? lamports(priceBasisPoint)\n    : amount(priceBasisPoint, auctionHouse.treasuryMint.currency);\n\n  // Accounts.\n  const seller = params.seller ?? (metaplex.identity() as Signer);\n  const authority = params.authority ?? auctionHouse.authorityAddress;\n  const metadata = findMetadataPda(params.mintAccount);\n  const tokenAccount =\n    params.tokenAccount ??\n    findAssociatedTokenAccountPda(params.mintAccount, toPublicKey(seller));\n  const sellerTradeState = findAuctionHouseTradeStatePda(\n    auctionHouse.address,\n    toPublicKey(seller),\n    auctionHouse.treasuryMint.address,\n    params.mintAccount,\n    price.basisPoints,\n    tokens.basisPoints,\n    tokenAccount\n  );\n  const freeSellerTradeState = findAuctionHouseTradeStatePda(\n    auctionHouse.address,\n    toPublicKey(seller),\n    auctionHouse.treasuryMint.address,\n    params.mintAccount,\n    lamports(0).basisPoints,\n    tokens.basisPoints,\n    tokenAccount\n  );\n  const programAsSigner = findAuctionHouseProgramAsSignerPda();\n  const accounts = {\n    wallet: toPublicKey(seller),\n    tokenAccount,\n    metadata,\n    authority: toPublicKey(authority),\n    auctionHouse: auctionHouse.address,\n    auctionHouseFeeAccount: auctionHouse.feeAccountAddress,\n    sellerTradeState,\n    freeSellerTradeState,\n    programAsSigner,\n  };\n\n  // Args.\n  const args = {\n    tradeStateBump: sellerTradeState.bump,\n    freeTradeStateBump: freeSellerTradeState.bump,\n    programAsSignerBump: programAsSigner.bump,\n    buyerPrice: price.basisPoints,\n    tokenSize: tokens.basisPoints,\n  };\n\n  // Sell Instruction.\n  let sellInstruction;\n  if (params.auctioneerAuthority) {\n    sellInstruction = createAuctioneerSellInstruction(\n      {\n        ...accounts,\n        auctioneerAuthority: params.auctioneerAuthority.publicKey,\n        ahAuctioneerPda: findAuctioneerPda(\n          auctionHouse.address,\n          params.auctioneerAuthority.publicKey\n        ),\n      },\n      args\n    );\n  } else {\n    sellInstruction = createSellInstruction(accounts, args);\n  }\n\n  // Signers.\n  const sellSigners = [seller, authority, params.auctioneerAuthority].filter(\n    (input): input is Signer => !!input && isSigner(input)\n  );\n\n  // Receipt.\n  const bookkeeper: Signer = params.bookkeeper ?? metaplex.identity();\n  const receipt = findListingReceiptPda(sellerTradeState);\n\n  return (\n    TransactionBuilder.make<CreateListingBuilderContext>()\n      .setContext({\n        sellerTradeState,\n        freeSellerTradeState,\n        tokenAccount,\n        metadata,\n        seller: toPublicKey(seller),\n        receipt,\n        bookkeeper: bookkeeper.publicKey,\n        price,\n        tokens,\n      })\n\n      // Create Listing.\n      .add({\n        instruction: sellInstruction,\n        signers: sellSigners,\n        key: 'sell',\n      })\n\n      // Print the Listing Receipt.\n      .when(params.printReceipt ?? true, (builder) =>\n        builder.add({\n          instruction: createPrintListingReceiptInstruction(\n            {\n              receipt,\n              bookkeeper: bookkeeper.publicKey,\n              instruction: SYSVAR_INSTRUCTIONS_PUBKEY,\n            },\n            { receiptBump: receipt.bump }\n          ),\n          signers: [bookkeeper],\n          key: 'printListingReceipt',\n        })\n      )\n  );\n};\n"],"names":["Key","createListingOperation","useOperation","createListingOperationHandler","handle","operation","metaplex","createListingBuilder","input","sendAndConfirm","confirmOptions","params","auctionHouse","tokens","token","priceBasisPoint","auctioneerAuthority","AUCTIONEER_PRICE","price","basisPoints","isNative","lamports","amount","treasuryMint","currency","seller","identity","authority","authorityAddress","metadata","findMetadataPda","mintAccount","tokenAccount","findAssociatedTokenAccountPda","toPublicKey","sellerTradeState","findAuctionHouseTradeStatePda","address","freeSellerTradeState","programAsSigner","findAuctionHouseProgramAsSignerPda","accounts","wallet","auctionHouseFeeAccount","feeAccountAddress","args","tradeStateBump","bump","freeTradeStateBump","programAsSignerBump","buyerPrice","tokenSize","sellInstruction","createAuctioneerSellInstruction","publicKey","ahAuctioneerPda","findAuctioneerPda","createSellInstruction","sellSigners","filter","isSigner","bookkeeper","receipt","findListingReceiptPda","TransactionBuilder","make","setContext","add","instruction","signers","key","when","printReceipt","builder","createPrintListingReceiptInstruction","SYSVAR_INSTRUCTIONS_PUBKEY","receiptBump"],"mappings":"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"}