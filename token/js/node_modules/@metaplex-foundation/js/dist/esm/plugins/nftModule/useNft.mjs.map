{"version":3,"file":"useNft.mjs","sources":["../../../../src/plugins/nftModule/useNft.ts"],"sourcesContent":["import { ConfirmOptions, PublicKey } from '@solana/web3.js';\nimport { createUtilizeInstruction } from '@metaplex-foundation/mpl-token-metadata';\nimport { useOperation, Operation, Signer, OperationHandler } from '@/types';\nimport { isLazyNft, isNft, LazyNft, Nft } from './Nft';\nimport { Metaplex } from '@/Metaplex';\nimport { TransactionBuilder } from '@/utils';\nimport { SendAndConfirmTransactionResponse } from '../rpcModule';\nimport { findMetadataPda, findUseAuthorityRecordPda } from './pdas';\nimport { findAssociatedTokenAccountPda } from '../tokenModule';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'UseNftOperation' as const;\nexport const useNftOperation = useOperation<UseNftOperation>(Key);\nexport type UseNftOperation = Operation<typeof Key, UseNftInput, UseNftOutput>;\n\nexport interface UseNftInput {\n  // Accounts and models.\n  nft: Nft | LazyNft | PublicKey;\n  numberOfUses?: number; // Defaults to 1.\n  useAuthority?: Signer; // Defaults to mx.identity().\n  owner?: PublicKey; // Defaults to mx.identity().publicKey.\n  tokenAccount?: PublicKey; // Defaults to associated token account.\n  isDelegated?: boolean; // Defaults to false.\n  burner?: PublicKey; // Defaults to not being used.\n\n  // Options.\n  confirmOptions?: ConfirmOptions;\n}\n\nexport interface UseNftOutput {\n  response: SendAndConfirmTransactionResponse;\n  mintAddress: PublicKey;\n}\n\n// -----------------\n// Handler\n// -----------------\n\nexport const useNftOperationHandler: OperationHandler<UseNftOperation> = {\n  handle: async (\n    operation: UseNftOperation,\n    metaplex: Metaplex\n  ): Promise<UseNftOutput> => {\n    return useNftBuilder(metaplex, operation.input).sendAndConfirm(\n      metaplex,\n      operation.input.confirmOptions\n    );\n  },\n};\n\n// -----------------\n// Builder\n// -----------------\n\nexport type UseNftBuilderParams = Omit<UseNftInput, 'confirmOptions'> & {\n  utilizeInstructionKey?: string;\n};\n\nexport type UseNftBuilderContext = Omit<UseNftOutput, 'response'>;\n\nexport const useNftBuilder = (\n  metaplex: Metaplex,\n  params: UseNftBuilderParams\n): TransactionBuilder<UseNftBuilderContext> => {\n  const {\n    numberOfUses = 1,\n    useAuthority = metaplex.identity(),\n    owner = metaplex.identity().publicKey,\n    isDelegated = false,\n    burner,\n  } = params;\n\n  const mintAddress =\n    isNft(params.nft) || isLazyNft(params.nft)\n      ? params.nft.mintAddress\n      : params.nft;\n  const metadata = findMetadataPda(mintAddress);\n  const tokenAccount = findAssociatedTokenAccountPda(mintAddress, owner);\n  const useAuthorityRecord = isDelegated\n    ? findUseAuthorityRecordPda(mintAddress, useAuthority.publicKey)\n    : undefined;\n\n  return (\n    TransactionBuilder.make<UseNftBuilderContext>()\n      .setContext({ mintAddress })\n\n      // Update the metadata account.\n      .add({\n        instruction: createUtilizeInstruction(\n          {\n            metadata,\n            tokenAccount,\n            useAuthority: useAuthority.publicKey,\n            mint: mintAddress,\n            owner,\n            useAuthorityRecord,\n            burner,\n          },\n          { utilizeArgs: { numberOfUses } }\n        ),\n        signers: [useAuthority],\n        key: params.utilizeInstructionKey ?? 'utilize',\n      })\n  );\n};\n"],"names":["Key","useNftOperation","useOperation","useNftOperationHandler","handle","operation","metaplex","useNftBuilder","input","sendAndConfirm","confirmOptions","params","numberOfUses","useAuthority","identity","owner","publicKey","isDelegated","burner","mintAddress","isNft","nft","isLazyNft","metadata","findMetadataPda","tokenAccount","findAssociatedTokenAccountPda","useAuthorityRecord","findUseAuthorityRecordPda","undefined","TransactionBuilder","make","setContext","add","instruction","createUtilizeInstruction","mint","utilizeArgs","signers","key","utilizeInstructionKey"],"mappings":";;;;;;;AAWA;AACA;;AAEA,MAAMA,GAAG,GAAG,iBAAZ,CAAA;MACaC,eAAe,GAAGC,YAAY,CAAkBF,GAAlB,EAApC;AAsBP;AACA;AACA;AAEO,MAAMG,sBAAyD,GAAG;AACvEC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,KAGoB;AAC1B,IAAA,OAAOC,aAAa,CAACD,QAAD,EAAWD,SAAS,CAACG,KAArB,CAAb,CAAyCC,cAAzC,CACLH,QADK,EAELD,SAAS,CAACG,KAAV,CAAgBE,cAFX,CAAP,CAAA;AAID,GAAA;AATsE;AAazE;AACA;;MAQaH,aAAa,GAAG,CAC3BD,QAD2B,EAE3BK,MAF2B,KAGkB;AAAA,EAAA,IAAA,qBAAA,CAAA;;EAC7C,MAAM;AACJC,IAAAA,YAAY,GAAG,CADX;AAEJC,IAAAA,YAAY,GAAGP,QAAQ,CAACQ,QAAT,EAFX;AAGJC,IAAAA,KAAK,GAAGT,QAAQ,CAACQ,QAAT,GAAoBE,SAHxB;AAIJC,IAAAA,WAAW,GAAG,KAJV;AAKJC,IAAAA,MAAAA;AALI,GAAA,GAMFP,MANJ,CAAA;EAQA,MAAMQ,WAAW,GACfC,KAAK,CAACT,MAAM,CAACU,GAAR,CAAL,IAAqBC,SAAS,CAACX,MAAM,CAACU,GAAR,CAA9B,GACIV,MAAM,CAACU,GAAP,CAAWF,WADf,GAEIR,MAAM,CAACU,GAHb,CAAA;AAIA,EAAA,MAAME,QAAQ,GAAGC,eAAe,CAACL,WAAD,CAAhC,CAAA;AACA,EAAA,MAAMM,YAAY,GAAGC,6BAA6B,CAACP,WAAD,EAAcJ,KAAd,CAAlD,CAAA;AACA,EAAA,MAAMY,kBAAkB,GAAGV,WAAW,GAClCW,yBAAyB,CAACT,WAAD,EAAcN,YAAY,CAACG,SAA3B,CADS,GAElCa,SAFJ,CAAA;AAIA,EAAA,OACEC,kBAAkB,CAACC,IAAnB,EAAA,CACGC,UADH,CACc;AAAEb,IAAAA,WAAAA;AAAF,GADd,CAGE;AAHF,GAIGc,GAJH,CAIO;IACHC,WAAW,EAAEC,wBAAwB,CACnC;MACEZ,QADF;MAEEE,YAFF;MAGEZ,YAAY,EAAEA,YAAY,CAACG,SAH7B;AAIEoB,MAAAA,IAAI,EAAEjB,WAJR;MAKEJ,KALF;MAMEY,kBANF;AAOET,MAAAA,MAAAA;AAPF,KADmC,EAUnC;AAAEmB,MAAAA,WAAW,EAAE;AAAEzB,QAAAA,YAAAA;AAAF,OAAA;AAAf,KAVmC,CADlC;IAaH0B,OAAO,EAAE,CAACzB,YAAD,CAbN;AAcH0B,IAAAA,GAAG,EAAE5B,CAAAA,qBAAAA,GAAAA,MAAM,CAAC6B,qBAAT,MAAkC,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,qBAAA,GAAA,SAAA;AAdlC,GAJP,CADF,CAAA;AAsBD;;;;"}