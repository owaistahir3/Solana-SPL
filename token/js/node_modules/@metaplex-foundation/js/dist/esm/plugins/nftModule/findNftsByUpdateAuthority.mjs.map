{"version":3,"file":"findNftsByUpdateAuthority.mjs","sources":["../../../../src/plugins/nftModule/findNftsByUpdateAuthority.ts"],"sourcesContent":["import { Commitment, PublicKey } from '@solana/web3.js';\nimport { Operation, OperationHandler, useOperation } from '@/types';\nimport { Metaplex } from '@/Metaplex';\nimport { TokenMetadataProgram } from './program';\nimport { findNftsByMintListOperation } from './findNftsByMintList';\nimport { LazyNft, Nft } from './Nft';\nimport { DisposableScope } from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindNftsByUpdateAuthorityOperation' as const;\nexport const findNftsByUpdateAuthorityOperation =\n  useOperation<FindNftsByUpdateAuthorityOperation>(Key);\nexport type FindNftsByUpdateAuthorityOperation = Operation<\n  typeof Key,\n  FindNftsByUpdateAuthorityInput,\n  (LazyNft | Nft)[]\n>;\n\nexport interface FindNftsByUpdateAuthorityInput {\n  updateAuthority: PublicKey;\n  commitment?: Commitment;\n}\n\n// -----------------\n// Handler\n// -----------------\n\nexport const findNftsByUpdateAuthorityOperationHandler: OperationHandler<FindNftsByUpdateAuthorityOperation> =\n  {\n    handle: async (\n      operation: FindNftsByUpdateAuthorityOperation,\n      metaplex: Metaplex,\n      scope: DisposableScope\n    ) => {\n      const { updateAuthority, commitment } = operation.input;\n\n      const mints = await TokenMetadataProgram.metadataV1Accounts(metaplex)\n        .selectMint()\n        .whereUpdateAuthority(updateAuthority)\n        .getDataAsPublicKeys();\n      scope.throwIfCanceled();\n\n      const nfts = await metaplex\n        .operations()\n        .execute(findNftsByMintListOperation({ mints, commitment }), scope);\n\n      return nfts.filter((nft): nft is LazyNft => nft !== null);\n    },\n  };\n"],"names":["Key","findNftsByUpdateAuthorityOperation","useOperation","findNftsByUpdateAuthorityOperationHandler","handle","operation","metaplex","scope","updateAuthority","commitment","input","mints","TokenMetadataProgram","metadataV1Accounts","selectMint","whereUpdateAuthority","getDataAsPublicKeys","throwIfCanceled","nfts","operations","execute","findNftsByMintListOperation","filter","nft"],"mappings":";;;;AAQA;AACA;AACA;AAEA,MAAMA,GAAG,GAAG,oCAAZ,CAAA;MACaC,kCAAkC,GAC7CC,YAAY,CAAqCF,GAArC,EADP;AAaP;AACA;AACA;AAEO,MAAMG,yCAA+F,GAC1G;AACEC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAIH;IACH,MAAM;MAAEC,eAAF;AAAmBC,MAAAA,UAAAA;KAAeJ,GAAAA,SAAS,CAACK,KAAlD,CAAA;AAEA,IAAA,MAAMC,KAAK,GAAG,MAAMC,oBAAoB,CAACC,kBAArB,CAAwCP,QAAxC,CACjBQ,CAAAA,UADiB,GAEjBC,oBAFiB,CAEIP,eAFJ,CAAA,CAGjBQ,mBAHiB,EAApB,CAAA;AAIAT,IAAAA,KAAK,CAACU,eAAN,EAAA,CAAA;IAEA,MAAMC,IAAI,GAAG,MAAMZ,QAAQ,CACxBa,UADgB,EAEhBC,CAAAA,OAFgB,CAERC,2BAA2B,CAAC;MAAEV,KAAF;AAASF,MAAAA,UAAAA;KAAV,CAFnB,EAE4CF,KAF5C,CAAnB,CAAA;IAIA,OAAOW,IAAI,CAACI,MAAL,CAAaC,GAAD,IAAyBA,GAAG,KAAK,IAA7C,CAAP,CAAA;AACD,GAAA;AAnBH;;;;"}