import { isOriginalEditionAccount } from './accounts.mjs';
import assert from '../../utils/assert.mjs';
import { toBigNumber, toOptionBigNumber } from '../../types/BigNumber.mjs';

const isNftEdition = value => typeof value === 'object' && value.model === 'nftEdition';
function assertNftEdition(value) {
  assert(isNftEdition(value), `Expected NftEdition model`);
}
const toNftEdition = account => isOriginalEditionAccount(account) ? toNftOriginalEdition(account) : toNftPrintEdition(account);
const isNftOriginalEdition = value => isNftEdition(value) && value.isOriginal;
function assertNftOriginalEdition(value) {
  assert(isNftOriginalEdition(value), `Expected NftOriginalEdition model`);
}
const toNftOriginalEdition = account => ({
  model: 'nftEdition',
  isOriginal: true,
  address: account.publicKey,
  supply: toBigNumber(account.data.supply),
  maxSupply: toOptionBigNumber(account.data.maxSupply)
});
const isNftPrintEdition = value => isNftEdition(value) && !value.isOriginal;
function assertNftPrintEdition(value) {
  assert(isNftPrintEdition(value), `Expected NftPrintEdition model`);
}
const toNftPrintEdition = account => ({
  model: 'nftEdition',
  isOriginal: false,
  address: account.publicKey,
  parent: account.data.parent,
  number: toBigNumber(account.data.edition)
});

export { assertNftEdition, assertNftOriginalEdition, assertNftPrintEdition, isNftEdition, isNftOriginalEdition, isNftPrintEdition, toNftEdition, toNftOriginalEdition, toNftPrintEdition };
//# sourceMappingURL=NftEdition.mjs.map
