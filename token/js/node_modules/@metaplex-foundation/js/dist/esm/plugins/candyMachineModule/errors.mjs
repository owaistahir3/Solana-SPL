import { EndSettingType } from '@metaplex-foundation/mpl-candy-machine';
import { formatDateTime } from '../../types/DateTime.mjs';
import { MetaplexError } from '../../errors/MetaplexError.mjs';

class CandyMachineError extends MetaplexError {
  constructor(input) {
    super({ ...input,
      key: `plugin.candy_machine.${input.key}`,
      title: `Candy Machine > ${input.title}`,
      source: 'plugin',
      sourceDetails: 'Candy Machine'
    });
  }

}
class CandyMachineIsFullError extends CandyMachineError {
  constructor(assetIndex, itemsAvailable, cause) {
    super({
      cause,
      key: 'candy_machine_is_full',
      title: 'Candy Machine Is Full',
      problem: `Trying to add asset number ${assetIndex.addn(1)}, but ` + `candy machine only can hold ${itemsAvailable} assets.`,
      solution: 'Limit number of assets you are adding or create a new Candy Machine that can hold more.'
    });
  }

}
class CandyMachineIsEmptyError extends CandyMachineError {
  constructor(itemsAvailable, cause) {
    super({
      cause,
      key: 'candy_machine_is_empty',
      title: 'Candy Machine Is Empty',
      problem: `You're trying to mint from an empty candy machine. ` + `All ${itemsAvailable} items have been minted.`,
      solution: 'You can no longer mint from this Candy Machine.'
    });
  }

}
class CandyMachineCannotAddAmountError extends CandyMachineError {
  constructor(index, amount, itemsAvailable, cause) {
    super({
      cause,
      key: 'candy_machine_cannot_add_amount',
      title: 'Candy Machine Cannot Add Amount',
      problem: `Trying to add ${amount} assets to candy machine that already has ${index} assets and can only hold ${itemsAvailable} assets.`,
      solution: 'Limit number of assets you are adding or create a new Candy Machine that can hold more.'
    });
  }

}
class CandyMachineAddItemConstraintsViolatedError extends CandyMachineError {
  constructor(index, item, cause) {
    super({
      cause,
      key: 'candy_machine_add_item_constraints_violated',
      title: 'Candy Machine Add Item Constraints Violated',
      problem: `Trying to add an asset with name "${item.name}" and uri: "${item.uri}" to candy machine at index ${index} that violates constraints.`,
      solution: 'Fix the name or URI of this asset and try again.'
    });
  }

}
class CandyMachineAuthorityRequiredAsASignerError extends CandyMachineError {
  constructor(cause) {
    super({
      cause,
      key: 'candy_machine_authority_required_as_a_signer',
      title: 'Candy Machine Authority Required As A Signer',
      problem: 'You are trying to create a Candy Machine with a Collection NFT. ' + 'In order for the Collection NFT to be set successfully, you must provide the authority as a Signer.',
      solution: 'Please provide the "authority" parameter as a Signer if you want to set the Collection NFT upon creation. ' + 'Alternatively, you may remove the "collection" parameter to create a Candy Machine without an associated Collection NFT.'
    });
  }

}
class CandyMachineNotLiveError extends CandyMachineError {
  constructor(goLiveDate, cause) {
    super({
      cause,
      key: 'candy_machine_not_live',
      title: 'Candy Machine Not Live',
      problem: `You're trying to mint from a Candy Machine which is not live yet. ` + (goLiveDate ? `It will go live on ${formatDateTime(goLiveDate)}.` : `Its live date has not been set yet.`),
      solution: 'You need to wait until the Candy Machine is live to mint from it. ' + 'If this is your Candy Machine, use "metaplex.candyMachines().update(...)" to set the live date. ' + 'Note that the authority of the Candy Machine can mint regardless of the live date.'
    });
  }

}
class CandyMachineEndedError extends CandyMachineError {
  constructor(endSetting, cause) {
    const endSettingType = endSetting.endSettingType === EndSettingType.Amount ? 'Amount' : 'Date';
    const endSettingExplanation = endSetting.endSettingType === EndSettingType.Amount ? `All ${endSetting.number} items have been minted.` : `It ended on ${formatDateTime(endSetting.date)}.`;
    super({
      cause,
      key: 'candy_machine_ended',
      title: 'Candy Machine Ended',
      problem: `The end condition [${endSettingType}] of this Candy Machine has been reached. ` + endSettingExplanation,
      solution: 'You can no longer mint from this Candy Machine.'
    });
  }

}
class CandyMachineBotTaxError extends CandyMachineError {
  constructor(explorerLink, cause) {
    super({
      cause,
      key: 'candy_machine_bot_tax',
      title: 'Candy Machine Bot Tax',
      problem: `The NFT couldn't be fetched after being minted. ` + `This is most likely due to a bot tax that occured during minting. ` + `When someone tries to mint an NFT from a Candy Machine which cannot be minted from, ` + `the program will succeed and charge a small tax to fight against bots.`,
      solution: `Ensure you can mint from the Candy Machine. ` + `You may want to check the transaction logs for more details: [${explorerLink}].`
    });
  }

}

export { CandyMachineAddItemConstraintsViolatedError, CandyMachineAuthorityRequiredAsASignerError, CandyMachineBotTaxError, CandyMachineCannotAddAmountError, CandyMachineEndedError, CandyMachineError, CandyMachineIsEmptyError, CandyMachineIsFullError, CandyMachineNotLiveError };
//# sourceMappingURL=errors.mjs.map
