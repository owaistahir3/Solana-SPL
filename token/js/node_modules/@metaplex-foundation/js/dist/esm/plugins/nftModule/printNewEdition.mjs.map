{"version":3,"file":"printNewEdition.mjs","sources":["../../../../src/plugins/nftModule/printNewEdition.ts"],"sourcesContent":["import { ConfirmOptions, Keypair, PublicKey } from '@solana/web3.js';\nimport { Metaplex } from '@/Metaplex';\nimport {\n  findEditionMarkerPda,\n  findEditionPda,\n  findMasterEditionV2Pda,\n  findMetadataPda,\n} from './pdas';\nimport { toOriginalEditionAccount } from './accounts';\nimport {\n  useOperation,\n  Operation,\n  OperationHandler,\n  Signer,\n  token,\n  toBigNumber,\n} from '@/types';\nimport {\n  DisposableScope,\n  InstructionWithSigners,\n  TransactionBuilder,\n} from '@/utils';\nimport { isLazyNft, isNft, LazyNft, Nft } from './Nft';\nimport { SendAndConfirmTransactionResponse } from '../rpcModule';\nimport { findAssociatedTokenAccountPda } from '../tokenModule';\nimport { NftOriginalEdition, toNftOriginalEdition } from './NftEdition';\nimport {\n  createMintNewEditionFromMasterEditionViaTokenInstruction,\n  createMintNewEditionFromMasterEditionViaVaultProxyInstruction,\n} from '@metaplex-foundation/mpl-token-metadata';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'PrintNewEditionOperation' as const;\nexport const printNewEditionOperation =\n  useOperation<PrintNewEditionOperation>(Key);\nexport type PrintNewEditionOperation = Operation<\n  typeof Key,\n  PrintNewEditionInput,\n  PrintNewEditionOutput\n>;\n\nexport type PrintNewEditionInput = PrintNewEditionSharedInput &\n  PrintNewEditionViaInput;\n\nexport type PrintNewEditionSharedInput = {\n  originalNft: Nft | LazyNft | PublicKey;\n  newMint?: Signer; // Defaults to Keypair.generate().\n  newMintAuthority?: Signer; // Defaults to mx.identity().\n  newUpdateAuthority?: PublicKey; // Defaults to mx.identity().\n  newOwner?: PublicKey; // Defaults to mx.identity().\n  newTokenAccount?: Signer; // Defaults to creating an associated token account.\n  newFreezeAuthority?: PublicKey; // Defaults to mx.identity().\n  payer?: Signer; // Defaults to mx.identity().\n  tokenProgram?: PublicKey;\n  associatedTokenProgram?: PublicKey;\n  confirmOptions?: ConfirmOptions;\n};\n\nexport type PrintNewEditionViaInput =\n  | {\n      via?: 'token';\n      originalTokenAccountOwner?: Signer; // Defaults to mx.identity().\n      originalTokenAccount?: PublicKey; // Defaults to associated token address.\n    }\n  | {\n      via: 'vault';\n      vaultAuthority: Signer;\n      safetyDepositStore: PublicKey;\n      safetyDepositBox: PublicKey;\n      vault: PublicKey;\n      tokenVaultProgram?: PublicKey;\n    };\n\nexport type PrintNewEditionOutput = {\n  response: SendAndConfirmTransactionResponse;\n  mintSigner: Signer;\n  metadataAddress: PublicKey;\n  editionAddress: PublicKey;\n  tokenAddress: PublicKey;\n  updatedOriginalEdition: NftOriginalEdition;\n};\n\n// -----------------\n// Handler\n// -----------------\n\nexport const printNewEditionOperationHandler: OperationHandler<PrintNewEditionOperation> =\n  {\n    handle: async (\n      operation: PrintNewEditionOperation,\n      metaplex: Metaplex,\n      scope: DisposableScope\n    ) => {\n      const builder = await printNewEditionBuilder(metaplex, operation.input);\n      scope.throwIfCanceled();\n      return builder.sendAndConfirm(metaplex, operation.input.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\nexport type PrintNewEditionBuilderParams = PrintNewEditionViaInput &\n  Omit<PrintNewEditionSharedInput, 'confirmOptions'> & {\n    createMintAccountInstructionKey?: string;\n    initializeMintInstructionKey?: string;\n    createAssociatedTokenAccountInstructionKey?: string;\n    createTokenAccountInstructionKey?: string;\n    initializeTokenInstructionKey?: string;\n    mintTokensInstructionKey?: string;\n    printNewEditionInstructionKey?: string;\n  };\n\nexport type PrintNewEditionBuilderContext = Omit<\n  PrintNewEditionOutput,\n  'response'\n>;\n\nexport const printNewEditionBuilder = async (\n  metaplex: Metaplex,\n  params: PrintNewEditionBuilderParams\n): Promise<TransactionBuilder<PrintNewEditionBuilderContext>> => {\n  const {\n    newMint = Keypair.generate(),\n    newMintAuthority = metaplex.identity(),\n    newUpdateAuthority = metaplex.identity().publicKey,\n    newOwner = metaplex.identity().publicKey,\n    newTokenAccount,\n    newFreezeAuthority = metaplex.identity().publicKey,\n    payer = metaplex.identity(),\n    tokenProgram,\n    associatedTokenProgram,\n    printNewEditionInstructionKey = 'printNewEdition',\n  } = params;\n\n  // Original NFT.\n  const originalMint =\n    isNft(params.originalNft) || isLazyNft(params.originalNft)\n      ? params.originalNft.mintAddress\n      : params.originalNft;\n  const originalMetadataAddress = findMetadataPda(originalMint);\n  const originalEditionAddress = findMasterEditionV2Pda(originalMint);\n  const originalEditionAccount = toOriginalEditionAccount(\n    await metaplex.rpc().getAccount(originalEditionAddress)\n  );\n  const originalEdition = toNftOriginalEdition(originalEditionAccount);\n  const edition = toBigNumber(originalEdition.supply.addn(1));\n  const updatedOriginalEdition = { ...originalEdition, supply: edition };\n  const originalEditionMarkPda = findEditionMarkerPda(originalMint, edition);\n\n  // New NFT.\n  const newMetadataAddress = findMetadataPda(newMint.publicKey);\n  const newEditionAddress = findEditionPda(newMint.publicKey);\n  const sharedAccounts = {\n    newMetadata: newMetadataAddress,\n    newEdition: newEditionAddress,\n    masterEdition: originalEditionAddress,\n    newMint: newMint.publicKey,\n    editionMarkPda: originalEditionMarkPda,\n    newMintAuthority: newMintAuthority.publicKey,\n    payer: payer.publicKey,\n    newMetadataUpdateAuthority: newUpdateAuthority,\n    metadata: originalMetadataAddress,\n  };\n\n  const tokenWithMintBuilder = await metaplex\n    .tokens()\n    .builders()\n    .createTokenWithMint({\n      decimals: 0,\n      initialSupply: token(1),\n      mint: newMint,\n      mintAuthority: newMintAuthority,\n      freezeAuthority: newFreezeAuthority ?? null,\n      owner: newOwner,\n      token: newTokenAccount,\n      payer,\n      tokenProgram,\n      associatedTokenProgram,\n      createMintAccountInstructionKey: params.createMintAccountInstructionKey,\n      initializeMintInstructionKey: params.initializeMintInstructionKey,\n      createAssociatedTokenAccountInstructionKey:\n        params.createAssociatedTokenAccountInstructionKey,\n      createTokenAccountInstructionKey: params.createTokenAccountInstructionKey,\n      initializeTokenInstructionKey: params.initializeTokenInstructionKey,\n      mintTokensInstructionKey: params.mintTokensInstructionKey,\n    });\n\n  const { tokenAddress } = tokenWithMintBuilder.getContext();\n\n  let printNewEditionInstructionWithSigners: InstructionWithSigners;\n  if (params.via === 'vault') {\n    printNewEditionInstructionWithSigners = {\n      instruction:\n        createMintNewEditionFromMasterEditionViaVaultProxyInstruction(\n          {\n            ...sharedAccounts,\n            vaultAuthority: params.vaultAuthority.publicKey,\n            safetyDepositStore: params.safetyDepositStore,\n            safetyDepositBox: params.safetyDepositBox,\n            vault: params.vault,\n            tokenVaultProgram:\n              params.tokenVaultProgram ??\n              new PublicKey('vau1zxA2LbssAUEF7Gpw91zMM1LvXrvpzJtmZ58rPsn'),\n          },\n          { mintNewEditionFromMasterEditionViaTokenArgs: { edition } }\n        ),\n      signers: [newMint, newMintAuthority, payer, params.vaultAuthority],\n      key: printNewEditionInstructionKey,\n    };\n  } else {\n    const originalTokenAccountOwner =\n      params.originalTokenAccountOwner ?? metaplex.identity();\n    const originalTokenAccount =\n      params.originalTokenAccount ??\n      findAssociatedTokenAccountPda(\n        originalMint,\n        originalTokenAccountOwner.publicKey\n      );\n\n    printNewEditionInstructionWithSigners = {\n      instruction: createMintNewEditionFromMasterEditionViaTokenInstruction(\n        {\n          ...sharedAccounts,\n          tokenAccountOwner: originalTokenAccountOwner.publicKey,\n          tokenAccount: originalTokenAccount,\n        },\n        { mintNewEditionFromMasterEditionViaTokenArgs: { edition } }\n      ),\n      signers: [newMint, newMintAuthority, payer, originalTokenAccountOwner],\n      key: printNewEditionInstructionKey,\n    };\n  }\n\n  return (\n    TransactionBuilder.make<PrintNewEditionBuilderContext>()\n      .setFeePayer(payer)\n      .setContext({\n        mintSigner: newMint,\n        metadataAddress: newMetadataAddress,\n        editionAddress: newEditionAddress,\n        tokenAddress,\n        updatedOriginalEdition,\n      })\n\n      // Create the mint and token accounts before minting 1 token to the owner.\n      .add(tokenWithMintBuilder)\n\n      // Mint new edition.\n      .add(printNewEditionInstructionWithSigners)\n  );\n};\n"],"names":["Key","printNewEditionOperation","useOperation","printNewEditionOperationHandler","handle","operation","metaplex","scope","builder","printNewEditionBuilder","input","throwIfCanceled","sendAndConfirm","confirmOptions","params","newMint","Keypair","generate","newMintAuthority","identity","newUpdateAuthority","publicKey","newOwner","newTokenAccount","newFreezeAuthority","payer","tokenProgram","associatedTokenProgram","printNewEditionInstructionKey","originalMint","isNft","originalNft","isLazyNft","mintAddress","originalMetadataAddress","findMetadataPda","originalEditionAddress","findMasterEditionV2Pda","originalEditionAccount","toOriginalEditionAccount","rpc","getAccount","originalEdition","toNftOriginalEdition","edition","toBigNumber","supply","addn","updatedOriginalEdition","originalEditionMarkPda","findEditionMarkerPda","newMetadataAddress","newEditionAddress","findEditionPda","sharedAccounts","newMetadata","newEdition","masterEdition","editionMarkPda","newMetadataUpdateAuthority","metadata","tokenWithMintBuilder","tokens","builders","createTokenWithMint","decimals","initialSupply","token","mint","mintAuthority","freezeAuthority","owner","createMintAccountInstructionKey","initializeMintInstructionKey","createAssociatedTokenAccountInstructionKey","createTokenAccountInstructionKey","initializeTokenInstructionKey","mintTokensInstructionKey","tokenAddress","getContext","printNewEditionInstructionWithSigners","via","instruction","createMintNewEditionFromMasterEditionViaVaultProxyInstruction","vaultAuthority","safetyDepositStore","safetyDepositBox","vault","tokenVaultProgram","PublicKey","mintNewEditionFromMasterEditionViaTokenArgs","signers","key","originalTokenAccountOwner","originalTokenAccount","findAssociatedTokenAccountPda","createMintNewEditionFromMasterEditionViaTokenInstruction","tokenAccountOwner","tokenAccount","TransactionBuilder","make","setFeePayer","setContext","mintSigner","metadataAddress","editionAddress","add"],"mappings":"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"}