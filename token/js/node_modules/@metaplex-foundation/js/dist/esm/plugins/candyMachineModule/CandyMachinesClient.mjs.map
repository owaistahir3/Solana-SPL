{"version":3,"file":"CandyMachinesClient.mjs","sources":["../../../../src/plugins/candyMachineModule/CandyMachinesClient.ts"],"sourcesContent":["import type { PublicKey } from '@solana/web3.js';\nimport type { Metaplex } from '@/Metaplex';\nimport { CandyMachinesBuildersClient } from './CandyMachinesBuildersClient';\nimport { LazyNft, Nft } from '../nftModule';\nimport { Task } from '@/utils';\nimport { CandyMachine } from './CandyMachine';\nimport {\n  CreateCandyMachineInput,\n  CreateCandyMachineInputWithoutConfigs,\n  createCandyMachineOperation,\n  CreateCandyMachineOutput,\n} from './createCandyMachine';\nimport {\n  CandyMachineJsonConfigs,\n  toCandyMachineConfigsFromJson,\n} from './CandyMachineJsonConfigs';\nimport {\n  findCandyMachineByAddressOperation,\n  FindCandyMachineByAddressInput,\n} from './findCandyMachineByAddress';\nimport {\n  FindCandyMachinesByPublicKeyFieldInput,\n  findCandyMachinesByPublicKeyFieldOperation,\n} from './findCandyMachinesByPublicKeyField';\nimport {\n  FindMintedNftsByCandyMachineInput,\n  findMintedNftsByCandyMachineOperation,\n} from './findMintedNftsByCandyMachine';\nimport {\n  InsertItemsToCandyMachineInput,\n  insertItemsToCandyMachineOperation,\n  InsertItemsToCandyMachineOutput,\n} from './insertItemsToCandyMachine';\nimport {\n  UpdateCandyMachineInput,\n  UpdateCandyMachineInputWithoutConfigs,\n  updateCandyMachineOperation,\n  UpdateCandyMachineOutput,\n} from './updateCandyMachine';\nimport {\n  MintCandyMachineInput,\n  mintCandyMachineOperation,\n  MintCandyMachineOutput,\n} from './mintCandyMachine';\nimport { CandyMachineBotTaxError } from './errors';\n\nexport class CandyMachinesClient {\n  constructor(readonly metaplex: Metaplex) {}\n\n  builders() {\n    return new CandyMachinesBuildersClient(this.metaplex);\n  }\n\n  create(\n    input: CreateCandyMachineInput\n  ): Task<CreateCandyMachineOutput & { candyMachine: CandyMachine }> {\n    return new Task(async (scope) => {\n      const operation = createCandyMachineOperation(input);\n      const output = await this.metaplex.operations().execute(operation, scope);\n      scope.throwIfCanceled();\n      const candyMachine = await this.findByAddress(\n        output.candyMachineSigner.publicKey\n      ).run(scope);\n      return { ...output, candyMachine };\n    });\n  }\n\n  createFromJsonConfig(\n    input: CreateCandyMachineInputWithoutConfigs & {\n      json: CandyMachineJsonConfigs;\n    }\n  ) {\n    const { json, ...otherInputs } = input;\n    const configs = toCandyMachineConfigsFromJson(json);\n    return this.create({ ...otherInputs, ...configs });\n  }\n\n  findAllByWallet(\n    wallet: PublicKey,\n    options?: Omit<FindCandyMachinesByPublicKeyFieldInput, 'type' | 'publicKey'>\n  ): Task<CandyMachine[]> {\n    return this.metaplex.operations().getTask(\n      findCandyMachinesByPublicKeyFieldOperation({\n        type: 'wallet',\n        publicKey: wallet,\n        ...options,\n      })\n    );\n  }\n\n  findAllByAuthority(\n    authority: PublicKey,\n    options?: Omit<FindCandyMachinesByPublicKeyFieldInput, 'type' | 'publicKey'>\n  ): Task<CandyMachine[]> {\n    return this.metaplex.operations().getTask(\n      findCandyMachinesByPublicKeyFieldOperation({\n        type: 'authority',\n        publicKey: authority,\n        ...options,\n      })\n    );\n  }\n\n  findByAddress(\n    address: PublicKey,\n    options?: Omit<FindCandyMachineByAddressInput, 'type' | 'publicKey'>\n  ): Task<CandyMachine> {\n    return this.metaplex\n      .operations()\n      .getTask(findCandyMachineByAddressOperation({ address, ...options }));\n  }\n\n  findMintedNfts(\n    candyMachine: PublicKey,\n    options?: Omit<FindMintedNftsByCandyMachineInput, 'candyMachine'>\n  ): Task<(LazyNft | Nft)[]> {\n    return this.metaplex\n      .operations()\n      .getTask(\n        findMintedNftsByCandyMachineOperation({ candyMachine, ...options })\n      );\n  }\n\n  insertItems(\n    candyMachine: CandyMachine,\n    input: Omit<InsertItemsToCandyMachineInput, 'candyMachine'>\n  ): Task<InsertItemsToCandyMachineOutput & { candyMachine: CandyMachine }> {\n    return new Task(async (scope) => {\n      const operation = insertItemsToCandyMachineOperation({\n        candyMachine,\n        ...input,\n      });\n      const output = await this.metaplex.operations().execute(operation, scope);\n      scope.throwIfCanceled();\n      const updatedCandyMachine = await this.findByAddress(\n        candyMachine.address\n      ).run();\n      return { candyMachine: updatedCandyMachine, ...output };\n    });\n  }\n\n  mint(\n    candyMachine: CandyMachine,\n    input: Omit<MintCandyMachineInput, 'candyMachine'> = {}\n  ): Task<MintCandyMachineOutput & { nft: Nft; candyMachine: CandyMachine }> {\n    return new Task(async (scope) => {\n      const operation = mintCandyMachineOperation({ candyMachine, ...input });\n      const output = await this.metaplex.operations().execute(operation, scope);\n      scope.throwIfCanceled();\n\n      let nft: Nft;\n      try {\n        nft = await this.metaplex\n          .nfts()\n          .findByMint(output.mintSigner.publicKey)\n          .run(scope);\n      } catch (error) {\n        throw new CandyMachineBotTaxError(\n          this.metaplex.rpc().getSolanaExporerUrl(output.response.signature),\n          error as Error\n        );\n      }\n      scope.throwIfCanceled();\n\n      const updatedCandyMachine = await this.findByAddress(\n        candyMachine.address\n      ).run(scope);\n      return { nft, candyMachine: updatedCandyMachine, ...output };\n    });\n  }\n\n  update(\n    candyMachine: CandyMachine,\n    input: Omit<UpdateCandyMachineInput, 'candyMachine'>\n  ): Task<UpdateCandyMachineOutput & { candyMachine: CandyMachine }> {\n    return new Task(async (scope) => {\n      const output = await this.metaplex\n        .operations()\n        .execute(\n          updateCandyMachineOperation({ candyMachine, ...input }),\n          scope\n        );\n      scope.throwIfCanceled();\n      const updatedCandyMachine = await this.findByAddress(\n        candyMachine.address\n      ).run();\n      return { candyMachine: updatedCandyMachine, ...output };\n    });\n  }\n\n  updateFromJsonConfig(\n    candyMachine: CandyMachine,\n    input: Omit<UpdateCandyMachineInputWithoutConfigs, 'candyMachine'> & {\n      json: CandyMachineJsonConfigs;\n    }\n  ) {\n    const { json, ...otherInputs } = input;\n    const configs = toCandyMachineConfigsFromJson(json);\n    return this.update(candyMachine, { ...otherInputs, ...configs });\n  }\n}\n"],"names":["CandyMachinesClient","constructor","metaplex","builders","CandyMachinesBuildersClient","create","input","Task","scope","operation","createCandyMachineOperation","output","operations","execute","throwIfCanceled","candyMachine","findByAddress","candyMachineSigner","publicKey","run","createFromJsonConfig","json","otherInputs","configs","toCandyMachineConfigsFromJson","findAllByWallet","wallet","options","getTask","findCandyMachinesByPublicKeyFieldOperation","type","findAllByAuthority","authority","address","findCandyMachineByAddressOperation","findMintedNfts","findMintedNftsByCandyMachineOperation","insertItems","insertItemsToCandyMachineOperation","updatedCandyMachine","mint","mintCandyMachineOperation","nft","nfts","findByMint","mintSigner","error","CandyMachineBotTaxError","rpc","getSolanaExporerUrl","response","signature","update","updateCandyMachineOperation","updateFromJsonConfig"],"mappings":"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"}