{"version":3,"file":"mintTokens.mjs","sources":["../../../../src/plugins/tokenModule/mintTokens.ts"],"sourcesContent":["import { ConfirmOptions, PublicKey } from '@solana/web3.js';\nimport { createMintToInstruction } from '@solana/spl-token';\nimport type { Metaplex } from '@/Metaplex';\nimport {\n  Amount,\n  isSigner,\n  KeypairSigner,\n  Operation,\n  OperationHandler,\n  Signer,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder } from '@/utils';\nimport { SendAndConfirmTransactionResponse } from '../rpcModule';\nimport { isMint, Mint } from './Mint';\nimport { TokenProgram } from './program';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'MintTokensOperation' as const;\nexport const mintTokensOperation = useOperation<MintTokensOperation>(Key);\nexport type MintTokensOperation = Operation<\n  typeof Key,\n  MintTokensInput,\n  MintTokensOutput\n>;\n\nexport type MintTokensInput = {\n  mint: PublicKey | Mint;\n  destination: PublicKey;\n  amount: Amount;\n  mintAuthority?: PublicKey | Signer; // Defaults to mx.identity().\n  multiSigners?: KeypairSigner[]; // Defaults to [].\n  tokenProgram?: PublicKey; // Defaults to Token Program.\n  confirmOptions?: ConfirmOptions;\n};\n\nexport type MintTokensOutput = {\n  response: SendAndConfirmTransactionResponse;\n};\n\n// -----------------\n// Handler\n// -----------------\n\nexport const mintTokensOperationHandler: OperationHandler<MintTokensOperation> =\n  {\n    async handle(\n      operation: MintTokensOperation,\n      metaplex: Metaplex\n    ): Promise<MintTokensOutput> {\n      return mintTokensBuilder(metaplex, operation.input).sendAndConfirm(\n        metaplex,\n        operation.input.confirmOptions\n      );\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\nexport type MintTokensBuilderParams = Omit<\n  MintTokensInput,\n  'confirmOptions'\n> & {\n  instructionKey?: string;\n};\n\nexport const mintTokensBuilder = (\n  metaplex: Metaplex,\n  params: MintTokensBuilderParams\n): TransactionBuilder => {\n  const {\n    mint,\n    destination,\n    amount,\n    mintAuthority = metaplex.identity(),\n    multiSigners = [],\n    tokenProgram = TokenProgram.publicKey,\n  } = params;\n\n  const [mintAuthorityPublicKey, signers] = isSigner(mintAuthority)\n    ? [mintAuthority.publicKey, [mintAuthority]]\n    : [mintAuthority, multiSigners];\n\n  return TransactionBuilder.make().add({\n    instruction: createMintToInstruction(\n      isMint(mint) ? mint.address : mint,\n      destination,\n      mintAuthorityPublicKey,\n      amount.basisPoints.toNumber(),\n      multiSigners,\n      tokenProgram\n    ),\n    signers,\n    key: params.instructionKey ?? 'mintTokens',\n  });\n};\n"],"names":["Key","mintTokensOperation","useOperation","mintTokensOperationHandler","handle","operation","metaplex","mintTokensBuilder","input","sendAndConfirm","confirmOptions","params","mint","destination","amount","mintAuthority","identity","multiSigners","tokenProgram","TokenProgram","publicKey","mintAuthorityPublicKey","signers","isSigner","TransactionBuilder","make","add","instruction","createMintToInstruction","isMint","address","basisPoints","toNumber","key","instructionKey"],"mappings":";;;;;;;AAkBA;AACA;;AAEA,MAAMA,GAAG,GAAG,qBAAZ,CAAA;MACaC,mBAAmB,GAAGC,YAAY,CAAsBF,GAAtB,EAAxC;AAqBP;AACA;AACA;AAEO,MAAMG,0BAAiE,GAC5E;AACE,EAAA,MAAMC,MAAN,CACEC,SADF,EAEEC,QAFF,EAG6B;AAC3B,IAAA,OAAOC,iBAAiB,CAACD,QAAD,EAAWD,SAAS,CAACG,KAArB,CAAjB,CAA6CC,cAA7C,CACLH,QADK,EAELD,SAAS,CAACG,KAAV,CAAgBE,cAFX,CAAP,CAAA;AAID,GAAA;;AATH;AAaF;AACA;;MASaH,iBAAiB,GAAG,CAC/BD,QAD+B,EAE/BK,MAF+B,KAGR;AAAA,EAAA,IAAA,qBAAA,CAAA;;EACvB,MAAM;IACJC,IADI;IAEJC,WAFI;IAGJC,MAHI;AAIJC,IAAAA,aAAa,GAAGT,QAAQ,CAACU,QAAT,EAJZ;AAKJC,IAAAA,YAAY,GAAG,EALX;IAMJC,YAAY,GAAGC,YAAY,CAACC,SAAAA;AANxB,GAAA,GAOFT,MAPJ,CAAA;EASA,MAAM,CAACU,sBAAD,EAAyBC,OAAzB,CAAA,GAAoCC,QAAQ,CAACR,aAAD,CAAR,GACtC,CAACA,aAAa,CAACK,SAAf,EAA0B,CAACL,aAAD,CAA1B,CADsC,GAEtC,CAACA,aAAD,EAAgBE,YAAhB,CAFJ,CAAA;AAIA,EAAA,OAAOO,kBAAkB,CAACC,IAAnB,EAAA,CAA0BC,GAA1B,CAA8B;AACnCC,IAAAA,WAAW,EAAEC,uBAAuB,CAClCC,MAAM,CAACjB,IAAD,CAAN,GAAeA,IAAI,CAACkB,OAApB,GAA8BlB,IADI,EAElCC,WAFkC,EAGlCQ,sBAHkC,EAIlCP,MAAM,CAACiB,WAAP,CAAmBC,QAAnB,EAJkC,EAKlCf,YALkC,EAMlCC,YANkC,CADD;IASnCI,OATmC;AAUnCW,IAAAA,GAAG,EAAEtB,CAAAA,qBAAAA,GAAAA,MAAM,CAACuB,cAAT,MAA2B,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,qBAAA,GAAA,YAAA;AAVK,GAA9B,CAAP,CAAA;AAYD;;;;"}