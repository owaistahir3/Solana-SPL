{"version":3,"file":"Bid.mjs","sources":["../../../../src/plugins/auctionHouseModule/Bid.ts"],"sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport {\n  amount,\n  BigNumber,\n  DateTime,\n  lamports,\n  Pda,\n  SolAmount,\n  SplTokenAmount,\n  toBigNumber,\n  toDateTime,\n  toOptionDateTime,\n} from '@/types';\nimport { BidReceiptAccount } from './accounts';\nimport {\n  isMintWithMetadata,\n  MintWithMetadata,\n  TokenWithMetadata,\n} from '../nftModule';\nimport { assert, Option } from '@/utils';\nimport { AuctionHouse } from './AuctionHouse';\n\nexport type Bid = Readonly<\n  {\n    model: 'bid';\n    lazy: false;\n\n    // Models.\n    auctionHouse: AuctionHouse;\n\n    // Addresses.\n    tradeStateAddress: Pda;\n    buyerAddress: PublicKey;\n    bookkeeperAddress: Option<PublicKey>;\n    receiptAddress: Option<Pda>;\n    purchaseReceiptAddress: Option<PublicKey>;\n\n    // Data.\n    price: SolAmount | SplTokenAmount;\n    tokens: SplTokenAmount;\n    createdAt: DateTime;\n    canceledAt: Option<DateTime>;\n  } & (\n    | {\n        isPublic: false;\n        token: TokenWithMetadata;\n      }\n    | {\n        isPublic: true;\n        mint: MintWithMetadata;\n      }\n  )\n>;\n\nexport const isBid = (value: any): value is Bid =>\n  typeof value === 'object' && value.model === 'bid' && !value.lazy;\n\nexport function assertBid(value: any): asserts value is Bid {\n  assert(isBid(value), `Expected Bid type`);\n}\n\nexport const toBid = (\n  account: BidReceiptAccount,\n  auctionHouseModel: AuctionHouse,\n  metadataModel: TokenWithMetadata | MintWithMetadata\n): Bid => {\n  const lazyBid = toLazyBid(account, auctionHouseModel);\n\n  return {\n    ...lazyBid,\n    model: 'bid',\n    lazy: false,\n    ...(isMintWithMetadata(metadataModel)\n      ? {\n          mint: metadataModel,\n          tokens: amount(lazyBid.tokens, metadataModel.currency),\n          isPublic: true,\n        }\n      : {\n          token: metadataModel,\n          tokens: amount(lazyBid.tokens, metadataModel.mint.currency),\n          isPublic: false,\n        }),\n  };\n};\n\nexport type LazyBid = Omit<Bid, 'lazy' | 'token' | 'mint' | 'tokens'> &\n  Readonly<{\n    lazy: true;\n    metadataAddress: PublicKey;\n    tokenAddress: Option<PublicKey>;\n    tokens: BigNumber;\n  }>;\n\nexport const isLazyBid = (value: any): value is LazyBid =>\n  typeof value === 'object' && value.model === 'bid' && value.lazy;\n\nexport function assertLazyBid(value: any): asserts value is LazyBid {\n  assert(isLazyBid(value), `Expected LazyBid type`);\n}\nexport const toLazyBid = (\n  account: BidReceiptAccount,\n  auctionHouseModel: AuctionHouse\n): LazyBid => {\n  return {\n    model: 'bid',\n    lazy: true,\n    auctionHouse: auctionHouseModel,\n    tradeStateAddress: new Pda(\n      account.data.tradeState,\n      account.data.tradeStateBump\n    ),\n    bookkeeperAddress: account.data.bookkeeper,\n    buyerAddress: account.data.buyer,\n    metadataAddress: account.data.metadata,\n    tokenAddress: account.data.tokenAccount,\n    receiptAddress: new Pda(\n      account.data.tradeState,\n      account.data.tradeStateBump\n    ),\n    purchaseReceiptAddress: account.data.purchaseReceipt,\n    isPublic: Boolean(account.data.tokenAccount),\n\n    // Data.\n    price: auctionHouseModel.isNative\n      ? lamports(account.data.price)\n      : amount(account.data.price, auctionHouseModel.treasuryMint.currency),\n    tokens: toBigNumber(account.data.tokenSize),\n    createdAt: toDateTime(account.data.createdAt),\n    canceledAt: toOptionDateTime(account.data.canceledAt),\n  };\n};\n"],"names":["toBid","account","auctionHouseModel","metadataModel","lazyBid","toLazyBid","model","lazy","isMintWithMetadata","mint","tokens","amount","currency","isPublic","token","auctionHouse","tradeStateAddress","Pda","data","tradeState","tradeStateBump","bookkeeperAddress","bookkeeper","buyerAddress","buyer","metadataAddress","metadata","tokenAddress","tokenAccount","receiptAddress","purchaseReceiptAddress","purchaseReceipt","Boolean","price","isNative","lamports","treasuryMint","toBigNumber","tokenSize","createdAt","toDateTime","canceledAt","toOptionDateTime"],"mappings":";;;;;;AA6DO,MAAMA,KAAK,GAAG,CACnBC,OADmB,EAEnBC,iBAFmB,EAGnBC,aAHmB,KAIX;AACR,EAAA,MAAMC,OAAO,GAAGC,SAAS,CAACJ,OAAD,EAAUC,iBAAV,CAAzB,CAAA;EAEA,OAAO,EACL,GAAGE,OADE;AAELE,IAAAA,KAAK,EAAE,KAFF;AAGLC,IAAAA,IAAI,EAAE,KAHD;AAIL,IAAA,IAAIC,kBAAkB,CAACL,aAAD,CAAlB,GACA;AACEM,MAAAA,IAAI,EAAEN,aADR;MAEEO,MAAM,EAAEC,MAAM,CAACP,OAAO,CAACM,MAAT,EAAiBP,aAAa,CAACS,QAA/B,CAFhB;AAGEC,MAAAA,QAAQ,EAAE,IAAA;AAHZ,KADA,GAMA;AACEC,MAAAA,KAAK,EAAEX,aADT;AAEEO,MAAAA,MAAM,EAAEC,MAAM,CAACP,OAAO,CAACM,MAAT,EAAiBP,aAAa,CAACM,IAAd,CAAmBG,QAApC,CAFhB;AAGEC,MAAAA,QAAQ,EAAE,KAAA;KAThB,CAAA;GAJF,CAAA;AAgBD,EAvBM;MAuCMR,SAAS,GAAG,CACvBJ,OADuB,EAEvBC,iBAFuB,KAGX;EACZ,OAAO;AACLI,IAAAA,KAAK,EAAE,KADF;AAELC,IAAAA,IAAI,EAAE,IAFD;AAGLQ,IAAAA,YAAY,EAAEb,iBAHT;AAILc,IAAAA,iBAAiB,EAAE,IAAIC,GAAJ,CACjBhB,OAAO,CAACiB,IAAR,CAAaC,UADI,EAEjBlB,OAAO,CAACiB,IAAR,CAAaE,cAFI,CAJd;AAQLC,IAAAA,iBAAiB,EAAEpB,OAAO,CAACiB,IAAR,CAAaI,UAR3B;AASLC,IAAAA,YAAY,EAAEtB,OAAO,CAACiB,IAAR,CAAaM,KATtB;AAULC,IAAAA,eAAe,EAAExB,OAAO,CAACiB,IAAR,CAAaQ,QAVzB;AAWLC,IAAAA,YAAY,EAAE1B,OAAO,CAACiB,IAAR,CAAaU,YAXtB;AAYLC,IAAAA,cAAc,EAAE,IAAIZ,GAAJ,CACdhB,OAAO,CAACiB,IAAR,CAAaC,UADC,EAEdlB,OAAO,CAACiB,IAAR,CAAaE,cAFC,CAZX;AAgBLU,IAAAA,sBAAsB,EAAE7B,OAAO,CAACiB,IAAR,CAAaa,eAhBhC;IAiBLlB,QAAQ,EAAEmB,OAAO,CAAC/B,OAAO,CAACiB,IAAR,CAAaU,YAAd,CAjBZ;AAmBL;IACAK,KAAK,EAAE/B,iBAAiB,CAACgC,QAAlB,GACHC,QAAQ,CAAClC,OAAO,CAACiB,IAAR,CAAae,KAAd,CADL,GAEHtB,MAAM,CAACV,OAAO,CAACiB,IAAR,CAAae,KAAd,EAAqB/B,iBAAiB,CAACkC,YAAlB,CAA+BxB,QAApD,CAtBL;IAuBLF,MAAM,EAAE2B,WAAW,CAACpC,OAAO,CAACiB,IAAR,CAAaoB,SAAd,CAvBd;IAwBLC,SAAS,EAAEC,UAAU,CAACvC,OAAO,CAACiB,IAAR,CAAaqB,SAAd,CAxBhB;AAyBLE,IAAAA,UAAU,EAAEC,gBAAgB,CAACzC,OAAO,CAACiB,IAAR,CAAauB,UAAd,CAAA;GAzB9B,CAAA;AA2BD;;;;"}