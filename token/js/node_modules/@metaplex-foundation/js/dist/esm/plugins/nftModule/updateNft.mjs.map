{"version":3,"file":"updateNft.mjs","sources":["../../../../src/plugins/nftModule/updateNft.ts"],"sourcesContent":["import { ConfirmOptions, PublicKey } from '@solana/web3.js';\nimport {\n  Collection,\n  createUpdateMetadataAccountV2Instruction,\n  UpdateMetadataAccountArgsV2,\n  Uses,\n} from '@metaplex-foundation/mpl-token-metadata';\nimport {\n  useOperation,\n  Operation,\n  Signer,\n  OperationHandler,\n  Creator,\n} from '@/types';\nimport { LazyNft, Nft } from './Nft';\nimport { Metaplex } from '@/Metaplex';\nimport { Option, TransactionBuilder } from '@/utils';\nimport { NoInstructionsToSendError } from '@/errors';\nimport { SendAndConfirmTransactionResponse } from '../rpcModule';\nimport isEqual from 'lodash.isequal';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'UpdateNftOperation' as const;\nexport const updateNftOperation = useOperation<UpdateNftOperation>(Key);\nexport type UpdateNftOperation = Operation<\n  typeof Key,\n  UpdateNftInput,\n  UpdateNftOutput\n>;\n\nexport interface UpdateNftInput {\n  // Accounts and models.\n  nft: Nft | LazyNft;\n  updateAuthority?: Signer; // Defaults to mx.identity().\n  newUpdateAuthority?: PublicKey;\n\n  // Data.\n  name?: string;\n  symbol?: string;\n  uri?: string;\n  sellerFeeBasisPoints?: number;\n  creators?: Creator[];\n  collection?: Option<Collection>;\n  uses?: Option<Uses>;\n  primarySaleHappened?: boolean;\n  isMutable?: boolean;\n\n  // Options.\n  confirmOptions?: ConfirmOptions;\n}\n\nexport interface UpdateNftOutput {\n  response: SendAndConfirmTransactionResponse;\n}\n\n// -----------------\n// Handler\n// -----------------\n\nexport const updateNftOperationHandler: OperationHandler<UpdateNftOperation> = {\n  handle: async (\n    operation: UpdateNftOperation,\n    metaplex: Metaplex\n  ): Promise<UpdateNftOutput> => {\n    const builder = updateNftBuilder(metaplex, operation.input);\n\n    if (builder.isEmpty()) {\n      throw new NoInstructionsToSendError(Key);\n    }\n\n    return builder.sendAndConfirm(metaplex, operation.input.confirmOptions);\n  },\n};\n\n// -----------------\n// Builder\n// -----------------\n\nexport type UpdateNftBuilderParams = Omit<UpdateNftInput, 'confirmOptions'> & {\n  updateMetadataInstructionKey?: string;\n};\n\nexport const updateNftBuilder = (\n  metaplex: Metaplex,\n  params: UpdateNftBuilderParams\n): TransactionBuilder => {\n  const { nft, updateAuthority = metaplex.identity() } = params;\n  const updateInstructionDataWithoutChanges = toInstructionData(nft);\n  const updateInstructionData = toInstructionData(nft, params);\n  const shouldSendUpdateInstruction = !isEqual(\n    updateInstructionData,\n    updateInstructionDataWithoutChanges\n  );\n\n  // TODO\n  return (\n    TransactionBuilder.make()\n\n      // Update the metadata account.\n      .when(shouldSendUpdateInstruction, (builder) =>\n        builder.add({\n          instruction: createUpdateMetadataAccountV2Instruction(\n            {\n              metadata: nft.metadataAddress,\n              updateAuthority: updateAuthority.publicKey,\n            },\n            {\n              updateMetadataAccountArgsV2: updateInstructionData,\n            }\n          ),\n          signers: [updateAuthority],\n          key: params.updateMetadataInstructionKey ?? 'updateMetadata',\n        })\n      )\n  );\n};\n\nconst toInstructionData = (\n  nft: LazyNft | Nft,\n  input: Partial<UpdateNftInput> = {}\n): UpdateMetadataAccountArgsV2 => {\n  return {\n    updateAuthority: input.newUpdateAuthority ?? nft.updateAuthorityAddress,\n    primarySaleHappened: input.primarySaleHappened ?? nft.primarySaleHappened,\n    isMutable: input.isMutable ?? nft.isMutable,\n    data: {\n      name: input.name ?? nft.name,\n      symbol: input.symbol ?? nft.symbol,\n      uri: input.uri ?? nft.uri,\n      sellerFeeBasisPoints:\n        input.sellerFeeBasisPoints ?? nft.sellerFeeBasisPoints,\n      creators: input.creators ?? nft.creators,\n      collection:\n        input.collection === undefined ? nft.collection : input.collection,\n      uses: input.uses === undefined ? nft.uses : input.uses,\n    },\n  };\n};\n"],"names":["Key","updateNftOperation","useOperation","updateNftOperationHandler","handle","operation","metaplex","builder","updateNftBuilder","input","isEmpty","NoInstructionsToSendError","sendAndConfirm","confirmOptions","params","nft","updateAuthority","identity","updateInstructionDataWithoutChanges","toInstructionData","updateInstructionData","shouldSendUpdateInstruction","isEqual","TransactionBuilder","make","when","add","instruction","createUpdateMetadataAccountV2Instruction","metadata","metadataAddress","publicKey","updateMetadataAccountArgsV2","signers","key","updateMetadataInstructionKey","newUpdateAuthority","updateAuthorityAddress","primarySaleHappened","isMutable","data","name","symbol","uri","sellerFeeBasisPoints","creators","collection","undefined","uses"],"mappings":"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"}