{"version":3,"file":"TokenClient.mjs","sources":["../../../../src/plugins/tokenModule/TokenClient.ts"],"sourcesContent":["import type { PublicKey } from '@solana/web3.js';\nimport type { Metaplex } from '@/Metaplex';\nimport { Task } from '@/utils';\nimport { TokenBuildersClient } from './TokenBuildersClient';\nimport { Mint } from './Mint';\nimport { Token, TokenWithMint } from './Token';\nimport {\n  CreateMintInput,\n  createMintOperation,\n  CreateMintOutput,\n} from './createMint';\nimport {\n  CreateTokenInput,\n  createTokenOperation,\n  CreateTokenOutput,\n} from './createToken';\nimport {\n  CreateTokenWithMintInput,\n  createTokenWithMintOperation,\n  CreateTokenWithMintOutput,\n} from './createTokenWithMint';\nimport {\n  FindMintByAddressInput,\n  findMintByAddressOperation,\n} from './findMintByAddress';\nimport {\n  FindTokenByAddressInput,\n  findTokenByAddressOperation,\n} from './findTokenByAddress';\nimport {\n  FindTokenWithMintByAddressInput,\n  findTokenWithMintByAddressOperation,\n} from './findTokenWithMintByAddress';\nimport {\n  FindTokenWithMintByMintInput,\n  findTokenWithMintByMintOperation,\n} from './findTokenWithMintByMint';\nimport {\n  MintTokensInput,\n  mintTokensOperation,\n  MintTokensOutput,\n} from './mintTokens';\nimport {\n  SendTokensInput,\n  sendTokensOperation,\n  SendTokensOutput,\n} from './sendTokens';\n\nexport class TokenClient {\n  constructor(protected readonly metaplex: Metaplex) {}\n\n  builders() {\n    return new TokenBuildersClient(this.metaplex);\n  }\n\n  createMint(\n    input: CreateMintInput = {}\n  ): Task<CreateMintOutput & { mint: Mint }> {\n    return new Task(async (scope) => {\n      const operation = createMintOperation(input);\n      const output = await this.metaplex.operations().execute(operation, scope);\n      scope.throwIfCanceled();\n      const mint = await this.findMintByAddress(\n        output.mintSigner.publicKey\n      ).run(scope);\n      return { ...output, mint };\n    });\n  }\n\n  createToken(\n    input: CreateTokenInput\n  ): Task<CreateTokenOutput & { token: Token }> {\n    return new Task(async (scope) => {\n      const operation = createTokenOperation(input);\n      const output = await this.metaplex.operations().execute(operation, scope);\n      scope.throwIfCanceled();\n      const token = await this.findTokenByAddress(output.tokenAddress).run(\n        scope\n      );\n      return { ...output, token };\n    });\n  }\n\n  createTokenWithMint(\n    input: CreateTokenWithMintInput = {}\n  ): Task<CreateTokenWithMintOutput & { token: TokenWithMint }> {\n    return new Task(async (scope) => {\n      const operation = createTokenWithMintOperation(input);\n      const output = await this.metaplex.operations().execute(operation, scope);\n      scope.throwIfCanceled();\n      const token = await this.findTokenWithMintByMint({\n        mint: output.mintSigner.publicKey,\n        address: output.tokenAddress,\n        addressType: 'token',\n      }).run(scope);\n      return { ...output, token };\n    });\n  }\n\n  findMintByAddress(\n    address: PublicKey,\n    options?: Omit<FindMintByAddressInput, 'address'>\n  ) {\n    return this.metaplex\n      .operations()\n      .getTask(findMintByAddressOperation({ address, ...options }));\n  }\n\n  findTokenByAddress(\n    address: PublicKey,\n    options?: Omit<FindTokenByAddressInput, 'address'>\n  ) {\n    return this.metaplex\n      .operations()\n      .getTask(findTokenByAddressOperation({ address, ...options }));\n  }\n\n  findTokenWithMintByAddress(\n    address: PublicKey,\n    options?: Omit<FindTokenWithMintByAddressInput, 'address'>\n  ) {\n    return this.metaplex\n      .operations()\n      .getTask(findTokenWithMintByAddressOperation({ address, ...options }));\n  }\n\n  findTokenWithMintByMint(input: FindTokenWithMintByMintInput) {\n    return this.metaplex\n      .operations()\n      .getTask(findTokenWithMintByMintOperation(input));\n  }\n\n  mintTokens(input: MintTokensInput): Task<MintTokensOutput> {\n    return this.metaplex.operations().getTask(mintTokensOperation(input));\n  }\n\n  sendTokens(input: SendTokensInput): Task<SendTokensOutput> {\n    return this.metaplex.operations().getTask(sendTokensOperation(input));\n  }\n}\n"],"names":["TokenClient","constructor","metaplex","builders","TokenBuildersClient","createMint","input","Task","scope","operation","createMintOperation","output","operations","execute","throwIfCanceled","mint","findMintByAddress","mintSigner","publicKey","run","createToken","createTokenOperation","token","findTokenByAddress","tokenAddress","createTokenWithMint","createTokenWithMintOperation","findTokenWithMintByMint","address","addressType","options","getTask","findMintByAddressOperation","findTokenByAddressOperation","findTokenWithMintByAddress","findTokenWithMintByAddressOperation","findTokenWithMintByMintOperation","mintTokens","mintTokensOperation","sendTokens","sendTokensOperation"],"mappings":"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"}