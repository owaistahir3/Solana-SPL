{"version":3,"file":"findMintWithMetadataByMetadata.mjs","sources":["../../../../src/plugins/nftModule/findMintWithMetadataByMetadata.ts"],"sourcesContent":["import type { Commitment, PublicKey } from '@solana/web3.js';\nimport { Metaplex } from '@/Metaplex';\nimport { Operation, useOperation, OperationHandler } from '@/types';\nimport {\n  toMintWithMetadata,\n  MintWithMetadata,\n  toLazyMetadata,\n  Metadata,\n  LazyMetadata,\n} from './Metadata';\nimport { toMintAccount } from '../tokenModule';\nimport { toMetadataAccount } from './accounts';\nimport { DisposableScope } from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindMintWithMetadataByMetadataOperation' as const;\nexport const findMintWithMetadataByMetadataOperation =\n  useOperation<FindMintWithMetadataByMetadataOperation>(Key);\nexport type FindMintWithMetadataByMetadataOperation = Operation<\n  typeof Key,\n  FindMintWithMetadataByMetadataInput,\n  MintWithMetadata\n>;\n\nexport type FindMintWithMetadataByMetadataInput = {\n  address: PublicKey;\n  commitment?: Commitment;\n  loadJsonMetadata?: boolean; // Default: true\n};\n\n// -----------------\n// Handler\n// -----------------\n\nexport const findMintWithMetadataByMetadataOperationHandler: OperationHandler<FindMintWithMetadataByMetadataOperation> =\n  {\n    handle: async (\n      operation: FindMintWithMetadataByMetadataOperation,\n      metaplex: Metaplex,\n      scope: DisposableScope\n    ): Promise<MintWithMetadata> => {\n      const { address, commitment, loadJsonMetadata = true } = operation.input;\n\n      const metadataAccount = toMetadataAccount(\n        await metaplex.rpc().getAccount(address, commitment)\n      );\n      scope.throwIfCanceled();\n\n      const mintAccount = toMintAccount(\n        await metaplex.rpc().getAccount(metadataAccount.data.mint, commitment)\n      );\n      scope.throwIfCanceled();\n\n      let metadataModel: Metadata | LazyMetadata =\n        toLazyMetadata(metadataAccount);\n\n      if (loadJsonMetadata) {\n        metadataModel = await metaplex\n          .nfts()\n          .loadMetadata(metadataModel)\n          .run(scope);\n      }\n\n      return toMintWithMetadata(mintAccount, metadataModel);\n    },\n  };\n"],"names":["Key","findMintWithMetadataByMetadataOperation","useOperation","findMintWithMetadataByMetadataOperationHandler","handle","operation","metaplex","scope","address","commitment","loadJsonMetadata","input","metadataAccount","toMetadataAccount","rpc","getAccount","throwIfCanceled","mintAccount","toMintAccount","data","mint","metadataModel","toLazyMetadata","nfts","loadMetadata","run","toMintWithMetadata"],"mappings":";;;;;AAcA;AACA;AACA;AAEA,MAAMA,GAAG,GAAG,yCAAZ,CAAA;MACaC,uCAAuC,GAClDC,YAAY,CAA0CF,GAA1C,EADP;AAcP;AACA;AACA;AAEO,MAAMG,8CAAyG,GACpH;AACEC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAIwB;IAC9B,MAAM;MAAEC,OAAF;MAAWC,UAAX;AAAuBC,MAAAA,gBAAgB,GAAG,IAAA;KAASL,GAAAA,SAAS,CAACM,KAAnE,CAAA;AAEA,IAAA,MAAMC,eAAe,GAAGC,iBAAiB,CACvC,MAAMP,QAAQ,CAACQ,GAAT,EAAA,CAAeC,UAAf,CAA0BP,OAA1B,EAAmCC,UAAnC,CADiC,CAAzC,CAAA;AAGAF,IAAAA,KAAK,CAACS,eAAN,EAAA,CAAA;AAEA,IAAA,MAAMC,WAAW,GAAGC,aAAa,CAC/B,MAAMZ,QAAQ,CAACQ,GAAT,EAAA,CAAeC,UAAf,CAA0BH,eAAe,CAACO,IAAhB,CAAqBC,IAA/C,EAAqDX,UAArD,CADyB,CAAjC,CAAA;AAGAF,IAAAA,KAAK,CAACS,eAAN,EAAA,CAAA;AAEA,IAAA,IAAIK,aAAsC,GACxCC,cAAc,CAACV,eAAD,CADhB,CAAA;;AAGA,IAAA,IAAIF,gBAAJ,EAAsB;AACpBW,MAAAA,aAAa,GAAG,MAAMf,QAAQ,CAC3BiB,IADmB,EAAA,CAEnBC,YAFmB,CAENH,aAFM,CAAA,CAGnBI,GAHmB,CAGflB,KAHe,CAAtB,CAAA;AAID,KAAA;;AAED,IAAA,OAAOmB,kBAAkB,CAACT,WAAD,EAAcI,aAAd,CAAzB,CAAA;AACD,GAAA;AA7BH;;;;"}