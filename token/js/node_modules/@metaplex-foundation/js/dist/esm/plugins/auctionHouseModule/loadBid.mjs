import { assertTokenWithMetadata } from '../nftModule/Metadata.mjs';
import assert from '../../utils/assert.mjs';
import { useOperation } from '../../types/Operation.mjs';
import { amount } from '../../types/Amount.mjs';

// Operation
// -----------------

const Key = 'LoadBidOperation';
const loadBidOperation = useOperation(Key);
// -----------------
// Handler
// -----------------
const loadBidOperationHandler = {
  handle: async (operation, metaplex, scope) => {
    const {
      lazyBid,
      loadJsonMetadata = true,
      commitment
    } = operation.input;
    const bid = { ...lazyBid,
      model: 'bid',
      lazy: false
    };

    if (lazyBid.tokenAddress) {
      const tokenModel = await metaplex.nfts().findTokenWithMetadataByAddress(lazyBid.tokenAddress, {
        commitment,
        loadJsonMetadata
      }).run(scope);
      scope.throwIfCanceled();
      assertTokenWithMetadata(tokenModel);
      assert(tokenModel.metadata.address.equals(lazyBid.metadataAddress), `Token Modal metadata address must be ${lazyBid.metadataAddress}`);
      return { ...bid,
        isPublic: false,
        token: tokenModel,
        tokens: amount(lazyBid.tokens, tokenModel.mint.currency)
      };
    } else {
      const mintModel = await metaplex.nfts().findMintWithMetadataByMetadata(lazyBid.metadataAddress, {
        commitment,
        loadJsonMetadata
      }).run(scope);
      scope.throwIfCanceled();
      return { ...bid,
        isPublic: true,
        mint: mintModel,
        tokens: amount(lazyBid.tokens, mintModel.currency)
      };
    }
  }
};

export { loadBidOperation, loadBidOperationHandler };
//# sourceMappingURL=loadBid.mjs.map
