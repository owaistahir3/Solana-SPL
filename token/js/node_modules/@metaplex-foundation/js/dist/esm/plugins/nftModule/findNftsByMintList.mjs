import { parseMetadataAccount } from './accounts.mjs';
import { findMetadataPda } from './pdas.mjs';
import { toLazyNft } from './Nft.mjs';
import { toLazyMetadata } from './Metadata.mjs';
import { GmaBuilder } from '../../utils/GmaBuilder.mjs';
import { zipMap } from '../../utils/common.mjs';
import { useOperation } from '../../types/Operation.mjs';

// Operation
// -----------------

const Key = 'FindNftsByMintListOperation';
const findNftsByMintListOperation = useOperation(Key);
// -----------------
// Handler
// -----------------
const findNftsByMintListOperationHandler = {
  handle: async (operation, metaplex, scope) => {
    const {
      mints,
      commitment
    } = operation.input;
    const metadataPdas = mints.map(mint => findMetadataPda(mint));
    const metadataInfos = await GmaBuilder.make(metaplex, metadataPdas, {
      commitment
    }).get();
    scope.throwIfCanceled();
    return zipMap(metadataPdas, metadataInfos, (metadataPda, metadataInfo) => {
      if (!metadataInfo || !metadataInfo.exists) return null;

      try {
        const metadata = parseMetadataAccount(metadataInfo);
        return toLazyNft(toLazyMetadata(metadata));
      } catch (error) {
        return null;
      }
    });
  }
};

export { findNftsByMintListOperation, findNftsByMintListOperationHandler };
//# sourceMappingURL=findNftsByMintList.mjs.map
