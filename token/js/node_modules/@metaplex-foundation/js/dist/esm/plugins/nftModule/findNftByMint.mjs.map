{"version":3,"file":"findNftByMint.mjs","sources":["../../../../src/plugins/nftModule/findNftByMint.ts"],"sourcesContent":["import { Commitment, PublicKey } from '@solana/web3.js';\nimport { Metaplex } from '@/Metaplex';\nimport { findMasterEditionV2Pda, findMetadataPda } from './pdas';\nimport { toMetadataAccount, toOriginalOrPrintEditionAccount } from './accounts';\nimport { Operation, useOperation, OperationHandler } from '@/types';\nimport { DisposableScope } from '@/utils';\nimport { Nft, toNft } from './Nft';\nimport { toLazyMetadata } from './Metadata';\nimport { toNftEdition } from './NftEdition';\nimport { toMint, toMintAccount } from '../tokenModule';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindNftByMintOperation' as const;\nexport const findNftByMintOperation = useOperation<FindNftByMintOperation>(Key);\nexport type FindNftByMintOperation = Operation<\n  typeof Key,\n  FindNftByMintInput,\n  Nft\n>;\n\nexport type FindNftByMintInput = {\n  mint: PublicKey;\n  commitment?: Commitment;\n};\n\n// -----------------\n// Handler\n// -----------------\n\nexport const findNftByMintOperationHandler: OperationHandler<FindNftByMintOperation> =\n  {\n    handle: async (\n      operation: FindNftByMintOperation,\n      metaplex: Metaplex,\n      scope: DisposableScope\n    ): Promise<Nft> => {\n      const { mint, commitment } = operation.input;\n      const accounts = await metaplex\n        .rpc()\n        .getMultipleAccounts(\n          [mint, findMetadataPda(mint), findMasterEditionV2Pda(mint)],\n          commitment\n        );\n      scope.throwIfCanceled();\n\n      const mintAccount = toMintAccount(accounts[0]);\n      const metadataAccount = toMetadataAccount(accounts[1]);\n      const editionAccount = toOriginalOrPrintEditionAccount(accounts[2]);\n      const lazyMetadata = toLazyMetadata(metadataAccount);\n\n      const metadata = await metaplex\n        .nfts()\n        .loadMetadata(lazyMetadata)\n        .run(scope);\n      scope.throwIfCanceled();\n\n      return toNft(metadata, toMint(mintAccount), toNftEdition(editionAccount));\n    },\n  };\n"],"names":["Key","findNftByMintOperation","useOperation","findNftByMintOperationHandler","handle","operation","metaplex","scope","mint","commitment","input","accounts","rpc","getMultipleAccounts","findMetadataPda","findMasterEditionV2Pda","throwIfCanceled","mintAccount","toMintAccount","metadataAccount","toMetadataAccount","editionAccount","toOriginalOrPrintEditionAccount","lazyMetadata","toLazyMetadata","metadata","nfts","loadMetadata","run","toNft","toMint","toNftEdition"],"mappings":";;;;;;;;;AAYA;AACA;;AAEA,MAAMA,GAAG,GAAG,wBAAZ,CAAA;MACaC,sBAAsB,GAAGC,YAAY,CAAyBF,GAAzB,EAA3C;AAYP;AACA;AACA;AAEO,MAAMG,6BAAuE,GAClF;AACEC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAIW;IACjB,MAAM;MAAEC,IAAF;AAAQC,MAAAA,UAAAA;KAAeJ,GAAAA,SAAS,CAACK,KAAvC,CAAA;IACA,MAAMC,QAAQ,GAAG,MAAML,QAAQ,CAC5BM,GADoB,EAEpBC,CAAAA,mBAFoB,CAGnB,CAACL,IAAD,EAAOM,eAAe,CAACN,IAAD,CAAtB,EAA8BO,sBAAsB,CAACP,IAAD,CAApD,CAHmB,EAInBC,UAJmB,CAAvB,CAAA;AAMAF,IAAAA,KAAK,CAACS,eAAN,EAAA,CAAA;IAEA,MAAMC,WAAW,GAAGC,aAAa,CAACP,QAAQ,CAAC,CAAD,CAAT,CAAjC,CAAA;IACA,MAAMQ,eAAe,GAAGC,iBAAiB,CAACT,QAAQ,CAAC,CAAD,CAAT,CAAzC,CAAA;IACA,MAAMU,cAAc,GAAGC,+BAA+B,CAACX,QAAQ,CAAC,CAAD,CAAT,CAAtD,CAAA;AACA,IAAA,MAAMY,YAAY,GAAGC,cAAc,CAACL,eAAD,CAAnC,CAAA;AAEA,IAAA,MAAMM,QAAQ,GAAG,MAAMnB,QAAQ,CAC5BoB,IADoB,EAAA,CAEpBC,YAFoB,CAEPJ,YAFO,CAAA,CAGpBK,GAHoB,CAGhBrB,KAHgB,CAAvB,CAAA;AAIAA,IAAAA,KAAK,CAACS,eAAN,EAAA,CAAA;AAEA,IAAA,OAAOa,KAAK,CAACJ,QAAD,EAAWK,MAAM,CAACb,WAAD,CAAjB,EAAgCc,YAAY,CAACV,cAAD,CAA5C,CAAZ,CAAA;AACD,GAAA;AA3BH;;;;"}