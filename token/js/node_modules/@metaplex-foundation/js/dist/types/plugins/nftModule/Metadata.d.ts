import { PublicKey } from '@solana/web3.js';
import { Collection, TokenStandard, UseMethod } from '@metaplex-foundation/mpl-token-metadata';
import { BigNumber, Creator, Pda } from '../../types';
import { JsonMetadata } from '../nftModule';
import { Option } from '../../utils';
import { MetadataAccount } from './accounts';
import { Mint, MintAccount, TokenAccount, TokenWithMint } from '../tokenModule';
export declare type Metadata = Readonly<{
    model: 'metadata';
    lazy: false;
    address: Pda;
    mintAddress: PublicKey;
    updateAuthorityAddress: PublicKey;
    json: Option<JsonMetadata>;
    name: string;
    symbol: string;
    uri: string;
    isMutable: boolean;
    primarySaleHappened: boolean;
    sellerFeeBasisPoints: number;
    editionNonce: Option<number>;
    creators: Creator[];
    tokenStandard: Option<TokenStandard>;
    collection: Option<Collection>;
    uses: Option<Uses>;
}>;
declare type Uses = {
    useMethod: UseMethod;
    remaining: BigNumber;
    total: BigNumber;
};
export declare const isMetadata: (value: any) => value is Readonly<{
    model: 'metadata';
    lazy: false;
    address: Pda;
    mintAddress: PublicKey;
    updateAuthorityAddress: PublicKey;
    json: Option<JsonMetadata>;
    name: string;
    symbol: string;
    uri: string;
    isMutable: boolean;
    primarySaleHappened: boolean;
    sellerFeeBasisPoints: number;
    editionNonce: Option<number>;
    creators: Creator[];
    tokenStandard: Option<TokenStandard>;
    collection: Option<Collection>;
    uses: Option<Uses>;
}>;
export declare function assertMetadata(value: any): asserts value is Metadata;
export declare const toMetadata: (account: MetadataAccount, json: Option<JsonMetadata>) => Metadata;
export declare type LazyMetadata = Omit<Metadata, 'lazy' | 'mint' | 'edition' | 'json'> & Readonly<{
    lazy: true;
}>;
export declare const isLazyMetadata: (value: any) => value is LazyMetadata;
export declare function assertLazyMetadata(value: any): asserts value is LazyMetadata;
export declare const toLazyMetadata: (account: MetadataAccount) => LazyMetadata;
export declare type MintWithMetadata = Omit<Mint, 'model'> & Readonly<{
    model: 'mintWithMetadata';
    metadata: Metadata | LazyMetadata;
}>;
export declare const isMintWithMetadata: (value: any) => value is MintWithMetadata;
export declare function assertMintWithMetadata(value: any): asserts value is MintWithMetadata;
export declare const toMintWithMetadata: (mintAccount: MintAccount, metadataModel: Metadata | LazyMetadata) => MintWithMetadata;
export declare type TokenWithMetadata = Omit<TokenWithMint, 'model'> & Readonly<{
    model: 'tokenWithMetadata';
    metadata: Metadata | LazyMetadata;
}>;
export declare const isTokenWithMetadata: (value: any) => value is TokenWithMetadata;
export declare function assertTokenWithMetadata(value: any): asserts value is TokenWithMetadata;
export declare const toTokenWithMetadata: (tokenAccount: TokenAccount, mintModel: Mint, metadataModel: Metadata | LazyMetadata) => TokenWithMetadata;
export {};
