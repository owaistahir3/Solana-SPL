import type { Commitment, PublicKey } from '@solana/web3.js';
import { Operation, OperationHandler } from '../../types';
import { AuctionHouse } from './AuctionHouse';
import { Bid } from './Bid';
declare const Key: "FindBidByAddressOperation";
export declare const findBidByAddressOperation: import("../../types").OperationConstructor<FindBidByAddressOperation, "FindBidByAddressOperation", FindBidByAddressInput, Readonly<{
    model: "bid";
    lazy: false;
    auctionHouse: Readonly<{
        model: "auctionHouse";
        address: import("../../types").Pda;
        creatorAddress: PublicKey;
        authorityAddress: PublicKey;
        treasuryMint: Readonly<{
            model: "mint";
            address: PublicKey;
            mintAuthorityAddress: import("../../utils").Option<PublicKey>;
            freezeAuthorityAddress: import("../../utils").Option<PublicKey>;
            decimals: number;
            supply: import("../../types").SplTokenAmount;
            isWrappedSol: boolean;
            currency: import("../../types").SplTokenCurrency;
        }> | import("..").MintWithMetadata;
        feeAccountAddress: import("../../types").Pda;
        treasuryAccountAddress: import("../../types").Pda;
        feeWithdrawalDestinationAddress: PublicKey;
        treasuryWithdrawalDestinationAddress: PublicKey;
        sellerFeeBasisPoints: number;
        requiresSignOff: boolean;
        canChangeSalePrice: boolean;
        isNative: boolean;
    }>;
    tradeStateAddress: import("../../types").Pda;
    buyerAddress: PublicKey;
    bookkeeperAddress: import("../../utils").Option<PublicKey>;
    receiptAddress: import("../../utils").Option<import("../../types").Pda>;
    purchaseReceiptAddress: import("../../utils").Option<PublicKey>;
    price: import("../../types").SplTokenAmount | import("../../types").SolAmount;
    tokens: import("../../types").SplTokenAmount;
    createdAt: import("../../types").DateTime;
    canceledAt: import("../../utils").Option<import("../../types").DateTime>;
} & {
    isPublic: false;
    token: import("..").TokenWithMetadata;
}> | Readonly<{
    model: "bid";
    lazy: false;
    auctionHouse: Readonly<{
        model: "auctionHouse";
        address: import("../../types").Pda;
        creatorAddress: PublicKey;
        authorityAddress: PublicKey;
        treasuryMint: Readonly<{
            model: "mint";
            address: PublicKey;
            mintAuthorityAddress: import("../../utils").Option<PublicKey>;
            freezeAuthorityAddress: import("../../utils").Option<PublicKey>;
            decimals: number;
            supply: import("../../types").SplTokenAmount;
            isWrappedSol: boolean;
            currency: import("../../types").SplTokenCurrency;
        }> | import("..").MintWithMetadata;
        feeAccountAddress: import("../../types").Pda;
        treasuryAccountAddress: import("../../types").Pda;
        feeWithdrawalDestinationAddress: PublicKey;
        treasuryWithdrawalDestinationAddress: PublicKey;
        sellerFeeBasisPoints: number;
        requiresSignOff: boolean;
        canChangeSalePrice: boolean;
        isNative: boolean;
    }>;
    tradeStateAddress: import("../../types").Pda;
    buyerAddress: PublicKey;
    bookkeeperAddress: import("../../utils").Option<PublicKey>;
    receiptAddress: import("../../utils").Option<import("../../types").Pda>;
    purchaseReceiptAddress: import("../../utils").Option<PublicKey>;
    price: import("../../types").SplTokenAmount | import("../../types").SolAmount;
    tokens: import("../../types").SplTokenAmount;
    createdAt: import("../../types").DateTime;
    canceledAt: import("../../utils").Option<import("../../types").DateTime>;
} & {
    isPublic: true;
    mint: import("..").MintWithMetadata;
}>>;
export declare type FindBidByAddressOperation = Operation<typeof Key, FindBidByAddressInput, Bid>;
export declare type FindBidByAddressInput = {
    address: PublicKey;
    auctionHouse: AuctionHouse;
    loadJsonMetadata?: boolean;
    commitment?: Commitment;
};
export declare const findBidByAddressOperationHandler: OperationHandler<FindBidByAddressOperation>;
export {};
