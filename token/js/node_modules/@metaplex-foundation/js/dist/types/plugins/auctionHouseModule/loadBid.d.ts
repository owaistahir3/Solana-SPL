import type { Commitment } from '@solana/web3.js';
import { Operation, OperationHandler } from '../../types';
import { Bid, LazyBid } from './Bid';
declare const Key: "LoadBidOperation";
export declare const loadBidOperation: import("../../types").OperationConstructor<LoadBidOperation, "LoadBidOperation", LoadBidInput, Readonly<{
    model: "bid";
    lazy: false;
    auctionHouse: Readonly<{
        model: "auctionHouse";
        address: import("../../types").Pda;
        creatorAddress: import("@solana/web3.js").PublicKey;
        authorityAddress: import("@solana/web3.js").PublicKey;
        treasuryMint: Readonly<{
            model: "mint";
            address: import("@solana/web3.js").PublicKey;
            mintAuthorityAddress: import("../../utils").Option<import("@solana/web3.js").PublicKey>;
            freezeAuthorityAddress: import("../../utils").Option<import("@solana/web3.js").PublicKey>;
            decimals: number;
            supply: import("../../types").SplTokenAmount;
            isWrappedSol: boolean;
            currency: import("../../types").SplTokenCurrency;
        }> | import("../nftModule").MintWithMetadata;
        feeAccountAddress: import("../../types").Pda;
        treasuryAccountAddress: import("../../types").Pda;
        feeWithdrawalDestinationAddress: import("@solana/web3.js").PublicKey;
        treasuryWithdrawalDestinationAddress: import("@solana/web3.js").PublicKey;
        sellerFeeBasisPoints: number;
        requiresSignOff: boolean;
        canChangeSalePrice: boolean;
        isNative: boolean;
    }>;
    tradeStateAddress: import("../../types").Pda;
    buyerAddress: import("@solana/web3.js").PublicKey;
    bookkeeperAddress: import("../../utils").Option<import("@solana/web3.js").PublicKey>;
    receiptAddress: import("../../utils").Option<import("../../types").Pda>;
    purchaseReceiptAddress: import("../../utils").Option<import("@solana/web3.js").PublicKey>;
    price: import("../../types").SplTokenAmount | import("../../types").SolAmount;
    tokens: import("../../types").SplTokenAmount;
    createdAt: import("../../types").DateTime;
    canceledAt: import("../../utils").Option<import("../../types").DateTime>;
} & {
    isPublic: false;
    token: import("../nftModule").TokenWithMetadata;
}> | Readonly<{
    model: "bid";
    lazy: false;
    auctionHouse: Readonly<{
        model: "auctionHouse";
        address: import("../../types").Pda;
        creatorAddress: import("@solana/web3.js").PublicKey;
        authorityAddress: import("@solana/web3.js").PublicKey;
        treasuryMint: Readonly<{
            model: "mint";
            address: import("@solana/web3.js").PublicKey;
            mintAuthorityAddress: import("../../utils").Option<import("@solana/web3.js").PublicKey>;
            freezeAuthorityAddress: import("../../utils").Option<import("@solana/web3.js").PublicKey>;
            decimals: number;
            supply: import("../../types").SplTokenAmount;
            isWrappedSol: boolean;
            currency: import("../../types").SplTokenCurrency;
        }> | import("../nftModule").MintWithMetadata;
        feeAccountAddress: import("../../types").Pda;
        treasuryAccountAddress: import("../../types").Pda;
        feeWithdrawalDestinationAddress: import("@solana/web3.js").PublicKey;
        treasuryWithdrawalDestinationAddress: import("@solana/web3.js").PublicKey;
        sellerFeeBasisPoints: number;
        requiresSignOff: boolean;
        canChangeSalePrice: boolean;
        isNative: boolean;
    }>;
    tradeStateAddress: import("../../types").Pda;
    buyerAddress: import("@solana/web3.js").PublicKey;
    bookkeeperAddress: import("../../utils").Option<import("@solana/web3.js").PublicKey>;
    receiptAddress: import("../../utils").Option<import("../../types").Pda>;
    purchaseReceiptAddress: import("../../utils").Option<import("@solana/web3.js").PublicKey>;
    price: import("../../types").SplTokenAmount | import("../../types").SolAmount;
    tokens: import("../../types").SplTokenAmount;
    createdAt: import("../../types").DateTime;
    canceledAt: import("../../utils").Option<import("../../types").DateTime>;
} & {
    isPublic: true;
    mint: import("../nftModule").MintWithMetadata;
}>>;
export declare type LoadBidOperation = Operation<typeof Key, LoadBidInput, Bid>;
export declare type LoadBidInput = {
    lazyBid: LazyBid;
    loadJsonMetadata?: boolean;
    commitment?: Commitment;
};
export declare const loadBidOperationHandler: OperationHandler<LoadBidOperation>;
export {};
