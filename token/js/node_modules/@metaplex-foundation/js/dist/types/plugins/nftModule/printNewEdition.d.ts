import { ConfirmOptions, PublicKey } from '@solana/web3.js';
import { Metaplex } from '../../Metaplex';
import { Operation, OperationHandler, Signer } from '../../types';
import { TransactionBuilder } from '../../utils';
import { LazyNft, Nft } from './Nft';
import { SendAndConfirmTransactionResponse } from '../rpcModule';
import { NftOriginalEdition } from './NftEdition';
declare const Key: "PrintNewEditionOperation";
export declare const printNewEditionOperation: import("../../types").OperationConstructor<PrintNewEditionOperation, "PrintNewEditionOperation", PrintNewEditionInput, PrintNewEditionOutput>;
export declare type PrintNewEditionOperation = Operation<typeof Key, PrintNewEditionInput, PrintNewEditionOutput>;
export declare type PrintNewEditionInput = PrintNewEditionSharedInput & PrintNewEditionViaInput;
export declare type PrintNewEditionSharedInput = {
    originalNft: Nft | LazyNft | PublicKey;
    newMint?: Signer;
    newMintAuthority?: Signer;
    newUpdateAuthority?: PublicKey;
    newOwner?: PublicKey;
    newTokenAccount?: Signer;
    newFreezeAuthority?: PublicKey;
    payer?: Signer;
    tokenProgram?: PublicKey;
    associatedTokenProgram?: PublicKey;
    confirmOptions?: ConfirmOptions;
};
export declare type PrintNewEditionViaInput = {
    via?: 'token';
    originalTokenAccountOwner?: Signer;
    originalTokenAccount?: PublicKey;
} | {
    via: 'vault';
    vaultAuthority: Signer;
    safetyDepositStore: PublicKey;
    safetyDepositBox: PublicKey;
    vault: PublicKey;
    tokenVaultProgram?: PublicKey;
};
export declare type PrintNewEditionOutput = {
    response: SendAndConfirmTransactionResponse;
    mintSigner: Signer;
    metadataAddress: PublicKey;
    editionAddress: PublicKey;
    tokenAddress: PublicKey;
    updatedOriginalEdition: NftOriginalEdition;
};
export declare const printNewEditionOperationHandler: OperationHandler<PrintNewEditionOperation>;
export declare type PrintNewEditionBuilderParams = PrintNewEditionViaInput & Omit<PrintNewEditionSharedInput, 'confirmOptions'> & {
    createMintAccountInstructionKey?: string;
    initializeMintInstructionKey?: string;
    createAssociatedTokenAccountInstructionKey?: string;
    createTokenAccountInstructionKey?: string;
    initializeTokenInstructionKey?: string;
    mintTokensInstructionKey?: string;
    printNewEditionInstructionKey?: string;
};
export declare type PrintNewEditionBuilderContext = Omit<PrintNewEditionOutput, 'response'>;
export declare const printNewEditionBuilder: (metaplex: Metaplex, params: PrintNewEditionBuilderParams) => Promise<TransactionBuilder<PrintNewEditionBuilderContext>>;
export {};
