import { ConfirmOptions, PublicKey } from '@solana/web3.js';
import { Operation, Signer, OperationHandler } from '../../types';
import { LazyNft, Nft } from './Nft';
import { Metaplex } from '../../Metaplex';
import { TransactionBuilder } from '../../utils';
import { SendAndConfirmTransactionResponse } from '../rpcModule';
declare const Key: "UseNftOperation";
export declare const useNftOperation: import("../../types").OperationConstructor<UseNftOperation, "UseNftOperation", UseNftInput, UseNftOutput>;
export declare type UseNftOperation = Operation<typeof Key, UseNftInput, UseNftOutput>;
export interface UseNftInput {
    nft: Nft | LazyNft | PublicKey;
    numberOfUses?: number;
    useAuthority?: Signer;
    owner?: PublicKey;
    tokenAccount?: PublicKey;
    isDelegated?: boolean;
    burner?: PublicKey;
    confirmOptions?: ConfirmOptions;
}
export interface UseNftOutput {
    response: SendAndConfirmTransactionResponse;
    mintAddress: PublicKey;
}
export declare const useNftOperationHandler: OperationHandler<UseNftOperation>;
export declare type UseNftBuilderParams = Omit<UseNftInput, 'confirmOptions'> & {
    utilizeInstructionKey?: string;
};
export declare type UseNftBuilderContext = Omit<UseNftOutput, 'response'>;
export declare const useNftBuilder: (metaplex: Metaplex, params: UseNftBuilderParams) => TransactionBuilder<UseNftBuilderContext>;
export {};
