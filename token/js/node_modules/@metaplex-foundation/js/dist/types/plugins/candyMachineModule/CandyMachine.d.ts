import { PublicKey } from '@solana/web3.js';
import { CandyMachineData, EndSettingType, WhitelistMintMode } from '@metaplex-foundation/mpl-candy-machine';
import { Amount, BigNumber, DateTime, UnparsedAccount } from '../../types';
import { Option } from '../../utils';
import { CandyMachineAccount, MaybeCandyMachineCollectionAccount } from './accounts';
import { Creator } from '../../types/Creator';
export declare type CandyMachine = Readonly<{
    model: 'candyMachine';
    address: PublicKey;
    authorityAddress: PublicKey;
    walletAddress: PublicKey;
    tokenMintAddress: Option<PublicKey>;
    collectionMintAddress: Option<PublicKey>;
    uuid: string;
    price: Amount;
    symbol: string;
    sellerFeeBasisPoints: number;
    isMutable: boolean;
    retainAuthority: boolean;
    goLiveDate: Option<DateTime>;
    maxEditionSupply: BigNumber;
    items: CandyMachineItem[];
    itemsAvailable: BigNumber;
    itemsMinted: BigNumber;
    itemsRemaining: BigNumber;
    itemsLoaded: BigNumber;
    isFullyLoaded: boolean;
    endSettings: Option<EndSettings>;
    hiddenSettings: Option<HiddenSettings>;
    whitelistMintSettings: Option<WhitelistMintSettings>;
    gatekeeper: Option<Gatekeeper>;
    creators: Creator[];
}>;
export declare type CandyMachineItem = Readonly<{
    name: string;
    uri: string;
}>;
export declare type EndSettings = {
    endSettingType: EndSettingType.Amount;
    number: BigNumber;
} | {
    endSettingType: EndSettingType.Date;
    date: DateTime;
};
export declare type HiddenSettings = {
    name: string;
    uri: string;
    hash: number[];
};
export declare type WhitelistMintSettings = {
    mode: WhitelistMintMode;
    mint: PublicKey;
    presale: boolean;
    discountPrice: Option<Amount>;
};
export declare type Gatekeeper = {
    network: PublicKey;
    expireOnUse: boolean;
};
export declare const isCandyMachine: (value: any) => value is Readonly<{
    model: 'candyMachine';
    address: PublicKey;
    authorityAddress: PublicKey;
    walletAddress: PublicKey;
    tokenMintAddress: Option<PublicKey>;
    collectionMintAddress: Option<PublicKey>;
    uuid: string;
    price: Amount;
    symbol: string;
    sellerFeeBasisPoints: number;
    isMutable: boolean;
    retainAuthority: boolean;
    goLiveDate: Option<DateTime>;
    maxEditionSupply: BigNumber;
    items: CandyMachineItem[];
    itemsAvailable: BigNumber;
    itemsMinted: BigNumber;
    itemsRemaining: BigNumber;
    itemsLoaded: BigNumber;
    isFullyLoaded: boolean;
    endSettings: Option<EndSettings>;
    hiddenSettings: Option<HiddenSettings>;
    whitelistMintSettings: Option<WhitelistMintSettings>;
    gatekeeper: Option<Gatekeeper>;
    creators: Creator[];
}>;
export declare function assertCandyMachine(value: any): asserts value is CandyMachine;
export declare const toCandyMachine: (account: CandyMachineAccount, unparsedAccount: UnparsedAccount, collectionAccount: MaybeCandyMachineCollectionAccount | null) => CandyMachine;
export declare type CandyMachineConfigs = {
    wallet: PublicKey;
    tokenMint: Option<PublicKey>;
    price: Amount;
    sellerFeeBasisPoints: number;
    itemsAvailable: BigNumber;
    symbol: string;
    maxEditionSupply: BigNumber;
    isMutable: boolean;
    retainAuthority: boolean;
    goLiveDate: Option<DateTime>;
    endSettings: Option<EndSettings>;
    hiddenSettings: Option<HiddenSettings>;
    whitelistMintSettings: Option<WhitelistMintSettings>;
    gatekeeper: Option<Gatekeeper>;
    creators: Creator[];
};
export declare const toCandyMachineConfigs: (candyMachine: CandyMachine) => CandyMachineConfigs;
export declare type CandyMachineInstructionData = {
    wallet: PublicKey;
    tokenMint: Option<PublicKey>;
    data: CandyMachineData;
};
export declare const toCandyMachineInstructionData: (address: PublicKey, configs: CandyMachineConfigs) => CandyMachineInstructionData;
