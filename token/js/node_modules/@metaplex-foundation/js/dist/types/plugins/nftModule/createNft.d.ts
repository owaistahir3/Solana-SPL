import { ConfirmOptions, PublicKey } from '@solana/web3.js';
import { Collection, Uses } from '@metaplex-foundation/mpl-token-metadata';
import { Metaplex } from '../../Metaplex';
import { Operation, Signer, OperationHandler, Creator, BigNumber } from '../../types';
import { Option, TransactionBuilder } from '../../utils';
import { SendAndConfirmTransactionResponse } from '../rpcModule';
declare const Key: "CreateNftOperation";
export declare const createNftOperation: import("../../types").OperationConstructor<CreateNftOperation, "CreateNftOperation", CreateNftInput, CreateNftOutput>;
export declare type CreateNftOperation = Operation<typeof Key, CreateNftInput, CreateNftOutput>;
export interface CreateNftInput {
    mint?: Signer;
    payer?: Signer;
    updateAuthority?: Signer;
    owner?: PublicKey;
    tokenAccount?: Signer;
    mintAuthority?: Signer;
    freezeAuthority?: Option<PublicKey>;
    uri: string;
    name: string;
    sellerFeeBasisPoints: number;
    symbol?: string;
    creators?: Creator[];
    isMutable?: boolean;
    maxSupply?: Option<BigNumber>;
    collection?: Option<Collection>;
    uses?: Option<Uses>;
    tokenProgram?: PublicKey;
    associatedTokenProgram?: PublicKey;
    confirmOptions?: ConfirmOptions;
}
export interface CreateNftOutput {
    response: SendAndConfirmTransactionResponse;
    mintSigner: Signer;
    metadataAddress: PublicKey;
    masterEditionAddress: PublicKey;
    tokenAddress: PublicKey;
}
export declare const createNftOperationHandler: OperationHandler<CreateNftOperation>;
export declare type CreateNftBuilderParams = Omit<CreateNftInput, 'confirmOptions'> & {
    createMintAccountInstructionKey?: string;
    initializeMintInstructionKey?: string;
    createAssociatedTokenAccountInstructionKey?: string;
    createTokenAccountInstructionKey?: string;
    initializeTokenInstructionKey?: string;
    mintTokensInstructionKey?: string;
    createMetadataInstructionKey?: string;
    createMasterEditionInstructionKey?: string;
};
export declare type CreateNftBuilderContext = Omit<CreateNftOutput, 'response'>;
export declare const createNftBuilder: (metaplex: Metaplex, params: CreateNftBuilderParams) => Promise<TransactionBuilder<CreateNftBuilderContext>>;
export {};
