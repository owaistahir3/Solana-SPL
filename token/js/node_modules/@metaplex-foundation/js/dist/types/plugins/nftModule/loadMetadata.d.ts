import { Operation, OperationHandler } from '../../types';
import { LazyMetadata, Metadata } from './Metadata';
import { JsonMetadata } from './JsonMetadata';
declare const Key: "LoadMetadataOperation";
export declare const loadMetadataOperation: import("../../types").OperationConstructor<LoadMetadataOperation, "LoadMetadataOperation", LoadMetadataInput, Readonly<{
    model: "metadata";
    lazy: false;
    address: import("../../types").Pda;
    mintAddress: import("@solana/web3.js").PublicKey;
    updateAuthorityAddress: import("@solana/web3.js").PublicKey;
    json: import("../../utils").Option<JsonMetadata<string>>;
    name: string;
    symbol: string;
    uri: string;
    isMutable: boolean;
    primarySaleHappened: boolean;
    sellerFeeBasisPoints: number;
    editionNonce: import("../../utils").Option<number>;
    creators: Readonly<{
        address: import("@solana/web3.js").PublicKey;
        verified: boolean;
        share: number;
    }>[];
    tokenStandard: import("../../utils").Option<import("@metaplex-foundation/mpl-token-metadata").TokenStandard>;
    collection: import("../../utils").Option<import("@metaplex-foundation/mpl-token-metadata").Collection>;
    uses: import("../../utils").Option<{
        useMethod: import("@metaplex-foundation/mpl-token-metadata").UseMethod;
        remaining: import("../../types").BigNumber;
        total: import("../../types").BigNumber;
    }>;
}>>;
export declare type LoadMetadataOperation = Operation<typeof Key, LoadMetadataInput, Metadata>;
export declare type LoadMetadataInput = {
    metadata: LazyMetadata;
};
export declare const loadMetadataOperationHandler: OperationHandler<LoadMetadataOperation>;
export {};
