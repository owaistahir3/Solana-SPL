'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Metadata = require('./Metadata.cjs');
var accounts$1 = require('./accounts.cjs');
var pdas = require('./pdas.cjs');
var Operation = require('../../types/Operation.cjs');
var pdas$1 = require('../tokenModule/pdas.cjs');
var accounts = require('../tokenModule/accounts.cjs');
var Mint = require('../tokenModule/Mint.cjs');
var Token = require('../tokenModule/Token.cjs');

// -----------------
// Operation
// -----------------
const Key = 'FindTokenWithMetadataByMintOperation';
const findTokenWithMetadataByMintOperation = Operation.useOperation(Key);
// -----------------
// Handler
// -----------------
const findTokenWithMetadataByMintOperationHandler = {
  handle: async (operation, metaplex, scope) => {
    const {
      mintAddress,
      ownerAddress,
      commitment,
      loadJsonMetadata = true
    } = operation.input;
    const metadataAddress = pdas.findMetadataPda(mintAddress);
    const tokenAddress = pdas$1.findAssociatedTokenAccountPda(mintAddress, ownerAddress);
    const accounts$2 = await metaplex.rpc().getMultipleAccounts([mintAddress, metadataAddress, tokenAddress], commitment);
    scope.throwIfCanceled();
    const mintAccount = accounts.toMintAccount(accounts$2[0]);
    const metadataAccount = accounts$1.parseMetadataAccount(accounts$2[1]);
    const tokenAccount = accounts.toTokenAccount(accounts$2[2]);
    const mintModel = Mint.toMint(mintAccount);

    if (!metadataAccount.exists) {
      return Token.toTokenWithMint(tokenAccount, mintModel);
    }

    let metadataModel = Metadata.toLazyMetadata(metadataAccount);

    if (loadJsonMetadata) {
      metadataModel = await metaplex.nfts().loadMetadata(metadataModel).run(scope);
    }

    return Metadata.toTokenWithMetadata(tokenAccount, mintModel, metadataModel);
  }
};

exports.findTokenWithMetadataByMintOperation = findTokenWithMetadataByMintOperation;
exports.findTokenWithMetadataByMintOperationHandler = findTokenWithMetadataByMintOperationHandler;
//# sourceMappingURL=findTokenWithMetadataByMint.cjs.map
