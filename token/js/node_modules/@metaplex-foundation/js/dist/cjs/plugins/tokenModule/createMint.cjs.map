{"version":3,"file":"createMint.cjs","sources":["../../../../src/plugins/tokenModule/createMint.ts"],"sourcesContent":["import { createInitializeMintInstruction, MINT_SIZE } from '@solana/spl-token';\nimport { ConfirmOptions, Keypair, PublicKey } from '@solana/web3.js';\nimport type { Metaplex } from '@/Metaplex';\nimport { Operation, OperationHandler, Signer, useOperation } from '@/types';\nimport { DisposableScope, Option, TransactionBuilder } from '@/utils';\nimport { SendAndConfirmTransactionResponse } from '../rpcModule';\nimport { TokenProgram } from './program';\n\nconst Key = 'CreateMintOperation' as const;\nexport const createMintOperation = useOperation<CreateMintOperation>(Key);\nexport type CreateMintOperation = Operation<\n  typeof Key,\n  CreateMintInput,\n  CreateMintOutput\n>;\n\nexport type CreateMintInput = {\n  decimals?: number; // Defaults to 0 decimals.\n  mint?: Signer; // Defaults to new generated Keypair.\n  payer?: Signer; // Defaults to mx.identity().\n  mintAuthority?: PublicKey; // Defaults to mx.identity().\n  freezeAuthority?: Option<PublicKey>; // Defaults to mx.identity().\n  tokenProgram?: PublicKey; // Defaults to System Program.\n  confirmOptions?: ConfirmOptions;\n};\n\nexport type CreateMintOutput = {\n  response: SendAndConfirmTransactionResponse;\n  mintSigner: Signer;\n};\n\nexport const createMintOperationHandler: OperationHandler<CreateMintOperation> =\n  {\n    async handle(\n      operation: CreateMintOperation,\n      metaplex: Metaplex,\n      scope: DisposableScope\n    ): Promise<CreateMintOutput> {\n      const builder = await createMintBuilder(metaplex, operation.input);\n      scope.throwIfCanceled();\n      return builder.sendAndConfirm(metaplex, operation.input.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\nexport type CreateMintBuilderParams = Omit<\n  CreateMintInput,\n  'confirmOptions'\n> & {\n  createAccountInstructionKey?: string;\n  initializeMintInstructionKey?: string;\n};\n\nexport type CreateMintBuilderContext = Omit<CreateMintOutput, 'response'>;\n\nexport const createMintBuilder = async (\n  metaplex: Metaplex,\n  params: CreateMintBuilderParams\n): Promise<TransactionBuilder<CreateMintBuilderContext>> => {\n  const {\n    decimals = 0,\n    mint = Keypair.generate(),\n    payer = metaplex.identity(),\n    mintAuthority = metaplex.identity().publicKey,\n    freezeAuthority = metaplex.identity().publicKey,\n    tokenProgram = TokenProgram.publicKey,\n  } = params;\n\n  return (\n    TransactionBuilder.make<CreateMintBuilderContext>()\n      .setFeePayer(payer)\n      .setContext({ mintSigner: mint })\n\n      // Create an empty account for the mint.\n      .add(\n        await metaplex\n          .system()\n          .builders()\n          .createAccount({\n            payer,\n            newAccount: mint,\n            space: MINT_SIZE,\n            program: tokenProgram,\n            instructionKey:\n              params.createAccountInstructionKey ?? 'createAccount',\n          })\n      )\n\n      // Initialize the mint.\n      .add({\n        instruction: createInitializeMintInstruction(\n          mint.publicKey,\n          decimals,\n          mintAuthority,\n          freezeAuthority,\n          tokenProgram\n        ),\n        signers: [mint],\n        key: params.initializeMintInstructionKey ?? 'initializeMint',\n      })\n  );\n};\n"],"names":["Key","createMintOperation","useOperation","createMintOperationHandler","handle","operation","metaplex","scope","builder","createMintBuilder","input","throwIfCanceled","sendAndConfirm","confirmOptions","params","decimals","mint","Keypair","generate","payer","identity","mintAuthority","publicKey","freezeAuthority","tokenProgram","TokenProgram","TransactionBuilder","make","setFeePayer","setContext","mintSigner","add","system","builders","createAccount","newAccount","space","MINT_SIZE","program","instructionKey","createAccountInstructionKey","instruction","createInitializeMintInstruction","signers","key","initializeMintInstructionKey"],"mappings":";;;;;;;;;;AAQA,MAAMA,GAAG,GAAG,qBAAZ,CAAA;MACaC,mBAAmB,GAAGC,sBAAY,CAAsBF,GAAtB,EAAxC;AAsBA,MAAMG,0BAAiE,GAC5E;AACE,EAAA,MAAMC,MAAN,CACEC,SADF,EAEEC,QAFF,EAGEC,KAHF,EAI6B;IAC3B,MAAMC,OAAO,GAAG,MAAMC,iBAAiB,CAACH,QAAD,EAAWD,SAAS,CAACK,KAArB,CAAvC,CAAA;AACAH,IAAAA,KAAK,CAACI,eAAN,EAAA,CAAA;IACA,OAAOH,OAAO,CAACI,cAAR,CAAuBN,QAAvB,EAAiCD,SAAS,CAACK,KAAV,CAAgBG,cAAjD,CAAP,CAAA;AACD,GAAA;;AATH;AAaF;AACA;;MAYaJ,iBAAiB,GAAG,OAC/BH,QAD+B,EAE/BQ,MAF+B,KAG2B;AAAA,EAAA,IAAA,qBAAA,EAAA,qBAAA,CAAA;;EAC1D,MAAM;AACJC,IAAAA,QAAQ,GAAG,CADP;AAEJC,IAAAA,IAAI,GAAGC,eAAO,CAACC,QAAR,EAFH;AAGJC,IAAAA,KAAK,GAAGb,QAAQ,CAACc,QAAT,EAHJ;AAIJC,IAAAA,aAAa,GAAGf,QAAQ,CAACc,QAAT,GAAoBE,SAJhC;AAKJC,IAAAA,eAAe,GAAGjB,QAAQ,CAACc,QAAT,GAAoBE,SALlC;IAMJE,YAAY,GAAGC,oBAAY,CAACH,SAAAA;AANxB,GAAA,GAOFR,MAPJ,CAAA;EASA,OACEY,qCAAkB,CAACC,IAAnB,EAAA,CACGC,WADH,CACeT,KADf,CAEGU,CAAAA,UAFH,CAEc;AAAEC,IAAAA,UAAU,EAAEd,IAAAA;AAAd,GAFd,CAIE;GACCe,GALH,CAMI,MAAMzB,QAAQ,CACX0B,MADG,EAEHC,CAAAA,QAFG,EAGHC,CAAAA,aAHG,CAGW;IACbf,KADa;AAEbgB,IAAAA,UAAU,EAAEnB,IAFC;AAGboB,IAAAA,KAAK,EAAEC,kBAHM;AAIbC,IAAAA,OAAO,EAAEd,YAJI;AAKbe,IAAAA,cAAc,EACZzB,CAAAA,qBAAAA,GAAAA,MAAM,CAAC0B,2BADK,MAC0B,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,qBAAA,GAAA,eAAA;AAN3B,GAHX,CANV,CAmBE;AAnBF,GAoBGT,GApBH,CAoBO;AACHU,IAAAA,WAAW,EAAEC,wCAA+B,CAC1C1B,IAAI,CAACM,SADqC,EAE1CP,QAF0C,EAG1CM,aAH0C,EAI1CE,eAJ0C,EAK1CC,YAL0C,CADzC;IAQHmB,OAAO,EAAE,CAAC3B,IAAD,CARN;AASH4B,IAAAA,GAAG,EAAE9B,CAAAA,qBAAAA,GAAAA,MAAM,CAAC+B,4BAAT,MAAyC,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,qBAAA,GAAA,gBAAA;AATzC,GApBP,CADF,CAAA;AAiCD;;;;;;"}