'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var accounts = require('./accounts.cjs');
var pdas = require('./pdas.cjs');
var Nft = require('./Nft.cjs');
var Metadata = require('./Metadata.cjs');
var GmaBuilder = require('../../utils/GmaBuilder.cjs');
var common = require('../../utils/common.cjs');
var Operation = require('../../types/Operation.cjs');

// Operation
// -----------------

const Key = 'FindNftsByMintListOperation';
const findNftsByMintListOperation = Operation.useOperation(Key);
// -----------------
// Handler
// -----------------
const findNftsByMintListOperationHandler = {
  handle: async (operation, metaplex, scope) => {
    const {
      mints,
      commitment
    } = operation.input;
    const metadataPdas = mints.map(mint => pdas.findMetadataPda(mint));
    const metadataInfos = await GmaBuilder.GmaBuilder.make(metaplex, metadataPdas, {
      commitment
    }).get();
    scope.throwIfCanceled();
    return common.zipMap(metadataPdas, metadataInfos, (metadataPda, metadataInfo) => {
      if (!metadataInfo || !metadataInfo.exists) return null;

      try {
        const metadata = accounts.parseMetadataAccount(metadataInfo);
        return Nft.toLazyNft(Metadata.toLazyMetadata(metadata));
      } catch (error) {
        return null;
      }
    });
  }
};

exports.findNftsByMintListOperation = findNftsByMintListOperation;
exports.findNftsByMintListOperationHandler = findNftsByMintListOperationHandler;
//# sourceMappingURL=findNftsByMintList.cjs.map
