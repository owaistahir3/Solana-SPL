{"version":3,"file":"mintCandyMachine.cjs","sources":["../../../../src/plugins/candyMachineModule/mintCandyMachine.ts"],"sourcesContent":["import {\n  ConfirmOptions,\n  Keypair,\n  PublicKey,\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_INSTRUCTIONS_PUBKEY,\n  SYSVAR_SLOT_HASHES_PUBKEY,\n} from '@solana/web3.js';\nimport {\n  createMintNftInstruction,\n  createSetCollectionDuringMintInstruction,\n} from '@metaplex-foundation/mpl-candy-machine';\nimport {\n  assertAccountExists,\n  Operation,\n  OperationHandler,\n  Signer,\n  token,\n  useOperation,\n} from '@/types';\nimport { Metaplex } from '@/Metaplex';\nimport { TransactionBuilder } from '@/utils';\nimport { CandyMachine } from './CandyMachine';\nimport { SendAndConfirmTransactionResponse } from '../rpcModule';\nimport {\n  findCollectionAuthorityRecordPda,\n  findMasterEditionV2Pda,\n  findMetadataPda,\n  TokenMetadataProgram,\n} from '../nftModule';\nimport {\n  findCandyMachineCollectionPda,\n  findCandyMachineCreatorPda,\n} from './pdas';\nimport { findAssociatedTokenAccountPda } from '../tokenModule';\nimport { CandyMachineProgram } from './program';\nimport { parseCandyMachineCollectionAccount } from './accounts';\nimport { assertCanMintCandyMachine } from './asserts';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'MintCandyMachineOperation' as const;\nexport const mintCandyMachineOperation =\n  useOperation<MintCandyMachineOperation>(Key);\nexport type MintCandyMachineOperation = Operation<\n  typeof Key,\n  MintCandyMachineInput,\n  MintCandyMachineOutput\n>;\n\nexport type MintCandyMachineInput = {\n  // Models and Accounts.\n  candyMachine: CandyMachine;\n  payer?: Signer; // Defaults to mx.identity().\n  newMint?: Signer; // Defaults to Keypair.generate().\n  newOwner?: PublicKey; // Defaults to mx.identity().\n  newToken?: Signer; // Defaults to associated token.\n  payerToken?: PublicKey; // Defaults to associated token.\n  whitelistToken?: PublicKey; // Defaults to associated token.\n\n  // Programs.\n  tokenProgram?: PublicKey;\n  associatedTokenProgram?: PublicKey;\n  tokenMetadataProgram?: PublicKey;\n  candyMachineProgram?: PublicKey;\n\n  // Transaction Options.\n  confirmOptions?: ConfirmOptions;\n};\n\nexport type MintCandyMachineOutput = {\n  response: SendAndConfirmTransactionResponse;\n  mintSigner: Signer;\n  tokenAddress: PublicKey;\n};\n\n// -----------------\n// Handler\n// -----------------\n\nexport const mintCandyMachineOperationHandler: OperationHandler<MintCandyMachineOperation> =\n  {\n    async handle(\n      operation: MintCandyMachineOperation,\n      metaplex: Metaplex\n    ): Promise<MintCandyMachineOutput> {\n      assertCanMintCandyMachine(\n        operation.input.candyMachine,\n        operation.input.payer ?? metaplex.identity()\n      );\n\n      const builder = await mintCandyMachineBuilder(metaplex, operation.input);\n      return builder.sendAndConfirm(metaplex, operation.input.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\nexport type MintCandyMachineBuilderParams = Omit<\n  MintCandyMachineInput,\n  'confirmOptions'\n> & {\n  createMintAccountInstructionKey?: string;\n  initializeMintInstructionKey?: string;\n  createAssociatedTokenAccountInstructionKey?: string;\n  createTokenAccountInstructionKey?: string;\n  initializeTokenInstructionKey?: string;\n  mintTokensInstructionKey?: string;\n  mintNftInstructionKey?: string;\n  setCollectionInstructionKey?: string;\n};\n\nexport type MintCandyMachineBuilderContext = Omit<\n  MintCandyMachineOutput,\n  'response'\n>;\n\nexport const mintCandyMachineBuilder = async (\n  metaplex: Metaplex,\n  params: MintCandyMachineBuilderParams\n): Promise<TransactionBuilder<MintCandyMachineBuilderContext>> => {\n  const {\n    candyMachine,\n    payer = metaplex.identity(),\n    newMint = Keypair.generate(),\n    newOwner = metaplex.identity().publicKey,\n    newToken,\n    tokenProgram,\n    associatedTokenProgram,\n    tokenMetadataProgram = TokenMetadataProgram.publicKey,\n    candyMachineProgram = CandyMachineProgram.publicKey,\n  } = params;\n\n  const newMetadata = findMetadataPda(newMint.publicKey, tokenMetadataProgram);\n  const newEdition = findMasterEditionV2Pda(\n    newMint.publicKey,\n    tokenMetadataProgram\n  );\n  const candyMachineCreator = findCandyMachineCreatorPda(\n    candyMachine.address,\n    candyMachineProgram\n  );\n  const candyMachineCollectionAddress = findCandyMachineCollectionPda(\n    candyMachine.address,\n    candyMachineProgram\n  );\n  const candyMachineCollectionAccount = parseCandyMachineCollectionAccount(\n    await metaplex.rpc().getAccount(candyMachineCollectionAddress)\n  );\n\n  const tokenWithMintBuilder = await metaplex\n    .tokens()\n    .builders()\n    .createTokenWithMint({\n      decimals: 0,\n      initialSupply: token(1),\n      mint: newMint,\n      mintAuthority: payer,\n      freezeAuthority: payer.publicKey,\n      owner: newOwner,\n      token: newToken,\n      payer,\n      tokenProgram,\n      associatedTokenProgram,\n      createMintAccountInstructionKey: params.createMintAccountInstructionKey,\n      initializeMintInstructionKey: params.initializeMintInstructionKey,\n      createAssociatedTokenAccountInstructionKey:\n        params.createAssociatedTokenAccountInstructionKey,\n      createTokenAccountInstructionKey: params.createTokenAccountInstructionKey,\n      initializeTokenInstructionKey: params.initializeTokenInstructionKey,\n      mintTokensInstructionKey: params.mintTokensInstructionKey,\n    });\n\n  const { tokenAddress } = tokenWithMintBuilder.getContext();\n\n  const mintNftInstruction = createMintNftInstruction(\n    {\n      candyMachine: candyMachine.address,\n      candyMachineCreator: candyMachineCreator,\n      payer: payer.publicKey,\n      wallet: candyMachine.walletAddress,\n      metadata: newMetadata,\n      mint: newMint.publicKey,\n      mintAuthority: payer.publicKey,\n      updateAuthority: payer.publicKey,\n      masterEdition: newEdition,\n      tokenMetadataProgram,\n      clock: SYSVAR_CLOCK_PUBKEY,\n      recentBlockhashes: SYSVAR_SLOT_HASHES_PUBKEY,\n      instructionSysvarAccount: SYSVAR_INSTRUCTIONS_PUBKEY,\n    },\n    { creatorBump: candyMachineCreator.bump }\n  );\n\n  if (candyMachine.whitelistMintSettings) {\n    const whitelistToken =\n      params.whitelistToken ??\n      findAssociatedTokenAccountPda(\n        candyMachine.whitelistMintSettings.mint,\n        payer.publicKey,\n        associatedTokenProgram\n      );\n\n    mintNftInstruction.keys.push(\n      {\n        pubkey: whitelistToken,\n        isWritable: true,\n        isSigner: false,\n      },\n      {\n        pubkey: candyMachine.whitelistMintSettings.mint,\n        isWritable: true,\n        isSigner: false,\n      },\n      {\n        pubkey: payer.publicKey,\n        isWritable: false,\n        isSigner: true,\n      }\n    );\n  }\n\n  if (candyMachine.tokenMintAddress) {\n    const payerToken =\n      params.payerToken ??\n      findAssociatedTokenAccountPda(\n        candyMachine.tokenMintAddress,\n        payer.publicKey,\n        associatedTokenProgram\n      );\n\n    mintNftInstruction.keys.push(\n      {\n        pubkey: payerToken,\n        isWritable: true,\n        isSigner: false,\n      },\n      {\n        pubkey: payer.publicKey,\n        isWritable: false,\n        isSigner: true,\n      }\n    );\n  }\n\n  return (\n    TransactionBuilder.make<MintCandyMachineBuilderContext>()\n      .setFeePayer(payer)\n      .setContext({\n        mintSigner: newMint,\n        tokenAddress,\n      })\n\n      // Create token and mint accounts.\n      .add(tokenWithMintBuilder)\n\n      // Create the new NFT.\n      .add({\n        instruction: mintNftInstruction,\n        signers: [payer, newMint],\n        key: params.mintNftInstructionKey ?? 'mintNft',\n      })\n\n      // Set the collection on the NFT.\n      .when(candyMachineCollectionAccount.exists, (builder) => {\n        assertAccountExists(candyMachineCollectionAccount);\n        const collectionMint = candyMachineCollectionAccount.data.mint;\n        const collectionMetadata = findMetadataPda(\n          collectionMint,\n          tokenMetadataProgram\n        );\n        const collectionMasterEdition = findMasterEditionV2Pda(\n          collectionMint,\n          tokenMetadataProgram\n        );\n        const collectionAuthorityRecord = findCollectionAuthorityRecordPda(\n          collectionMint,\n          candyMachineCollectionAccount.publicKey,\n          tokenMetadataProgram\n        );\n\n        return builder.add({\n          instruction: createSetCollectionDuringMintInstruction({\n            candyMachine: candyMachine.address,\n            metadata: newMetadata,\n            payer: payer.publicKey,\n            collectionPda: candyMachineCollectionAccount.publicKey,\n            tokenMetadataProgram,\n            instructions: SYSVAR_INSTRUCTIONS_PUBKEY,\n            collectionMint: candyMachineCollectionAccount.data.mint,\n            collectionMetadata,\n            collectionMasterEdition,\n            authority: candyMachine.authorityAddress,\n            collectionAuthorityRecord,\n          }),\n          signers: [payer],\n          key: params.setCollectionInstructionKey ?? 'setCollection',\n        });\n      })\n  );\n};\n"],"names":["Key","mintCandyMachineOperation","useOperation","mintCandyMachineOperationHandler","handle","operation","metaplex","assertCanMintCandyMachine","input","candyMachine","payer","identity","builder","mintCandyMachineBuilder","sendAndConfirm","confirmOptions","params","newMint","Keypair","generate","newOwner","publicKey","newToken","tokenProgram","associatedTokenProgram","tokenMetadataProgram","TokenMetadataProgram","candyMachineProgram","CandyMachineProgram","newMetadata","findMetadataPda","newEdition","findMasterEditionV2Pda","candyMachineCreator","findCandyMachineCreatorPda","address","candyMachineCollectionAddress","findCandyMachineCollectionPda","candyMachineCollectionAccount","parseCandyMachineCollectionAccount","rpc","getAccount","tokenWithMintBuilder","tokens","builders","createTokenWithMint","decimals","initialSupply","token","mint","mintAuthority","freezeAuthority","owner","createMintAccountInstructionKey","initializeMintInstructionKey","createAssociatedTokenAccountInstructionKey","createTokenAccountInstructionKey","initializeTokenInstructionKey","mintTokensInstructionKey","tokenAddress","getContext","mintNftInstruction","createMintNftInstruction","wallet","walletAddress","metadata","updateAuthority","masterEdition","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","SYSVAR_SLOT_HASHES_PUBKEY","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","creatorBump","bump","whitelistMintSettings","whitelistToken","findAssociatedTokenAccountPda","keys","push","pubkey","isWritable","isSigner","tokenMintAddress","payerToken","TransactionBuilder","make","setFeePayer","setContext","mintSigner","add","instruction","signers","key","mintNftInstructionKey","when","exists","assertAccountExists","collectionMint","data","collectionMetadata","collectionMasterEdition","collectionAuthorityRecord","findCollectionAuthorityRecordPda","createSetCollectionDuringMintInstruction","collectionPda","instructions","authority","authorityAddress","setCollectionInstructionKey"],"mappings":"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"}