'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var splToken = require('@solana/spl-token');
var web3_js = require('@solana/web3.js');
var program = require('./program.cjs');
var Operation = require('../../types/Operation.cjs');
var TransactionBuilder = require('../../utils/TransactionBuilder.cjs');

const Key = 'CreateMintOperation';
const createMintOperation = Operation.useOperation(Key);
const createMintOperationHandler = {
  async handle(operation, metaplex, scope) {
    const builder = await createMintBuilder(metaplex, operation.input);
    scope.throwIfCanceled();
    return builder.sendAndConfirm(metaplex, operation.input.confirmOptions);
  }

}; // -----------------
// Builder
// -----------------

const createMintBuilder = async (metaplex, params) => {
  var _params$createAccount, _params$initializeMin;

  const {
    decimals = 0,
    mint = web3_js.Keypair.generate(),
    payer = metaplex.identity(),
    mintAuthority = metaplex.identity().publicKey,
    freezeAuthority = metaplex.identity().publicKey,
    tokenProgram = program.TokenProgram.publicKey
  } = params;
  return TransactionBuilder.TransactionBuilder.make().setFeePayer(payer).setContext({
    mintSigner: mint
  }) // Create an empty account for the mint.
  .add(await metaplex.system().builders().createAccount({
    payer,
    newAccount: mint,
    space: splToken.MINT_SIZE,
    program: tokenProgram,
    instructionKey: (_params$createAccount = params.createAccountInstructionKey) !== null && _params$createAccount !== void 0 ? _params$createAccount : 'createAccount'
  })) // Initialize the mint.
  .add({
    instruction: splToken.createInitializeMintInstruction(mint.publicKey, decimals, mintAuthority, freezeAuthority, tokenProgram),
    signers: [mint],
    key: (_params$initializeMin = params.initializeMintInstructionKey) !== null && _params$initializeMin !== void 0 ? _params$initializeMin : 'initializeMint'
  });
};

exports.createMintBuilder = createMintBuilder;
exports.createMintOperation = createMintOperation;
exports.createMintOperationHandler = createMintOperationHandler;
//# sourceMappingURL=createMint.cjs.map
