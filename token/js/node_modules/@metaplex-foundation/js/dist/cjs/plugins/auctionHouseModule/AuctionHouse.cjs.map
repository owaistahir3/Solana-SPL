{"version":3,"file":"AuctionHouse.cjs","sources":["../../../../src/plugins/auctionHouseModule/AuctionHouse.ts"],"sourcesContent":["import type { PublicKey } from '@solana/web3.js';\nimport { Pda } from '@/types';\nimport { AuctionHouseAccount } from './accounts';\nimport { assert } from '@/utils';\nimport { Mint } from '../tokenModule';\nimport { MintWithMetadata } from '../nftModule';\n\nexport type AuctionHouse = Readonly<{\n  model: 'auctionHouse';\n  address: Pda;\n  creatorAddress: PublicKey;\n  authorityAddress: PublicKey;\n  treasuryMint: Mint | MintWithMetadata;\n  feeAccountAddress: Pda;\n  treasuryAccountAddress: Pda;\n  feeWithdrawalDestinationAddress: PublicKey;\n  treasuryWithdrawalDestinationAddress: PublicKey;\n  sellerFeeBasisPoints: number;\n  requiresSignOff: boolean;\n  canChangeSalePrice: boolean;\n  isNative: boolean;\n}>;\n\nexport const isAuctionHouse = (value: any): value is AuctionHouse =>\n  typeof value === 'object' && value.model === 'auctionHouse';\n\nexport function assertAuctionHouse(value: any): asserts value is AuctionHouse {\n  assert(isAuctionHouse(value), `Expected AuctionHouse type`);\n}\nexport const toAuctionHouse = (\n  auctionHouseAccount: AuctionHouseAccount,\n  treasuryMint: Mint | MintWithMetadata\n): AuctionHouse => ({\n  model: 'auctionHouse',\n  address: new Pda(\n    auctionHouseAccount.publicKey,\n    auctionHouseAccount.data.bump\n  ),\n  creatorAddress: auctionHouseAccount.data.creator,\n  authorityAddress: auctionHouseAccount.data.authority,\n  treasuryMint,\n  feeAccountAddress: new Pda(\n    auctionHouseAccount.data.auctionHouseFeeAccount,\n    auctionHouseAccount.data.feePayerBump\n  ),\n  treasuryAccountAddress: new Pda(\n    auctionHouseAccount.data.auctionHouseTreasury,\n    auctionHouseAccount.data.treasuryBump\n  ),\n  feeWithdrawalDestinationAddress:\n    auctionHouseAccount.data.feeWithdrawalDestination,\n  treasuryWithdrawalDestinationAddress:\n    auctionHouseAccount.data.treasuryWithdrawalDestination,\n  sellerFeeBasisPoints: auctionHouseAccount.data.sellerFeeBasisPoints,\n  requiresSignOff: auctionHouseAccount.data.requiresSignOff,\n  canChangeSalePrice: auctionHouseAccount.data.canChangeSalePrice,\n  isNative: treasuryMint.isWrappedSol,\n});\n"],"names":["isAuctionHouse","value","model","assertAuctionHouse","assert","toAuctionHouse","auctionHouseAccount","treasuryMint","address","Pda","publicKey","data","bump","creatorAddress","creator","authorityAddress","authority","feeAccountAddress","auctionHouseFeeAccount","feePayerBump","treasuryAccountAddress","auctionHouseTreasury","treasuryBump","feeWithdrawalDestinationAddress","feeWithdrawalDestination","treasuryWithdrawalDestinationAddress","treasuryWithdrawalDestination","sellerFeeBasisPoints","requiresSignOff","canChangeSalePrice","isNative","isWrappedSol"],"mappings":";;;;;;;AAuBaA,MAAAA,cAAc,GAAIC,KAAD,IAC5B,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,CAACC,KAAN,KAAgB,eADxC;AAGA,SAASC,kBAAT,CAA4BF,KAA5B,EAAuE;AAC5EG,EAAAA,iBAAM,CAACJ,cAAc,CAACC,KAAD,CAAf,EAAyB,4BAAzB,CAAN,CAAA;AACD,CAAA;MACYI,cAAc,GAAG,CAC5BC,mBAD4B,EAE5BC,YAF4B,MAGV;AAClBL,EAAAA,KAAK,EAAE,cADW;AAElBM,EAAAA,OAAO,EAAE,IAAIC,OAAJ,CACPH,mBAAmB,CAACI,SADb,EAEPJ,mBAAmB,CAACK,IAApB,CAAyBC,IAFlB,CAFS;AAMlBC,EAAAA,cAAc,EAAEP,mBAAmB,CAACK,IAApB,CAAyBG,OANvB;AAOlBC,EAAAA,gBAAgB,EAAET,mBAAmB,CAACK,IAApB,CAAyBK,SAPzB;EAQlBT,YARkB;AASlBU,EAAAA,iBAAiB,EAAE,IAAIR,OAAJ,CACjBH,mBAAmB,CAACK,IAApB,CAAyBO,sBADR,EAEjBZ,mBAAmB,CAACK,IAApB,CAAyBQ,YAFR,CATD;AAalBC,EAAAA,sBAAsB,EAAE,IAAIX,OAAJ,CACtBH,mBAAmB,CAACK,IAApB,CAAyBU,oBADH,EAEtBf,mBAAmB,CAACK,IAApB,CAAyBW,YAFH,CAbN;AAiBlBC,EAAAA,+BAA+B,EAC7BjB,mBAAmB,CAACK,IAApB,CAAyBa,wBAlBT;AAmBlBC,EAAAA,oCAAoC,EAClCnB,mBAAmB,CAACK,IAApB,CAAyBe,6BApBT;AAqBlBC,EAAAA,oBAAoB,EAAErB,mBAAmB,CAACK,IAApB,CAAyBgB,oBArB7B;AAsBlBC,EAAAA,eAAe,EAAEtB,mBAAmB,CAACK,IAApB,CAAyBiB,eAtBxB;AAuBlBC,EAAAA,kBAAkB,EAAEvB,mBAAmB,CAACK,IAApB,CAAyBkB,kBAvB3B;EAwBlBC,QAAQ,EAAEvB,YAAY,CAACwB,YAAAA;AAxBL,CAHU;;;;;;"}