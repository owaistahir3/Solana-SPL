{"version":3,"file":"loadBid.cjs","sources":["../../../../src/plugins/auctionHouseModule/loadBid.ts"],"sourcesContent":["import type { Commitment } from '@solana/web3.js';\nimport type { Metaplex } from '@/Metaplex';\nimport { useOperation, Operation, OperationHandler, amount } from '@/types';\nimport { assert, DisposableScope } from '@/utils';\nimport { Bid, LazyBid } from './Bid';\nimport { assertTokenWithMetadata } from '../nftModule';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'LoadBidOperation' as const;\nexport const loadBidOperation = useOperation<LoadBidOperation>(Key);\nexport type LoadBidOperation = Operation<typeof Key, LoadBidInput, Bid>;\n\nexport type LoadBidInput = {\n  lazyBid: LazyBid;\n  loadJsonMetadata?: boolean; // Default: true\n  commitment?: Commitment;\n};\n\n// -----------------\n// Handler\n// -----------------\n\nexport const loadBidOperationHandler: OperationHandler<LoadBidOperation> = {\n  handle: async (\n    operation: LoadBidOperation,\n    metaplex: Metaplex,\n    scope: DisposableScope\n  ) => {\n    const { lazyBid, loadJsonMetadata = true, commitment } = operation.input;\n\n    const bid: Omit<Bid, 'token' | 'mint' | 'tokens'> = {\n      ...lazyBid,\n      model: 'bid',\n      lazy: false,\n    };\n\n    if (lazyBid.tokenAddress) {\n      const tokenModel = await metaplex\n        .nfts()\n        .findTokenWithMetadataByAddress(lazyBid.tokenAddress, {\n          commitment,\n          loadJsonMetadata,\n        })\n        .run(scope);\n      scope.throwIfCanceled();\n\n      assertTokenWithMetadata(tokenModel);\n      assert(\n        tokenModel.metadata.address.equals(lazyBid.metadataAddress),\n        `Token Modal metadata address must be ${lazyBid.metadataAddress}`\n      );\n\n      return {\n        ...bid,\n        isPublic: false,\n        token: tokenModel,\n        tokens: amount(lazyBid.tokens, tokenModel.mint.currency),\n      };\n    } else {\n      const mintModel = await metaplex\n        .nfts()\n        .findMintWithMetadataByMetadata(lazyBid.metadataAddress, {\n          commitment,\n          loadJsonMetadata,\n        })\n        .run(scope);\n      scope.throwIfCanceled();\n\n      return {\n        ...bid,\n        isPublic: true,\n        mint: mintModel,\n        tokens: amount(lazyBid.tokens, mintModel.currency),\n      };\n    }\n  },\n};\n"],"names":["Key","loadBidOperation","useOperation","loadBidOperationHandler","handle","operation","metaplex","scope","lazyBid","loadJsonMetadata","commitment","input","bid","model","lazy","tokenAddress","tokenModel","nfts","findTokenWithMetadataByAddress","run","throwIfCanceled","assertTokenWithMetadata","assert","metadata","address","equals","metadataAddress","isPublic","token","tokens","amount","mint","currency","mintModel","findMintWithMetadataByMetadata"],"mappings":";;;;;;;;;AAQA;AACA;;AAEA,MAAMA,GAAG,GAAG,kBAAZ,CAAA;MACaC,gBAAgB,GAAGC,sBAAY,CAAmBF,GAAnB,EAArC;AASP;AACA;AACA;AAEO,MAAMG,uBAA2D,GAAG;AACzEC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAIH;IACH,MAAM;MAAEC,OAAF;AAAWC,MAAAA,gBAAgB,GAAG,IAA9B;AAAoCC,MAAAA,UAAAA;KAAeL,GAAAA,SAAS,CAACM,KAAnE,CAAA;AAEA,IAAA,MAAMC,GAA2C,GAAG,EAClD,GAAGJ,OAD+C;AAElDK,MAAAA,KAAK,EAAE,KAF2C;AAGlDC,MAAAA,IAAI,EAAE,KAAA;KAHR,CAAA;;IAMA,IAAIN,OAAO,CAACO,YAAZ,EAA0B;AACxB,MAAA,MAAMC,UAAU,GAAG,MAAMV,QAAQ,CAC9BW,IADsB,EAEtBC,CAAAA,8BAFsB,CAESV,OAAO,CAACO,YAFjB,EAE+B;QACpDL,UADoD;AAEpDD,QAAAA,gBAAAA;AAFoD,OAF/B,CAMtBU,CAAAA,GANsB,CAMlBZ,KANkB,CAAzB,CAAA;AAOAA,MAAAA,KAAK,CAACa,eAAN,EAAA,CAAA;MAEAC,gCAAuB,CAACL,UAAD,CAAvB,CAAA;AACAM,MAAAA,iBAAM,CACJN,UAAU,CAACO,QAAX,CAAoBC,OAApB,CAA4BC,MAA5B,CAAmCjB,OAAO,CAACkB,eAA3C,CADI,EAEH,CAAA,qCAAA,EAAuClB,OAAO,CAACkB,eAAgB,EAF5D,CAAN,CAAA;MAKA,OAAO,EACL,GAAGd,GADE;AAELe,QAAAA,QAAQ,EAAE,KAFL;AAGLC,QAAAA,KAAK,EAAEZ,UAHF;QAILa,MAAM,EAAEC,aAAM,CAACtB,OAAO,CAACqB,MAAT,EAAiBb,UAAU,CAACe,IAAX,CAAgBC,QAAjC,CAAA;OAJhB,CAAA;AAMD,KAtBD,MAsBO;AACL,MAAA,MAAMC,SAAS,GAAG,MAAM3B,QAAQ,CAC7BW,IADqB,EAErBiB,CAAAA,8BAFqB,CAEU1B,OAAO,CAACkB,eAFlB,EAEmC;QACvDhB,UADuD;AAEvDD,QAAAA,gBAAAA;AAFuD,OAFnC,CAMrBU,CAAAA,GANqB,CAMjBZ,KANiB,CAAxB,CAAA;AAOAA,MAAAA,KAAK,CAACa,eAAN,EAAA,CAAA;MAEA,OAAO,EACL,GAAGR,GADE;AAELe,QAAAA,QAAQ,EAAE,IAFL;AAGLI,QAAAA,IAAI,EAAEE,SAHD;QAILJ,MAAM,EAAEC,aAAM,CAACtB,OAAO,CAACqB,MAAT,EAAiBI,SAAS,CAACD,QAA3B,CAAA;OAJhB,CAAA;AAMD,KAAA;AACF,GAAA;AArDwE;;;;;"}