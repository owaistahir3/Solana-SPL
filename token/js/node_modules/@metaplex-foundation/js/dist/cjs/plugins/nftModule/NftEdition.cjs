'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var accounts = require('./accounts.cjs');
var assert = require('../../utils/assert.cjs');
var BigNumber = require('../../types/BigNumber.cjs');

const isNftEdition = value => typeof value === 'object' && value.model === 'nftEdition';
function assertNftEdition(value) {
  assert["default"](isNftEdition(value), `Expected NftEdition model`);
}
const toNftEdition = account => accounts.isOriginalEditionAccount(account) ? toNftOriginalEdition(account) : toNftPrintEdition(account);
const isNftOriginalEdition = value => isNftEdition(value) && value.isOriginal;
function assertNftOriginalEdition(value) {
  assert["default"](isNftOriginalEdition(value), `Expected NftOriginalEdition model`);
}
const toNftOriginalEdition = account => ({
  model: 'nftEdition',
  isOriginal: true,
  address: account.publicKey,
  supply: BigNumber.toBigNumber(account.data.supply),
  maxSupply: BigNumber.toOptionBigNumber(account.data.maxSupply)
});
const isNftPrintEdition = value => isNftEdition(value) && !value.isOriginal;
function assertNftPrintEdition(value) {
  assert["default"](isNftPrintEdition(value), `Expected NftPrintEdition model`);
}
const toNftPrintEdition = account => ({
  model: 'nftEdition',
  isOriginal: false,
  address: account.publicKey,
  parent: account.data.parent,
  number: BigNumber.toBigNumber(account.data.edition)
});

exports.assertNftEdition = assertNftEdition;
exports.assertNftOriginalEdition = assertNftOriginalEdition;
exports.assertNftPrintEdition = assertNftPrintEdition;
exports.isNftEdition = isNftEdition;
exports.isNftOriginalEdition = isNftOriginalEdition;
exports.isNftPrintEdition = isNftPrintEdition;
exports.toNftEdition = toNftEdition;
exports.toNftOriginalEdition = toNftOriginalEdition;
exports.toNftPrintEdition = toNftPrintEdition;
//# sourceMappingURL=NftEdition.cjs.map
