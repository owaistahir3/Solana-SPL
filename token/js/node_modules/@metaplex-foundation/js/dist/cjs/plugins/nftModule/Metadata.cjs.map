{"version":3,"file":"Metadata.cjs","sources":["../../../../src/plugins/nftModule/Metadata.ts"],"sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport {\n  Collection,\n  TokenStandard,\n  UseMethod,\n} from '@metaplex-foundation/mpl-token-metadata';\nimport { amount, BigNumber, Creator, Pda, toBigNumber } from '@/types';\nimport { JsonMetadata } from '../nftModule';\nimport { assert, Option, removeEmptyChars } from '@/utils';\nimport { findMetadataPda } from './pdas';\nimport { MetadataAccount } from './accounts';\nimport {\n  toMint,\n  toTokenWithMint,\n  Mint,\n  MintAccount,\n  TokenAccount,\n  TokenWithMint,\n} from '../tokenModule';\n\nexport type Metadata = Readonly<{\n  model: 'metadata';\n  lazy: false;\n  address: Pda;\n  mintAddress: PublicKey;\n  updateAuthorityAddress: PublicKey;\n  json: Option<JsonMetadata>;\n  name: string;\n  symbol: string;\n  uri: string;\n  isMutable: boolean;\n  primarySaleHappened: boolean;\n  sellerFeeBasisPoints: number;\n  editionNonce: Option<number>;\n  creators: Creator[];\n  tokenStandard: Option<TokenStandard>;\n  collection: Option<Collection>;\n  uses: Option<Uses>;\n}>;\n\ntype Uses = {\n  useMethod: UseMethod;\n  remaining: BigNumber;\n  total: BigNumber;\n};\n\nexport const isMetadata = (value: any): value is Metadata =>\n  typeof value === 'object' && value.model === 'metadata';\n\nexport function assertMetadata(value: any): asserts value is Metadata {\n  assert(isMetadata(value), `Expected Metadata model`);\n}\nexport const toMetadata = (\n  account: MetadataAccount,\n  json: Option<JsonMetadata>\n): Metadata => ({\n  ...toLazyMetadata(account),\n  lazy: false,\n  json,\n});\n\nexport type LazyMetadata = Omit<\n  Metadata,\n  'lazy' | 'mint' | 'edition' | 'json'\n> &\n  Readonly<{\n    lazy: true;\n  }>;\n\nexport const isLazyMetadata = (value: any): value is LazyMetadata =>\n  typeof value === 'object' && value.model === 'metadata' && value.lazy;\n\nexport function assertLazyMetadata(value: any): asserts value is LazyMetadata {\n  assert(isLazyMetadata(value), `Expected LazyMetadata model`);\n}\nexport const toLazyMetadata = (account: MetadataAccount): LazyMetadata => ({\n  model: 'metadata',\n  lazy: true,\n  address: findMetadataPda(account.data.mint),\n  mintAddress: account.data.mint,\n  updateAuthorityAddress: account.data.updateAuthority,\n  name: removeEmptyChars(account.data.data.name),\n  symbol: removeEmptyChars(account.data.data.symbol),\n  uri: removeEmptyChars(account.data.data.uri),\n  isMutable: account.data.isMutable,\n  primarySaleHappened: account.data.primarySaleHappened,\n  sellerFeeBasisPoints: account.data.data.sellerFeeBasisPoints,\n  editionNonce: account.data.editionNonce,\n  creators: account.data.data.creators ?? [],\n  tokenStandard: account.data.tokenStandard,\n  collection: account.data.collection,\n  uses: account.data.uses\n    ? {\n        ...account.data.uses,\n        remaining: toBigNumber(account.data.uses.remaining),\n        total: toBigNumber(account.data.uses.total),\n      }\n    : null,\n});\n\nexport type MintWithMetadata = Omit<Mint, 'model'> &\n  Readonly<{\n    model: 'mintWithMetadata';\n    metadata: Metadata | LazyMetadata;\n  }>;\n\nexport const isMintWithMetadata = (value: any): value is MintWithMetadata =>\n  typeof value === 'object' && value.model === 'mintWithMetadata';\n\nexport function assertMintWithMetadata(\n  value: any\n): asserts value is MintWithMetadata {\n  assert(isMintWithMetadata(value), `Expected MintWithMetadata model`);\n}\n\nexport const toMintWithMetadata = (\n  mintAccount: MintAccount,\n  metadataModel: Metadata | LazyMetadata\n): MintWithMetadata => {\n  const mint = toMint(mintAccount);\n  const currency = {\n    ...mint.currency,\n    symbol: metadataModel.symbol || 'Token',\n  };\n\n  return {\n    ...mint,\n    model: 'mintWithMetadata',\n    metadata: metadataModel,\n    currency,\n    supply: amount(mint.supply.basisPoints, currency),\n  };\n};\n\nexport type TokenWithMetadata = Omit<TokenWithMint, 'model'> &\n  Readonly<{\n    model: 'tokenWithMetadata';\n    metadata: Metadata | LazyMetadata;\n  }>;\n\nexport const isTokenWithMetadata = (value: any): value is TokenWithMetadata =>\n  typeof value === 'object' && value.model === 'tokenWithMetadata';\n\nexport function assertTokenWithMetadata(\n  value: any\n): asserts value is TokenWithMetadata {\n  assert(isTokenWithMetadata(value), `Expected TokenWithMetadata model`);\n}\n\nexport const toTokenWithMetadata = (\n  tokenAccount: TokenAccount,\n  mintModel: Mint,\n  metadataModel: Metadata | LazyMetadata\n): TokenWithMetadata => {\n  const token = toTokenWithMint(tokenAccount, mintModel);\n  const currency = {\n    ...token.mint.currency,\n    symbol: metadataModel.symbol || 'Token',\n  };\n\n  return {\n    ...token,\n    model: 'tokenWithMetadata',\n    mint: {\n      ...token.mint,\n      currency,\n      supply: amount(token.mint.supply.basisPoints, currency),\n    },\n    metadata: metadataModel,\n    amount: amount(token.amount.basisPoints, currency),\n    delegateAmount: amount(token.delegateAmount.basisPoints, currency),\n  };\n};\n"],"names":["isMetadata","value","model","assertMetadata","assert","toMetadata","account","json","toLazyMetadata","lazy","isLazyMetadata","assertLazyMetadata","address","findMetadataPda","data","mint","mintAddress","updateAuthorityAddress","updateAuthority","name","removeEmptyChars","symbol","uri","isMutable","primarySaleHappened","sellerFeeBasisPoints","editionNonce","creators","tokenStandard","collection","uses","remaining","toBigNumber","total","isMintWithMetadata","assertMintWithMetadata","toMintWithMetadata","mintAccount","metadataModel","toMint","currency","metadata","supply","amount","basisPoints","isTokenWithMetadata","assertTokenWithMetadata","toTokenWithMetadata","tokenAccount","mintModel","token","toTokenWithMint","delegateAmount"],"mappings":"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"}