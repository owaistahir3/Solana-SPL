{"version":3,"file":"createTokenWithMint.cjs","sources":["../../../../src/plugins/tokenModule/createTokenWithMint.ts"],"sourcesContent":["import { ConfirmOptions, Keypair, PublicKey } from '@solana/web3.js';\nimport type { Metaplex } from '@/Metaplex';\nimport {\n  isSigner,\n  Operation,\n  OperationHandler,\n  Signer,\n  SplTokenAmount,\n  toPublicKey,\n  useOperation,\n} from '@/types';\nimport { DisposableScope, Option, TransactionBuilder } from '@/utils';\nimport { SendAndConfirmTransactionResponse } from '../rpcModule';\nimport { MintAuthorityMustBeSignerToMintInitialSupplyError } from './errors';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'CreateTokenWithMintOperation' as const;\nexport const createTokenWithMintOperation =\n  useOperation<CreateTokenWithMintOperation>(Key);\nexport type CreateTokenWithMintOperation = Operation<\n  typeof Key,\n  CreateTokenWithMintInput,\n  CreateTokenWithMintOutput\n>;\n\nexport type CreateTokenWithMintInput = {\n  decimals?: number; // Defaults to 0 decimals.\n  initialSupply?: SplTokenAmount; // Defaults to 0 tokens.\n  mint?: Signer; // Defaults to new generated Keypair.\n  mintAuthority?: Signer | PublicKey; // Defaults to mx.identity().\n  freezeAuthority?: Option<PublicKey>; // Defaults to mx.identity().\n  owner?: PublicKey; // Defaults to mx.identity().\n  token?: Signer; // Defaults to creating an associated token address instead.\n  payer?: Signer; // Defaults to mx.identity().\n  tokenProgram?: PublicKey; // Defaults to System Program.\n  associatedTokenProgram?: PublicKey; // Defaults to Associated Token Program.\n  confirmOptions?: ConfirmOptions;\n};\n\nexport type CreateTokenWithMintOutput = {\n  response: SendAndConfirmTransactionResponse;\n  mintSigner: Signer;\n  tokenAddress: PublicKey;\n};\n\n// -----------------\n// Handler\n// -----------------\n\nexport const createTokenWithMintOperationHandler: OperationHandler<CreateTokenWithMintOperation> =\n  {\n    async handle(\n      operation: CreateTokenWithMintOperation,\n      metaplex: Metaplex,\n      scope: DisposableScope\n    ): Promise<CreateTokenWithMintOutput> {\n      const builder = await createTokenWithMintBuilder(\n        metaplex,\n        operation.input\n      );\n      scope.throwIfCanceled();\n      return builder.sendAndConfirm(metaplex, operation.input.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\nexport type CreateTokenWithMintBuilderParams = Omit<\n  CreateTokenWithMintInput,\n  'confirmOptions'\n> & {\n  createMintAccountInstructionKey?: string;\n  initializeMintInstructionKey?: string;\n  createAssociatedTokenAccountInstructionKey?: string;\n  createTokenAccountInstructionKey?: string;\n  initializeTokenInstructionKey?: string;\n  mintTokensInstructionKey?: string;\n};\n\nexport type CreateTokenWithMintBuilderContext = Omit<\n  CreateTokenWithMintOutput,\n  'response'\n>;\n\nexport const createTokenWithMintBuilder = async (\n  metaplex: Metaplex,\n  params: CreateTokenWithMintBuilderParams\n): Promise<TransactionBuilder<CreateTokenWithMintBuilderContext>> => {\n  const {\n    decimals = 0,\n    initialSupply,\n    mint = Keypair.generate(),\n    mintAuthority = metaplex.identity(),\n    freezeAuthority = metaplex.identity().publicKey,\n    owner = metaplex.identity().publicKey,\n    token,\n    payer = metaplex.identity(),\n    tokenProgram,\n    associatedTokenProgram,\n  } = params;\n\n  const createMintBuilder = await metaplex\n    .tokens()\n    .builders()\n    .createMint({\n      decimals,\n      mint,\n      payer,\n      mintAuthority: toPublicKey(mintAuthority),\n      freezeAuthority,\n      tokenProgram,\n      createAccountInstructionKey:\n        params.createMintAccountInstructionKey ?? 'createMintAccount',\n      initializeMintInstructionKey:\n        params.initializeMintInstructionKey ?? 'initializeMint',\n    });\n\n  const createTokenBuilder = await metaplex\n    .tokens()\n    .builders()\n    .createToken({\n      mint: mint.publicKey,\n      owner,\n      token,\n      payer,\n      tokenProgram,\n      associatedTokenProgram,\n      createAssociatedTokenAccountInstructionKey:\n        params.createAssociatedTokenAccountInstructionKey ??\n        'createAssociatedTokenAccount',\n      createAccountInstructionKey:\n        params.createTokenAccountInstructionKey ?? 'createTokenAccount',\n      initializeTokenInstructionKey:\n        params.initializeTokenInstructionKey ?? 'initializeToken',\n    });\n\n  const { tokenAddress } = createTokenBuilder.getContext();\n\n  return (\n    TransactionBuilder.make<CreateTokenWithMintBuilderContext>()\n      .setFeePayer(payer)\n      .setContext({ mintSigner: mint, tokenAddress })\n\n      // Create the Mint account.\n      .add(createMintBuilder)\n\n      // Create the Token account.\n      .add(createTokenBuilder)\n\n      // Potentially mint the initial supply to the token account.\n      .when(!!initialSupply, (builder) => {\n        if (!isSigner(mintAuthority)) {\n          throw new MintAuthorityMustBeSignerToMintInitialSupplyError();\n        }\n\n        return builder.add(\n          metaplex\n            .tokens()\n            .builders()\n            .mintTokens({\n              mint: mint.publicKey,\n              destination: tokenAddress,\n              amount: initialSupply as SplTokenAmount,\n              mintAuthority,\n              tokenProgram,\n              instructionKey: params.mintTokensInstructionKey ?? 'mintTokens',\n            })\n        );\n      })\n  );\n};\n"],"names":["Key","createTokenWithMintOperation","useOperation","createTokenWithMintOperationHandler","handle","operation","metaplex","scope","builder","createTokenWithMintBuilder","input","throwIfCanceled","sendAndConfirm","confirmOptions","params","decimals","initialSupply","mint","Keypair","generate","mintAuthority","identity","freezeAuthority","publicKey","owner","token","payer","tokenProgram","associatedTokenProgram","createMintBuilder","tokens","builders","createMint","toPublicKey","createAccountInstructionKey","createMintAccountInstructionKey","initializeMintInstructionKey","createTokenBuilder","createToken","createAssociatedTokenAccountInstructionKey","createTokenAccountInstructionKey","initializeTokenInstructionKey","tokenAddress","getContext","TransactionBuilder","make","setFeePayer","setContext","mintSigner","add","when","isSigner","MintAuthorityMustBeSignerToMintInitialSupplyError","mintTokens","destination","amount","instructionKey","mintTokensInstructionKey"],"mappings":"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"}