{"version":3,"file":"createBid.cjs","sources":["../../../../src/plugins/auctionHouseModule/createBid.ts"],"sourcesContent":["import {\n  ConfirmOptions,\n  PublicKey,\n  SYSVAR_INSTRUCTIONS_PUBKEY,\n} from '@solana/web3.js';\nimport type { Metaplex } from '@/Metaplex';\nimport { TransactionBuilder, Option, DisposableScope } from '@/utils';\nimport {\n  BuyInstructionAccounts,\n  createBuyInstruction,\n  createPrintBidReceiptInstruction,\n  createPublicBuyInstruction,\n} from '@metaplex-foundation/mpl-auction-house';\nimport {\n  useOperation,\n  Operation,\n  OperationHandler,\n  Signer,\n  toPublicKey,\n  token,\n  lamports,\n  isSigner,\n  amount,\n  SolAmount,\n  SplTokenAmount,\n  Pda,\n} from '@/types';\nimport { SendAndConfirmTransactionResponse } from '../rpcModule';\nimport { findAssociatedTokenAccountPda } from '../tokenModule';\nimport { findMetadataPda } from '../nftModule';\nimport { AuctionHouse } from './AuctionHouse';\nimport {\n  findAuctionHouseBuyerEscrowPda,\n  findAuctionHouseTradeStatePda,\n  findBidReceiptPda,\n} from './pdas';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'CreateBidOperation' as const;\nexport const createBidOperation = useOperation<CreateBidOperation>(Key);\nexport type CreateBidOperation = Operation<\n  typeof Key,\n  CreateBidInput,\n  CreateBidOutput\n>;\n\nexport type CreateBidInput = {\n  auctionHouse: AuctionHouse;\n  buyer?: PublicKey | Signer; // Default: identity\n  authority?: PublicKey | Signer; // Default: auctionHouse.authority\n  mintAccount: PublicKey; // Required for checking Metadata\n  seller?: Option<PublicKey>; // Default: null (i.e. public bid unless token account is provided)\n  tokenAccount?: Option<PublicKey>; // Default: null (i.e. public bid unless seller is provided).\n  price?: SolAmount | SplTokenAmount; // Default: 0 SOLs or tokens.\n  tokens?: SplTokenAmount; // Default: token(1)\n  bookkeeper?: Signer; // Default: identity\n  printReceipt?: boolean; // Default: true\n\n  // Options.\n  confirmOptions?: ConfirmOptions;\n};\n\nexport type CreateBidOutput = {\n  response: SendAndConfirmTransactionResponse;\n  buyerTradeState: Pda;\n  tokenAccount: Option<PublicKey>;\n  metadata: Pda;\n  buyer: PublicKey;\n  receipt: Pda;\n  bookkeeper: PublicKey;\n  price: SolAmount | SplTokenAmount;\n  tokens: SplTokenAmount;\n};\n\n// -----------------\n// Handler\n// -----------------\n\nexport const createBidOperationHandler: OperationHandler<CreateBidOperation> = {\n  handle: async (\n    operation: CreateBidOperation,\n    metaplex: Metaplex,\n    scope: DisposableScope\n  ) => {\n    const builder = await createBidBuilder(metaplex, operation.input);\n    scope.throwIfCanceled();\n    return builder.sendAndConfirm(metaplex, operation.input.confirmOptions);\n  },\n};\n\n// -----------------\n// Builder\n// -----------------\n\nexport type CreateBidBuilderParams = Omit<CreateBidInput, 'confirmOptions'> & {\n  instructionKey?: string;\n};\n\nexport type CreateBidBuilderContext = Omit<CreateBidOutput, 'response'>;\n\nexport const createBidBuilder = async (\n  metaplex: Metaplex,\n  params: CreateBidBuilderParams\n): Promise<TransactionBuilder<CreateBidBuilderContext>> => {\n  // Data.\n  const auctionHouse = params.auctionHouse;\n  const tokens = params.tokens ?? token(1);\n  const priceBasisPoint = params.price?.basisPoints ?? 0;\n  const price = auctionHouse.isNative\n    ? lamports(priceBasisPoint)\n    : amount(priceBasisPoint, auctionHouse.treasuryMint.currency);\n\n  // Accounts.\n  const buyer = params.buyer ?? (metaplex.identity() as Signer);\n  const authority = params.authority ?? auctionHouse.authorityAddress;\n  const metadata = findMetadataPda(params.mintAccount);\n  const escrowPayment = findAuctionHouseBuyerEscrowPda(\n    auctionHouse.address,\n    toPublicKey(buyer)\n  );\n  const tokenAccount =\n    params.tokenAccount ??\n    (params.seller\n      ? findAssociatedTokenAccountPda(params.mintAccount, params.seller)\n      : null);\n  const buyerTokenAccount = findAssociatedTokenAccountPda(\n    params.mintAccount,\n    toPublicKey(buyer)\n  );\n\n  const buyerTradeState = findAuctionHouseTradeStatePda(\n    auctionHouse.address,\n    toPublicKey(buyer),\n    auctionHouse.treasuryMint.address,\n    params.mintAccount,\n    price.basisPoints,\n    tokens.basisPoints,\n    tokenAccount\n  );\n\n  const accounts: Omit<BuyInstructionAccounts, 'tokenAccount'> = {\n    wallet: toPublicKey(buyer),\n    paymentAccount: toPublicKey(buyer),\n    transferAuthority: toPublicKey(buyer),\n    treasuryMint: auctionHouse.treasuryMint.address,\n    metadata,\n    escrowPaymentAccount: escrowPayment,\n    authority: toPublicKey(authority),\n    auctionHouse: auctionHouse.address,\n    auctionHouseFeeAccount: auctionHouse.feeAccountAddress,\n    buyerTradeState,\n  };\n\n  // Args.\n  const args = {\n    tradeStateBump: buyerTradeState.bump,\n    escrowPaymentBump: escrowPayment.bump,\n    buyerPrice: price.basisPoints,\n    tokenSize: tokens.basisPoints,\n  };\n\n  // Sell Instruction.\n  // ToDo: Add support for the auctioneerAuthority\n  let buyInstruction;\n  if (tokenAccount) {\n    buyInstruction = createBuyInstruction({ ...accounts, tokenAccount }, args);\n  } else {\n    buyInstruction = createPublicBuyInstruction(\n      { ...accounts, tokenAccount: buyerTokenAccount },\n      args\n    );\n  }\n\n  // Signers.\n  const buySigners = [buyer, authority].filter(\n    (input): input is Signer => !!input && isSigner(input)\n  );\n\n  // Receipt.\n  const bookkeeper: Signer = params.bookkeeper ?? metaplex.identity();\n  const receipt = findBidReceiptPda(buyerTradeState);\n\n  const builder = TransactionBuilder.make<CreateBidBuilderContext>().setContext(\n    {\n      buyerTradeState,\n      tokenAccount,\n      metadata,\n      buyer: toPublicKey(buyer),\n      receipt,\n      bookkeeper: bookkeeper.publicKey,\n      price,\n      tokens,\n    }\n  );\n\n  // Create a TA for public bid if it doesn't exist\n  if (!tokenAccount) {\n    const account = await metaplex.rpc().getAccount(buyerTokenAccount);\n    if (!account.exists) {\n      builder.add(\n        await metaplex\n          .tokens()\n          .builders()\n          .createToken({\n            mint: params.mintAccount,\n            owner: toPublicKey(buyer),\n          })\n      );\n    }\n  }\n\n  return (\n    builder\n      // Create bid.\n      .add({\n        instruction: buyInstruction,\n        signers: buySigners,\n        key: 'buy',\n      })\n\n      // Print the Bid Receipt.\n      .when(params.printReceipt ?? true, (builder) =>\n        builder.add({\n          instruction: createPrintBidReceiptInstruction(\n            {\n              receipt,\n              bookkeeper: bookkeeper.publicKey,\n              instruction: SYSVAR_INSTRUCTIONS_PUBKEY,\n            },\n            { receiptBump: receipt.bump }\n          ),\n          signers: [bookkeeper],\n          key: 'printBidReceipt',\n        })\n      )\n  );\n};\n"],"names":["Key","createBidOperation","useOperation","createBidOperationHandler","handle","operation","metaplex","scope","builder","createBidBuilder","input","throwIfCanceled","sendAndConfirm","confirmOptions","params","auctionHouse","tokens","token","priceBasisPoint","price","basisPoints","isNative","lamports","amount","treasuryMint","currency","buyer","identity","authority","authorityAddress","metadata","findMetadataPda","mintAccount","escrowPayment","findAuctionHouseBuyerEscrowPda","address","toPublicKey","tokenAccount","seller","findAssociatedTokenAccountPda","buyerTokenAccount","buyerTradeState","findAuctionHouseTradeStatePda","accounts","wallet","paymentAccount","transferAuthority","escrowPaymentAccount","auctionHouseFeeAccount","feeAccountAddress","args","tradeStateBump","bump","escrowPaymentBump","buyerPrice","tokenSize","buyInstruction","createBuyInstruction","createPublicBuyInstruction","buySigners","filter","isSigner","bookkeeper","receipt","findBidReceiptPda","TransactionBuilder","make","setContext","publicKey","account","rpc","getAccount","exists","add","builders","createToken","mint","owner","instruction","signers","key","when","printReceipt","createPrintBidReceiptInstruction","SYSVAR_INSTRUCTIONS_PUBKEY","receiptBump"],"mappings":"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"}