{"version":3,"file":"findTokenByAddress.cjs","sources":["../../../../src/plugins/tokenModule/findTokenByAddress.ts"],"sourcesContent":["import type { Commitment, PublicKey } from '@solana/web3.js';\nimport { Metaplex } from '@/Metaplex';\nimport { Operation, useOperation, OperationHandler } from '@/types';\nimport { toToken, Token } from './Token';\nimport { toTokenAccount } from './accounts';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindTokenByAddressOperation' as const;\nexport const findTokenByAddressOperation =\n  useOperation<FindTokenByAddressOperation>(Key);\nexport type FindTokenByAddressOperation = Operation<\n  typeof Key,\n  FindTokenByAddressInput,\n  Token\n>;\n\nexport type FindTokenByAddressInput = {\n  address: PublicKey;\n  commitment?: Commitment;\n};\n\n// -----------------\n// Handler\n// -----------------\n\nexport const findTokenByAddressOperationHandler: OperationHandler<FindTokenByAddressOperation> =\n  {\n    handle: async (\n      operation: FindTokenByAddressOperation,\n      metaplex: Metaplex\n    ): Promise<Token> => {\n      const { address, commitment } = operation.input;\n\n      const account = toTokenAccount(\n        await metaplex.rpc().getAccount(address, commitment)\n      );\n\n      return toToken(account);\n    },\n  };\n"],"names":["Key","findTokenByAddressOperation","useOperation","findTokenByAddressOperationHandler","handle","operation","metaplex","address","commitment","input","account","toTokenAccount","rpc","getAccount","toToken"],"mappings":";;;;;;;;AAOA;AACA;;AAEA,MAAMA,GAAG,GAAG,6BAAZ,CAAA;MACaC,2BAA2B,GACtCC,sBAAY,CAA8BF,GAA9B,EADP;AAaP;AACA;AACA;AAEO,MAAMG,kCAAiF,GAC5F;AACEC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,KAGa;IACnB,MAAM;MAAEC,OAAF;AAAWC,MAAAA,UAAAA;KAAeH,GAAAA,SAAS,CAACI,KAA1C,CAAA;AAEA,IAAA,MAAMC,OAAO,GAAGC,uBAAc,CAC5B,MAAML,QAAQ,CAACM,GAAT,EAAA,CAAeC,UAAf,CAA0BN,OAA1B,EAAmCC,UAAnC,CADsB,CAA9B,CAAA;IAIA,OAAOM,aAAO,CAACJ,OAAD,CAAd,CAAA;AACD,GAAA;AAZH;;;;;"}