'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var mplTokenMetadata = require('@metaplex-foundation/mpl-token-metadata');
var Nft = require('./Nft.cjs');
var pdas = require('./pdas.cjs');
var Operation = require('../../types/Operation.cjs');
var pdas$1 = require('../tokenModule/pdas.cjs');
var TransactionBuilder = require('../../utils/TransactionBuilder.cjs');

// Operation
// -----------------

const Key = 'UseNftOperation';
const useNftOperation = Operation.useOperation(Key);
// -----------------
// Handler
// -----------------
const useNftOperationHandler = {
  handle: async (operation, metaplex) => {
    return useNftBuilder(metaplex, operation.input).sendAndConfirm(metaplex, operation.input.confirmOptions);
  }
}; // -----------------
// Builder
// -----------------

const useNftBuilder = (metaplex, params) => {
  var _params$utilizeInstru;

  const {
    numberOfUses = 1,
    useAuthority = metaplex.identity(),
    owner = metaplex.identity().publicKey,
    isDelegated = false,
    burner
  } = params;
  const mintAddress = Nft.isNft(params.nft) || Nft.isLazyNft(params.nft) ? params.nft.mintAddress : params.nft;
  const metadata = pdas.findMetadataPda(mintAddress);
  const tokenAccount = pdas$1.findAssociatedTokenAccountPda(mintAddress, owner);
  const useAuthorityRecord = isDelegated ? pdas.findUseAuthorityRecordPda(mintAddress, useAuthority.publicKey) : undefined;
  return TransactionBuilder.TransactionBuilder.make().setContext({
    mintAddress
  }) // Update the metadata account.
  .add({
    instruction: mplTokenMetadata.createUtilizeInstruction({
      metadata,
      tokenAccount,
      useAuthority: useAuthority.publicKey,
      mint: mintAddress,
      owner,
      useAuthorityRecord,
      burner
    }, {
      utilizeArgs: {
        numberOfUses
      }
    }),
    signers: [useAuthority],
    key: (_params$utilizeInstru = params.utilizeInstructionKey) !== null && _params$utilizeInstru !== void 0 ? _params$utilizeInstru : 'utilize'
  });
};

exports.useNftBuilder = useNftBuilder;
exports.useNftOperation = useNftOperation;
exports.useNftOperationHandler = useNftOperationHandler;
//# sourceMappingURL=useNft.cjs.map
