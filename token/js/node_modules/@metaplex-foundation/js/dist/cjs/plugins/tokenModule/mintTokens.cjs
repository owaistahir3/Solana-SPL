'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var splToken = require('@solana/spl-token');
var Mint = require('./Mint.cjs');
var program = require('./program.cjs');
var Operation = require('../../types/Operation.cjs');
var Signer = require('../../types/Signer.cjs');
var TransactionBuilder = require('../../utils/TransactionBuilder.cjs');

// Operation
// -----------------

const Key = 'MintTokensOperation';
const mintTokensOperation = Operation.useOperation(Key);
// -----------------
// Handler
// -----------------
const mintTokensOperationHandler = {
  async handle(operation, metaplex) {
    return mintTokensBuilder(metaplex, operation.input).sendAndConfirm(metaplex, operation.input.confirmOptions);
  }

}; // -----------------
// Builder
// -----------------

const mintTokensBuilder = (metaplex, params) => {
  var _params$instructionKe;

  const {
    mint,
    destination,
    amount,
    mintAuthority = metaplex.identity(),
    multiSigners = [],
    tokenProgram = program.TokenProgram.publicKey
  } = params;
  const [mintAuthorityPublicKey, signers] = Signer.isSigner(mintAuthority) ? [mintAuthority.publicKey, [mintAuthority]] : [mintAuthority, multiSigners];
  return TransactionBuilder.TransactionBuilder.make().add({
    instruction: splToken.createMintToInstruction(Mint.isMint(mint) ? mint.address : mint, destination, mintAuthorityPublicKey, amount.basisPoints.toNumber(), multiSigners, tokenProgram),
    signers,
    key: (_params$instructionKe = params.instructionKey) !== null && _params$instructionKe !== void 0 ? _params$instructionKe : 'mintTokens'
  });
};

exports.mintTokensBuilder = mintTokensBuilder;
exports.mintTokensOperation = mintTokensOperation;
exports.mintTokensOperationHandler = mintTokensOperationHandler;
//# sourceMappingURL=mintTokens.cjs.map
