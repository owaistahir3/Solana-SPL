{"version":3,"file":"createAccount.cjs","sources":["../../../../src/plugins/systemModule/createAccount.ts"],"sourcesContent":["import {\n  ConfirmOptions,\n  Keypair,\n  PublicKey,\n  SystemProgram,\n} from '@solana/web3.js';\nimport type { Metaplex } from '@/Metaplex';\nimport {\n  assertSol,\n  Operation,\n  OperationHandler,\n  Signer,\n  SolAmount,\n  useOperation,\n} from '@/types';\nimport { DisposableScope, TransactionBuilder } from '@/utils';\nimport { SendAndConfirmTransactionResponse } from '../rpcModule';\n\nconst Key = 'CreateAccountOperation' as const;\nexport const createAccountOperation = useOperation<CreateAccountOperation>(Key);\nexport type CreateAccountOperation = Operation<\n  typeof Key,\n  CreateAccountInput,\n  CreateAccountOutput\n>;\n\nexport type CreateAccountInput = {\n  space: number;\n  lamports?: SolAmount; // Defaults to rent-exemption for given space.\n  payer?: Signer; // Defaults to mx.identity().\n  newAccount?: Signer; // Defaults to new generated Keypair.\n  program?: PublicKey; // Defaults to System Program.\n  confirmOptions?: ConfirmOptions;\n};\n\nexport type CreateAccountOutput = {\n  response: SendAndConfirmTransactionResponse;\n  newAccount: Signer;\n  lamports: SolAmount;\n};\n\nexport const createAccountOperationHandler: OperationHandler<CreateAccountOperation> =\n  {\n    async handle(\n      operation: CreateAccountOperation,\n      metaplex: Metaplex,\n      scope: DisposableScope\n    ): Promise<CreateAccountOutput> {\n      const builder = await createAccountBuilder(metaplex, operation.input);\n      scope.throwIfCanceled();\n      return builder.sendAndConfirm(metaplex, operation.input.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\nexport type CreateAccountBuilderParams = Omit<\n  CreateAccountInput,\n  'confirmOptions'\n> & {\n  instructionKey?: string;\n};\n\nexport type CreateAccountBuilderContext = Omit<CreateAccountOutput, 'response'>;\n\nexport const createAccountBuilder = async (\n  metaplex: Metaplex,\n  params: CreateAccountBuilderParams\n): Promise<TransactionBuilder<CreateAccountBuilderContext>> => {\n  const {\n    space,\n    payer = metaplex.identity(),\n    newAccount = Keypair.generate(),\n    program = SystemProgram.programId,\n  } = params;\n\n  const lamports = params.lamports ?? (await metaplex.rpc().getRent(space));\n  assertSol(lamports);\n\n  return TransactionBuilder.make<CreateAccountBuilderContext>()\n    .setFeePayer(payer)\n    .setContext({\n      newAccount,\n      lamports,\n    })\n    .add({\n      instruction: SystemProgram.createAccount({\n        fromPubkey: payer.publicKey,\n        newAccountPubkey: newAccount.publicKey,\n        space,\n        lamports: lamports.basisPoints.toNumber(),\n        programId: program,\n      }),\n      signers: [payer, newAccount],\n      key: params.instructionKey ?? 'createAccount',\n    });\n};\n"],"names":["Key","createAccountOperation","useOperation","createAccountOperationHandler","handle","operation","metaplex","scope","builder","createAccountBuilder","input","throwIfCanceled","sendAndConfirm","confirmOptions","params","space","payer","identity","newAccount","Keypair","generate","program","SystemProgram","programId","lamports","rpc","getRent","assertSol","TransactionBuilder","make","setFeePayer","setContext","add","instruction","createAccount","fromPubkey","publicKey","newAccountPubkey","basisPoints","toNumber","signers","key","instructionKey"],"mappings":";;;;;;;;;AAkBA,MAAMA,GAAG,GAAG,wBAAZ,CAAA;MACaC,sBAAsB,GAAGC,sBAAY,CAAyBF,GAAzB,EAA3C;AAsBA,MAAMG,6BAAuE,GAClF;AACE,EAAA,MAAMC,MAAN,CACEC,SADF,EAEEC,QAFF,EAGEC,KAHF,EAIgC;IAC9B,MAAMC,OAAO,GAAG,MAAMC,oBAAoB,CAACH,QAAD,EAAWD,SAAS,CAACK,KAArB,CAA1C,CAAA;AACAH,IAAAA,KAAK,CAACI,eAAN,EAAA,CAAA;IACA,OAAOH,OAAO,CAACI,cAAR,CAAuBN,QAAvB,EAAiCD,SAAS,CAACK,KAAV,CAAgBG,cAAjD,CAAP,CAAA;AACD,GAAA;;AATH;AAaF;AACA;;MAWaJ,oBAAoB,GAAG,OAClCH,QADkC,EAElCQ,MAFkC,KAG2B;AAAA,EAAA,IAAA,gBAAA,EAAA,qBAAA,CAAA;;EAC7D,MAAM;IACJC,KADI;AAEJC,IAAAA,KAAK,GAAGV,QAAQ,CAACW,QAAT,EAFJ;AAGJC,IAAAA,UAAU,GAAGC,eAAO,CAACC,QAAR,EAHT;IAIJC,OAAO,GAAGC,qBAAa,CAACC,SAAAA;AAJpB,GAAA,GAKFT,MALJ,CAAA;AAOA,EAAA,MAAMU,QAAQ,GAAA,CAAA,gBAAA,GAAGV,MAAM,CAACU,QAAV,MAAuB,IAAA,IAAA,gBAAA,KAAA,KAAA,CAAA,GAAA,gBAAA,GAAA,MAAMlB,QAAQ,CAACmB,GAAT,EAAA,CAAeC,OAAf,CAAuBX,KAAvB,CAA3C,CAAA;EACAY,gBAAS,CAACH,QAAD,CAAT,CAAA;EAEA,OAAOI,qCAAkB,CAACC,IAAnB,EAAA,CACJC,WADI,CACQd,KADR,CAEJe,CAAAA,UAFI,CAEO;IACVb,UADU;AAEVM,IAAAA,QAAAA;GAJG,CAAA,CAMJQ,GANI,CAMA;AACHC,IAAAA,WAAW,EAAEX,qBAAa,CAACY,aAAd,CAA4B;MACvCC,UAAU,EAAEnB,KAAK,CAACoB,SADqB;MAEvCC,gBAAgB,EAAEnB,UAAU,CAACkB,SAFU;MAGvCrB,KAHuC;AAIvCS,MAAAA,QAAQ,EAAEA,QAAQ,CAACc,WAAT,CAAqBC,QAArB,EAJ6B;AAKvChB,MAAAA,SAAS,EAAEF,OAAAA;AAL4B,KAA5B,CADV;AAQHmB,IAAAA,OAAO,EAAE,CAACxB,KAAD,EAAQE,UAAR,CARN;AASHuB,IAAAA,GAAG,EAAE3B,CAAAA,qBAAAA,GAAAA,MAAM,CAAC4B,cAAT,MAA2B,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,qBAAA,GAAA,eAAA;AAT3B,GANA,CAAP,CAAA;AAiBD;;;;;;"}