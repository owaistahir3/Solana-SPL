{"version":3,"file":"CandyMachine.cjs","sources":["../../../../src/plugins/candyMachineModule/CandyMachine.ts"],"sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport {\n  CandyMachineData,\n  EndSettingType,\n  WhitelistMintMode,\n} from '@metaplex-foundation/mpl-candy-machine';\nimport {\n  Amount,\n  BigNumber,\n  DateTime,\n  lamports,\n  toBigNumber,\n  toDateTime,\n  toOptionDateTime,\n  UnparsedAccount,\n} from '@/types';\nimport { assert, Option, removeEmptyChars } from '@/utils';\nimport {\n  countCandyMachineItems,\n  getCandyMachineUuidFromAddress,\n  parseCandyMachineItems,\n} from './helpers';\nimport {\n  CandyMachineAccount,\n  MaybeCandyMachineCollectionAccount,\n} from './accounts';\nimport { Creator } from '@/types/Creator';\n\n// -----------------\n// Model\n// -----------------\n\nexport type CandyMachine = Readonly<{\n  model: 'candyMachine';\n  address: PublicKey;\n  authorityAddress: PublicKey;\n  walletAddress: PublicKey; // SOL treasury OR token account for the tokenMintAddress.\n  tokenMintAddress: Option<PublicKey>;\n  collectionMintAddress: Option<PublicKey>;\n  uuid: string;\n  price: Amount;\n  symbol: string;\n  sellerFeeBasisPoints: number;\n  isMutable: boolean;\n  retainAuthority: boolean;\n  goLiveDate: Option<DateTime>;\n  maxEditionSupply: BigNumber;\n  items: CandyMachineItem[];\n  itemsAvailable: BigNumber;\n  itemsMinted: BigNumber;\n  itemsRemaining: BigNumber;\n  itemsLoaded: BigNumber;\n  isFullyLoaded: boolean;\n  endSettings: Option<EndSettings>;\n  hiddenSettings: Option<HiddenSettings>;\n  whitelistMintSettings: Option<WhitelistMintSettings>;\n  gatekeeper: Option<Gatekeeper>;\n  creators: Creator[];\n}>;\n\nexport type CandyMachineItem = Readonly<{\n  name: string;\n  uri: string;\n}>;\n\nexport type EndSettings =\n  | {\n      endSettingType: EndSettingType.Amount;\n      number: BigNumber;\n    }\n  | {\n      endSettingType: EndSettingType.Date;\n      date: DateTime;\n    };\n\nexport type HiddenSettings = {\n  name: string;\n  uri: string;\n  hash: number[];\n};\n\nexport type WhitelistMintSettings = {\n  mode: WhitelistMintMode;\n  mint: PublicKey;\n  presale: boolean;\n  discountPrice: Option<Amount>;\n};\n\nexport type Gatekeeper = {\n  network: PublicKey;\n  expireOnUse: boolean;\n};\n\n// -----------------\n// Program to Model\n// -----------------\n\nexport const isCandyMachine = (value: any): value is CandyMachine =>\n  typeof value === 'object' && value.model === 'candyMachine';\n\nexport function assertCandyMachine(value: any): asserts value is CandyMachine {\n  assert(isCandyMachine(value), 'Expected CandyMachine type');\n}\nexport const toCandyMachine = (\n  account: CandyMachineAccount,\n  unparsedAccount: UnparsedAccount,\n  collectionAccount: MaybeCandyMachineCollectionAccount | null\n): CandyMachine => {\n  const itemsAvailable = toBigNumber(account.data.data.itemsAvailable);\n  const itemsMinted = toBigNumber(account.data.itemsRedeemed);\n\n  const endSettings = account.data.data.endSettings;\n  const hiddenSettings = account.data.data.hiddenSettings;\n  const whitelistMintSettings = account.data.data.whitelistMintSettings;\n  const gatekeeper = account.data.data.gatekeeper;\n\n  const rawData = unparsedAccount.data;\n  const itemsLoaded = hiddenSettings\n    ? toBigNumber(0)\n    : countCandyMachineItems(rawData);\n  const items = hiddenSettings ? [] : parseCandyMachineItems(rawData);\n\n  return {\n    model: 'candyMachine',\n    address: account.publicKey,\n    authorityAddress: account.data.authority,\n    walletAddress: account.data.wallet,\n    tokenMintAddress: account.data.tokenMint,\n    collectionMintAddress:\n      collectionAccount && collectionAccount.exists\n        ? collectionAccount.data.mint\n        : null,\n    uuid: account.data.data.uuid,\n    price: lamports(account.data.data.price),\n    symbol: removeEmptyChars(account.data.data.symbol),\n    sellerFeeBasisPoints: account.data.data.sellerFeeBasisPoints,\n    isMutable: account.data.data.isMutable,\n    retainAuthority: account.data.data.retainAuthority,\n    goLiveDate: toOptionDateTime(account.data.data.goLiveDate),\n    maxEditionSupply: toBigNumber(account.data.data.maxSupply),\n    items,\n    itemsAvailable,\n    itemsMinted,\n    itemsRemaining: toBigNumber(itemsAvailable.sub(itemsMinted)),\n    itemsLoaded,\n    isFullyLoaded: itemsAvailable.lte(itemsLoaded),\n    endSettings: endSettings\n      ? endSettings.endSettingType === EndSettingType.Date\n        ? {\n            endSettingType: EndSettingType.Date,\n            date: toDateTime(endSettings.number),\n          }\n        : {\n            endSettingType: EndSettingType.Amount,\n            number: toBigNumber(endSettings.number),\n          }\n      : null,\n    hiddenSettings,\n    whitelistMintSettings: whitelistMintSettings\n      ? {\n          ...whitelistMintSettings,\n          discountPrice: whitelistMintSettings.discountPrice\n            ? lamports(whitelistMintSettings.discountPrice)\n            : null,\n        }\n      : null,\n    gatekeeper: gatekeeper\n      ? {\n          ...gatekeeper,\n          network: gatekeeper.gatekeeperNetwork,\n        }\n      : null,\n    creators: account.data.data.creators,\n  };\n};\n\n// -----------------\n// Model to Configs\n// -----------------\n\nexport type CandyMachineConfigs = {\n  wallet: PublicKey;\n  tokenMint: Option<PublicKey>;\n  price: Amount;\n  sellerFeeBasisPoints: number;\n  itemsAvailable: BigNumber;\n  symbol: string;\n  maxEditionSupply: BigNumber;\n  isMutable: boolean;\n  retainAuthority: boolean;\n  goLiveDate: Option<DateTime>;\n  endSettings: Option<EndSettings>;\n  hiddenSettings: Option<HiddenSettings>;\n  whitelistMintSettings: Option<WhitelistMintSettings>;\n  gatekeeper: Option<Gatekeeper>;\n  creators: Creator[];\n};\n\nexport const toCandyMachineConfigs = (\n  candyMachine: CandyMachine\n): CandyMachineConfigs => {\n  return {\n    wallet: candyMachine.walletAddress,\n    tokenMint: candyMachine.tokenMintAddress,\n    ...candyMachine,\n  };\n};\n\n// -----------------\n// Configs to Program\n// -----------------\n\nexport type CandyMachineInstructionData = {\n  wallet: PublicKey;\n  tokenMint: Option<PublicKey>;\n  data: CandyMachineData;\n};\n\nexport const toCandyMachineInstructionData = (\n  address: PublicKey,\n  configs: CandyMachineConfigs\n): CandyMachineInstructionData => {\n  const endSettings = configs.endSettings;\n  const whitelistMintSettings = configs.whitelistMintSettings;\n  const gatekeeper = configs.gatekeeper;\n\n  return {\n    wallet: configs.wallet,\n    tokenMint: configs.tokenMint,\n    data: {\n      ...configs,\n      uuid: getCandyMachineUuidFromAddress(address),\n      price: configs.price.basisPoints,\n      maxSupply: configs.maxEditionSupply,\n      endSettings: endSettings\n        ? {\n            ...endSettings,\n            number:\n              endSettings.endSettingType === EndSettingType.Date\n                ? endSettings.date\n                : endSettings.number,\n          }\n        : null,\n      whitelistMintSettings: whitelistMintSettings\n        ? {\n            ...whitelistMintSettings,\n            discountPrice:\n              whitelistMintSettings.discountPrice?.basisPoints ?? null,\n          }\n        : null,\n      gatekeeper: gatekeeper\n        ? {\n            ...gatekeeper,\n            gatekeeperNetwork: gatekeeper.network,\n          }\n        : null,\n    },\n  };\n};\n"],"names":["isCandyMachine","value","model","assertCandyMachine","assert","toCandyMachine","account","unparsedAccount","collectionAccount","itemsAvailable","toBigNumber","data","itemsMinted","itemsRedeemed","endSettings","hiddenSettings","whitelistMintSettings","gatekeeper","rawData","itemsLoaded","countCandyMachineItems","items","parseCandyMachineItems","address","publicKey","authorityAddress","authority","walletAddress","wallet","tokenMintAddress","tokenMint","collectionMintAddress","exists","mint","uuid","price","lamports","symbol","removeEmptyChars","sellerFeeBasisPoints","isMutable","retainAuthority","goLiveDate","toOptionDateTime","maxEditionSupply","maxSupply","itemsRemaining","sub","isFullyLoaded","lte","endSettingType","EndSettingType","Date","date","toDateTime","number","Amount","discountPrice","network","gatekeeperNetwork","creators","toCandyMachineConfigs","candyMachine","toCandyMachineInstructionData","configs","getCandyMachineUuidFromAddress","basisPoints"],"mappings":"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"}