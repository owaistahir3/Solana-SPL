{"version":3,"file":"sendTokens.cjs","sources":["../../../../src/plugins/tokenModule/sendTokens.ts"],"sourcesContent":["import { ConfirmOptions, PublicKey } from '@solana/web3.js';\nimport type { Metaplex } from '@/Metaplex';\nimport {\n  Amount,\n  isSigner,\n  KeypairSigner,\n  Operation,\n  OperationHandler,\n  Signer,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder } from '@/utils';\nimport { SendAndConfirmTransactionResponse } from '../rpcModule';\nimport { createTransferCheckedInstruction } from '@solana/spl-token';\nimport { isMint, Mint } from './Mint';\nimport { findAssociatedTokenAccountPda } from './pdas';\nimport { TokenProgram } from './program';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'SendTokensOperation' as const;\nexport const sendTokensOperation = useOperation<SendTokensOperation>(Key);\nexport type SendTokensOperation = Operation<\n  typeof Key,\n  SendTokensInput,\n  SendTokensOutput\n>;\n\nexport type SendTokensInput = {\n  mint: PublicKey | Mint;\n  to: PublicKey;\n  amount: Amount;\n  fromOwner?: PublicKey | Signer; // Defaults to mx.identity().\n  fromToken?: PublicKey; // Defaults to associated account.\n  fromMultiSigners?: KeypairSigner[]; // Defaults to [].\n  tokenProgram?: PublicKey; // Defaults to Token Program.\n  confirmOptions?: ConfirmOptions;\n};\n\nexport type SendTokensOutput = {\n  response: SendAndConfirmTransactionResponse;\n};\n\n// -----------------\n// Handler\n// -----------------\n\nexport const sendTokensOperationHandler: OperationHandler<SendTokensOperation> =\n  {\n    async handle(\n      operation: SendTokensOperation,\n      metaplex: Metaplex\n    ): Promise<SendTokensOutput> {\n      return sendTokensBuilder(metaplex, operation.input).sendAndConfirm(\n        metaplex,\n        operation.input.confirmOptions\n      );\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\nexport type SendTokensBuilderParams = Omit<\n  SendTokensInput,\n  'confirmOptions'\n> & {\n  instructionKey?: string;\n};\n\nexport const sendTokensBuilder = (\n  metaplex: Metaplex,\n  params: SendTokensBuilderParams\n): TransactionBuilder => {\n  const {\n    mint,\n    to,\n    amount,\n    fromOwner = metaplex.identity(),\n    fromToken,\n    fromMultiSigners = [],\n    tokenProgram = TokenProgram.publicKey,\n  } = params;\n\n  const [fromOwnerPublicKey, signers] = isSigner(fromOwner)\n    ? [fromOwner.publicKey, [fromOwner]]\n    : [fromOwner, fromMultiSigners];\n\n  const mintAddress = isMint(mint) ? mint.address : mint;\n  const decimals = isMint(mint) ? mint.decimals : amount.currency.decimals;\n  const fromTokenOrAssociated =\n    fromToken ?? findAssociatedTokenAccountPda(mintAddress, fromOwnerPublicKey);\n\n  return TransactionBuilder.make().add({\n    instruction: createTransferCheckedInstruction(\n      fromTokenOrAssociated,\n      mintAddress,\n      to,\n      fromOwnerPublicKey,\n      amount.basisPoints.toNumber(),\n      decimals,\n      fromMultiSigners,\n      tokenProgram\n    ),\n    signers,\n    key: params.instructionKey ?? 'transferTokens',\n  });\n};\n"],"names":["Key","sendTokensOperation","useOperation","sendTokensOperationHandler","handle","operation","metaplex","sendTokensBuilder","input","sendAndConfirm","confirmOptions","params","mint","to","amount","fromOwner","identity","fromToken","fromMultiSigners","tokenProgram","TokenProgram","publicKey","fromOwnerPublicKey","signers","isSigner","mintAddress","isMint","address","decimals","currency","fromTokenOrAssociated","findAssociatedTokenAccountPda","TransactionBuilder","make","add","instruction","createTransferCheckedInstruction","basisPoints","toNumber","key","instructionKey"],"mappings":";;;;;;;;;;;;AAmBA;AACA;;AAEA,MAAMA,GAAG,GAAG,qBAAZ,CAAA;MACaC,mBAAmB,GAAGC,sBAAY,CAAsBF,GAAtB,EAAxC;AAsBP;AACA;AACA;AAEO,MAAMG,0BAAiE,GAC5E;AACE,EAAA,MAAMC,MAAN,CACEC,SADF,EAEEC,QAFF,EAG6B;AAC3B,IAAA,OAAOC,iBAAiB,CAACD,QAAD,EAAWD,SAAS,CAACG,KAArB,CAAjB,CAA6CC,cAA7C,CACLH,QADK,EAELD,SAAS,CAACG,KAAV,CAAgBE,cAFX,CAAP,CAAA;AAID,GAAA;;AATH;AAaF;AACA;;MASaH,iBAAiB,GAAG,CAC/BD,QAD+B,EAE/BK,MAF+B,KAGR;AAAA,EAAA,IAAA,qBAAA,CAAA;;EACvB,MAAM;IACJC,IADI;IAEJC,EAFI;IAGJC,MAHI;AAIJC,IAAAA,SAAS,GAAGT,QAAQ,CAACU,QAAT,EAJR;IAKJC,SALI;AAMJC,IAAAA,gBAAgB,GAAG,EANf;IAOJC,YAAY,GAAGC,oBAAY,CAACC,SAAAA;AAPxB,GAAA,GAQFV,MARJ,CAAA;EAUA,MAAM,CAACW,kBAAD,EAAqBC,OAArB,CAAA,GAAgCC,eAAQ,CAACT,SAAD,CAAR,GAClC,CAACA,SAAS,CAACM,SAAX,EAAsB,CAACN,SAAD,CAAtB,CADkC,GAElC,CAACA,SAAD,EAAYG,gBAAZ,CAFJ,CAAA;EAIA,MAAMO,WAAW,GAAGC,WAAM,CAACd,IAAD,CAAN,GAAeA,IAAI,CAACe,OAApB,GAA8Bf,IAAlD,CAAA;AACA,EAAA,MAAMgB,QAAQ,GAAGF,WAAM,CAACd,IAAD,CAAN,GAAeA,IAAI,CAACgB,QAApB,GAA+Bd,MAAM,CAACe,QAAP,CAAgBD,QAAhE,CAAA;AACA,EAAA,MAAME,qBAAqB,GACzBb,SADyB,KAAA,IAAA,IACzBA,SADyB,KAAA,KAAA,CAAA,GACzBA,SADyB,GACZc,kCAA6B,CAACN,WAAD,EAAcH,kBAAd,CAD5C,CAAA;AAGA,EAAA,OAAOU,qCAAkB,CAACC,IAAnB,EAAA,CAA0BC,GAA1B,CAA8B;IACnCC,WAAW,EAAEC,yCAAgC,CAC3CN,qBAD2C,EAE3CL,WAF2C,EAG3CZ,EAH2C,EAI3CS,kBAJ2C,EAK3CR,MAAM,CAACuB,WAAP,CAAmBC,QAAnB,EAL2C,EAM3CV,QAN2C,EAO3CV,gBAP2C,EAQ3CC,YAR2C,CADV;IAWnCI,OAXmC;AAYnCgB,IAAAA,GAAG,EAAE5B,CAAAA,qBAAAA,GAAAA,MAAM,CAAC6B,cAAT,MAA2B,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,qBAAA,GAAA,gBAAA;AAZK,GAA9B,CAAP,CAAA;AAcD;;;;;;"}