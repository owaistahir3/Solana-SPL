'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Nft = require('./Nft.cjs');
var accounts$1 = require('./accounts.cjs');
var pdas = require('./pdas.cjs');
var NftEdition = require('./NftEdition.cjs');
var Operation = require('../../types/Operation.cjs');
var accounts = require('../tokenModule/accounts.cjs');
var Mint = require('../tokenModule/Mint.cjs');

// Operation
// -----------------

const Key = 'LoadNftOperation';
const loadNftOperation = Operation.useOperation(Key);
// -----------------
// Handler
// -----------------
const loadNftOperationHandler = {
  handle: async (operation, metaplex, scope) => {
    const {
      nft,
      commitment
    } = operation.input;
    const mint = nft.mintAddress;
    const accounts$2 = await metaplex.rpc().getMultipleAccounts([mint, pdas.findMasterEditionV2Pda(mint)], commitment);
    scope.throwIfCanceled();
    const mintAccount = accounts.toMintAccount(accounts$2[0]);
    const editionAccount = accounts$1.toOriginalOrPrintEditionAccount(accounts$2[1]);
    const lazyMetadata = { ...nft,
      model: 'metadata',
      address: nft.metadataAddress
    };
    const metadata = await metaplex.nfts().loadMetadata(lazyMetadata).run(scope);
    scope.throwIfCanceled();
    return Nft.toNft(metadata, Mint.toMint(mintAccount), NftEdition.toNftEdition(editionAccount));
  }
};

exports.loadNftOperation = loadNftOperation;
exports.loadNftOperationHandler = loadNftOperationHandler;
//# sourceMappingURL=loadNft.cjs.map
