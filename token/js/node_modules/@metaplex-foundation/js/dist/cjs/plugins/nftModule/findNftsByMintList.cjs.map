{"version":3,"file":"findNftsByMintList.cjs","sources":["../../../../src/plugins/nftModule/findNftsByMintList.ts"],"sourcesContent":["import { Commitment, PublicKey } from '@solana/web3.js';\nimport { Metaplex } from '@/Metaplex';\nimport { parseMetadataAccount } from './accounts';\nimport { findMetadataPda } from './pdas';\nimport { Operation, OperationHandler, useOperation } from '@/types';\nimport { DisposableScope, GmaBuilder, zipMap } from '@/utils';\nimport { LazyNft, Nft, toLazyNft } from './Nft';\nimport { toLazyMetadata } from './Metadata';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindNftsByMintListOperation' as const;\nexport const findNftsByMintListOperation =\n  useOperation<FindNftsByMintListOperation>(Key);\nexport type FindNftsByMintListOperation = Operation<\n  typeof Key,\n  FindNftsByMintListInput,\n  (LazyNft | Nft | null)[]\n>;\n\nexport type FindNftsByMintListInput = {\n  mints: PublicKey[];\n  commitment?: Commitment;\n};\n\n// -----------------\n// Handler\n// -----------------\n\nexport const findNftsByMintListOperationHandler: OperationHandler<FindNftsByMintListOperation> =\n  {\n    handle: async (\n      operation: FindNftsByMintListOperation,\n      metaplex: Metaplex,\n      scope: DisposableScope\n    ) => {\n      const { mints, commitment } = operation.input;\n      const metadataPdas = mints.map((mint) => findMetadataPda(mint));\n      const metadataInfos = await GmaBuilder.make(metaplex, metadataPdas, {\n        commitment,\n      }).get();\n      scope.throwIfCanceled();\n\n      return zipMap(\n        metadataPdas,\n        metadataInfos,\n        (metadataPda, metadataInfo) => {\n          if (!metadataInfo || !metadataInfo.exists) return null;\n\n          try {\n            const metadata = parseMetadataAccount(metadataInfo);\n            return toLazyNft(toLazyMetadata(metadata));\n          } catch (error) {\n            return null;\n          }\n        }\n      );\n    },\n  };\n"],"names":["Key","findNftsByMintListOperation","useOperation","findNftsByMintListOperationHandler","handle","operation","metaplex","scope","mints","commitment","input","metadataPdas","map","mint","findMetadataPda","metadataInfos","GmaBuilder","make","get","throwIfCanceled","zipMap","metadataPda","metadataInfo","exists","metadata","parseMetadataAccount","toLazyNft","toLazyMetadata","error"],"mappings":";;;;;;;;;;;;AAUA;AACA;;AAEA,MAAMA,GAAG,GAAG,6BAAZ,CAAA;MACaC,2BAA2B,GACtCC,sBAAY,CAA8BF,GAA9B,EADP;AAaP;AACA;AACA;AAEO,MAAMG,kCAAiF,GAC5F;AACEC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAIH;IACH,MAAM;MAAEC,KAAF;AAASC,MAAAA,UAAAA;KAAeJ,GAAAA,SAAS,CAACK,KAAxC,CAAA;AACA,IAAA,MAAMC,YAAY,GAAGH,KAAK,CAACI,GAAN,CAAWC,IAAD,IAAUC,oBAAe,CAACD,IAAD,CAAnC,CAArB,CAAA;IACA,MAAME,aAAa,GAAG,MAAMC,qBAAU,CAACC,IAAX,CAAgBX,QAAhB,EAA0BK,YAA1B,EAAwC;AAClEF,MAAAA,UAAAA;KAD0B,CAAA,CAEzBS,GAFyB,EAA5B,CAAA;AAGAX,IAAAA,KAAK,CAACY,eAAN,EAAA,CAAA;IAEA,OAAOC,aAAM,CACXT,YADW,EAEXI,aAFW,EAGX,CAACM,WAAD,EAAcC,YAAd,KAA+B;MAC7B,IAAI,CAACA,YAAD,IAAiB,CAACA,YAAY,CAACC,MAAnC,EAA2C,OAAO,IAAP,CAAA;;MAE3C,IAAI;AACF,QAAA,MAAMC,QAAQ,GAAGC,6BAAoB,CAACH,YAAD,CAArC,CAAA;AACA,QAAA,OAAOI,aAAS,CAACC,uBAAc,CAACH,QAAD,CAAf,CAAhB,CAAA;OAFF,CAGE,OAAOI,KAAP,EAAc;AACd,QAAA,OAAO,IAAP,CAAA;AACD,OAAA;AACF,KAZU,CAAb,CAAA;AAcD,GAAA;AA3BH;;;;;"}