'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Metadata = require('./Metadata.cjs');
var pdas = require('./pdas.cjs');
var accounts$1 = require('./accounts.cjs');
var accounts = require('../tokenModule/accounts.cjs');
var Operation = require('../../types/Operation.cjs');
var Mint = require('../tokenModule/Mint.cjs');

// -----------------
// Operation
// -----------------
const Key = 'FindMintWithMetadataByAddressOperation';
const findMintWithMetadataByAddressOperation = Operation.useOperation(Key);
// -----------------
// Handler
// -----------------
const findMintWithMetadataByAddressOperationHandler = {
  handle: async (operation, metaplex, scope) => {
    const {
      address: mintAddress,
      commitment,
      loadJsonMetadata = true
    } = operation.input;
    const metadataAddress = pdas.findMetadataPda(mintAddress);
    const accounts$2 = await metaplex.rpc().getMultipleAccounts([mintAddress, metadataAddress], commitment);
    scope.throwIfCanceled();
    const mintAccount = accounts.toMintAccount(accounts$2[0]);

    if (!accounts$2[1].exists) {
      return Mint.toMint(mintAccount);
    }

    const metadataAccount = accounts$1.parseMetadataAccount(accounts$2[1]);
    let metadataModel = Metadata.toLazyMetadata(metadataAccount);

    if (loadJsonMetadata) {
      metadataModel = await metaplex.nfts().loadMetadata(metadataModel).run(scope);
    }

    return Metadata.toMintWithMetadata(mintAccount, metadataModel);
  }
};

exports.findMintWithMetadataByAddressOperation = findMintWithMetadataByAddressOperation;
exports.findMintWithMetadataByAddressOperationHandler = findMintWithMetadataByAddressOperationHandler;
//# sourceMappingURL=findMintWithMetadataByAddress.cjs.map
