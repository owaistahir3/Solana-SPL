'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var splToken = require('@solana/spl-token');
var Mint = require('./Mint.cjs');
var pdas = require('./pdas.cjs');
var program = require('./program.cjs');
var Operation = require('../../types/Operation.cjs');
var Signer = require('../../types/Signer.cjs');
var TransactionBuilder = require('../../utils/TransactionBuilder.cjs');

// Operation
// -----------------

const Key = 'SendTokensOperation';
const sendTokensOperation = Operation.useOperation(Key);
// -----------------
// Handler
// -----------------
const sendTokensOperationHandler = {
  async handle(operation, metaplex) {
    return sendTokensBuilder(metaplex, operation.input).sendAndConfirm(metaplex, operation.input.confirmOptions);
  }

}; // -----------------
// Builder
// -----------------

const sendTokensBuilder = (metaplex, params) => {
  var _params$instructionKe;

  const {
    mint,
    to,
    amount,
    fromOwner = metaplex.identity(),
    fromToken,
    fromMultiSigners = [],
    tokenProgram = program.TokenProgram.publicKey
  } = params;
  const [fromOwnerPublicKey, signers] = Signer.isSigner(fromOwner) ? [fromOwner.publicKey, [fromOwner]] : [fromOwner, fromMultiSigners];
  const mintAddress = Mint.isMint(mint) ? mint.address : mint;
  const decimals = Mint.isMint(mint) ? mint.decimals : amount.currency.decimals;
  const fromTokenOrAssociated = fromToken !== null && fromToken !== void 0 ? fromToken : pdas.findAssociatedTokenAccountPda(mintAddress, fromOwnerPublicKey);
  return TransactionBuilder.TransactionBuilder.make().add({
    instruction: splToken.createTransferCheckedInstruction(fromTokenOrAssociated, mintAddress, to, fromOwnerPublicKey, amount.basisPoints.toNumber(), decimals, fromMultiSigners, tokenProgram),
    signers,
    key: (_params$instructionKe = params.instructionKey) !== null && _params$instructionKe !== void 0 ? _params$instructionKe : 'transferTokens'
  });
};

exports.sendTokensBuilder = sendTokensBuilder;
exports.sendTokensOperation = sendTokensOperation;
exports.sendTokensOperationHandler = sendTokensOperationHandler;
//# sourceMappingURL=sendTokens.cjs.map
