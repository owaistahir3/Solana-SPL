{"version":3,"file":"CandyMachineJsonConfigs.cjs","sources":["../../../../src/plugins/candyMachineModule/CandyMachineJsonConfigs.ts"],"sourcesContent":["import {\n  EndSettingType,\n  WhitelistMintMode,\n} from '@metaplex-foundation/mpl-candy-machine';\nimport {\n  Creator,\n  DateTimeString,\n  PublicKeyString,\n  sol,\n  toBigNumber,\n  toDateTime,\n  toOptionDateTime,\n  toPublicKey,\n} from '@/types';\nimport { CandyMachineConfigs } from './CandyMachine';\n\n/**\n * Configuration for the Candy Machine.\n * For more info {@see https://docs.metaplex.com/candy-machine-v2/configuration}\n *\n * @property price - The amount in SOL or SPL token for a mint.\n * @property number - The number of items in the Candy Machine\n * @property sellerFeeBasisPoints - Royalty basis points that goes to creators\n * in secondary sales (0-10000)\n * @property solTreasuryAccount - Wallet to receive proceedings SOL payments\n * @property goLiveDate - Timestamp when minting is allowed – the Candy Machine\n * authority and whitelists can bypass this constraint\n * @property noRetainAuthority - Indicates whether the candy machine authority\n * has the update authority for each mint or if it is transferred to the\n * minter. This should be set to `false` for the vast majority of cases.\n * @property noMutable - Indicates whether the NFTs' metadata are mutable or not\n * after having been minted.\n * @property maxEditionSupply - If greater than zero, the minted NFTs will be printable\n *  Master Editions. The number provided determines the maximum number of editions\n * that can be printed from the minted NFT. Defaults to zero.\n * @property symbol - Optional Symbol for the NFts of the Candy Machine which\n * can be up to 10 bytes.\n * @property splTokenAccount - SPL token wallet to receive proceedings from SPL token payments\n * @property splToken - Mint address of the token accepted as payment\n * @property gatekeeper - {@link GatekeeperSettingsConfig}\n * @property endSettings - {@link EndSettingsConfig}\n * @property whitelistMintSettings - {@link WhitelistMintSettingsConfig}\n * @property hiddenSettings - {@link HiddenSettingsConfig}\n *\n * ## Minimum Config Example\n *\n * ```json\n * {\n *    \"price\": 1.0,\n *    \"number\": 10,\n *    \"gatekeeper\": null,\n *    \"solTreasuryAccount\": \"<YOUR WALLET ADDRESS>\",\n *    \"splTokenAccount\": null,\n *    \"splToken\": null,\n *    \"goLiveDate\": \"25 Dec 2021 00:00:00 GMT\",\n *    \"endSettings\": null,\n *    \"whitelistMintSettings\": null,\n *    \"hiddenSettings\": null,\n *    \"noRetainAuthority\": false,\n *    \"noMutable\": false,\n * }\n * ```\n */\nexport type CandyMachineJsonConfigs = {\n  price: number;\n  number: number;\n  sellerFeeBasisPoints: number;\n  solTreasuryAccount: PublicKeyString;\n  goLiveDate: DateTimeString;\n  noRetainAuthority: boolean;\n  noMutable: boolean;\n  maxEditionSupply?: number;\n  creators?: CreatorConfig[];\n  symbol?: string;\n  splTokenAccount?: PublicKeyString;\n  splToken?: PublicKeyString;\n  gatekeeper?: GatekeeperSettingsConfig;\n  endSettings?: EndSettingsConfig;\n  whitelistMintSettings?: WhitelistMintSettingsConfig;\n  hiddenSettings?: HiddenSettingsConfig;\n};\n\n/**\n * While the unpredictable mint index provides some protection against bots,\n * they are still able to mint directly from the Candy Machine. If you want to\n * make sure that only humans can mint from your project, gatekeeper settings\n * can be enabled.\n *\n * @property gatekeeperNetwork - Gateway provider address\n * @property expireOnUse - Requires a new gateway challenge after a use\n */\ntype GatekeeperSettingsConfig = {\n  gatekeeperNetwork: PublicKeyString;\n  expireOnUse: boolean;\n};\n\n/**\n * Hidden settings serve two purposes. First, it allows the creation of larger\n * drops (20k+), since the metadata is not stored on-chain. In turn, this also\n * allows the creation of hide-and-reveal drops, where users discover which\n * item(s) they minted after the mint is complete.\n *\n * Once hidden settings are enabled, every mint will have the same URI and the\n * name will be created by appending the mint number (e.g., “#45”) to the name\n * specified. The hash is expected to be a 32 character string corresponding to\n * the hash of a cache file that has the mapping between a mint number and the\n * actual metadata URI. This allows the order of the mint to be verified by\n * others after the mint is complete.\n *\n * Since the metadata is not on-chain, it is possible to create very large\n * drops. The only caveat is that there is a need for an off-chain process to\n * update the metadata for each item. This is important otherwise all items\n * will have the same metadata.\n *\n * @property name - Name of the mint. The number of the mint will be appended to the name.\n * @property uri - Single URI for all mints.\n * @property hash - 32 character hash. In most cases this is the hash of the cache file with\n * the mapping between mint number and metadata so that the order can be verified when the mint\n * is complete\n */\ntype HiddenSettingsConfig = {\n  name: string;\n  uri: string;\n  hash: string;\n};\n\n/**\n * End Settings provides a mechanism to stop the mint if a certain condition is\n * met without interaction.\n *\n * @property endSettingType - {@link EndSettingMode} (date or amount) which identifies\n * what {@link EndSettingsConfig.value} means\n * @property value - to test the end condition. This will be either a date\n * string (end DateTime) or an integer amount (items minted)\n * */\n\ntype EndSettingsConfig =\n  | {\n      endSettingType: 'date';\n      value: string;\n    }\n  | {\n      endSettingType: 'amount';\n      value: number;\n    };\n\n/**\n * Whitelist Modes\n *\n * burnEveryTime - Whitelist token is burned after the mint\n * neverBurn - Whitelist token is returned to holder\n */\ntype WhitelistMode = 'burnEveryTime' | 'neverBurn';\n\n/**\n * Whitelist Mint Settings\n\n * Whitelist settings provide a variety of different use cases and revolve\n * around the idea of using custom SPL tokens to offer special rights to token\n * holders - how said SPL token is distributed is up to you. \n *\n * @property mode - {@link WhitelistMode} (burnEveryTime or neverBurn)\n * @property mint - Mint address of the whitelist token\n * @property presale - Indicates whether whitelist token holders can mint before goLiveDate\n * @property discountPrice - Price for whitelist token holders\n */\ntype WhitelistMintSettingsConfig = {\n  mode: WhitelistMode;\n  mint: PublicKeyString;\n  presale: boolean;\n  discountPrice: number;\n};\n\ntype CreatorConfig = Omit<Creator, 'address'> & {\n  address: PublicKeyString;\n};\n\nexport const toCandyMachineConfigsFromJson = (\n  config: CandyMachineJsonConfigs\n): CandyMachineConfigs => {\n  const configCreators = config.creators ?? [\n    {\n      address: config.solTreasuryAccount,\n      verified: false,\n      share: 100,\n    },\n  ];\n\n  return {\n    wallet:\n      config.splToken && config.splTokenAccount\n        ? toPublicKey(config.splTokenAccount)\n        : toPublicKey(config.solTreasuryAccount),\n    tokenMint:\n      config.splToken && config.splTokenAccount\n        ? toPublicKey(config.splToken)\n        : null,\n    price: sol(config.price),\n    symbol: config.symbol ?? '',\n    sellerFeeBasisPoints: config.sellerFeeBasisPoints,\n    maxEditionSupply: toBigNumber(config.maxEditionSupply ?? 0),\n    isMutable: !config.noMutable,\n    retainAuthority: !config.noRetainAuthority,\n    goLiveDate: toOptionDateTime(config.goLiveDate),\n    itemsAvailable: toBigNumber(config.number),\n    endSettings: config.endSettings\n      ? config.endSettings.endSettingType === 'date'\n        ? {\n            endSettingType: EndSettingType.Date,\n            date: toDateTime(config.endSettings.value),\n          }\n        : {\n            endSettingType: EndSettingType.Amount,\n            number: toBigNumber(config.endSettings.value),\n          }\n      : null,\n    hiddenSettings: config.hiddenSettings\n      ? {\n          ...config.hiddenSettings,\n          hash: Buffer.from(config.hiddenSettings.hash, 'utf8').toJSON().data,\n        }\n      : null,\n    whitelistMintSettings: config.whitelistMintSettings\n      ? {\n          ...config.whitelistMintSettings,\n          mode:\n            config.whitelistMintSettings.mode === 'burnEveryTime'\n              ? WhitelistMintMode.BurnEveryTime\n              : WhitelistMintMode.NeverBurn,\n          mint: toPublicKey(config.whitelistMintSettings.mint),\n          discountPrice: sol(config.whitelistMintSettings.discountPrice),\n        }\n      : null,\n    gatekeeper: config.gatekeeper\n      ? {\n          ...config.gatekeeper,\n          network: toPublicKey(config.gatekeeper.gatekeeperNetwork),\n        }\n      : null,\n    creators: configCreators.map((creatorConfig) => ({\n      ...creatorConfig,\n      address: toPublicKey(creatorConfig.address),\n    })),\n  };\n};\n"],"names":["toCandyMachineConfigsFromJson","config","configCreators","creators","address","solTreasuryAccount","verified","share","wallet","splToken","splTokenAccount","toPublicKey","tokenMint","price","sol","symbol","sellerFeeBasisPoints","maxEditionSupply","toBigNumber","isMutable","noMutable","retainAuthority","noRetainAuthority","goLiveDate","toOptionDateTime","itemsAvailable","number","endSettings","endSettingType","EndSettingType","Date","date","toDateTime","value","Amount","hiddenSettings","hash","Buffer","from","toJSON","data","whitelistMintSettings","mode","WhitelistMintMode","BurnEveryTime","NeverBurn","mint","discountPrice","gatekeeper","network","gatekeeperNetwork","map","creatorConfig"],"mappings":"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"}