{"version":3,"file":"createNft.cjs","sources":["../../../../src/plugins/nftModule/createNft.ts"],"sourcesContent":["import { ConfirmOptions, Keypair, PublicKey } from '@solana/web3.js';\nimport {\n  Collection,\n  Uses,\n  createCreateMetadataAccountV2Instruction,\n  createCreateMasterEditionV3Instruction,\n} from '@metaplex-foundation/mpl-token-metadata';\nimport { Metaplex } from '@/Metaplex';\nimport {\n  useOperation,\n  Operation,\n  Signer,\n  OperationHandler,\n  token,\n  Creator,\n  BigNumber,\n  toUniformVerifiedCreators,\n} from '@/types';\nimport { findMasterEditionV2Pda, findMetadataPda } from './pdas';\nimport { DisposableScope, Option, TransactionBuilder } from '@/utils';\nimport { SendAndConfirmTransactionResponse } from '../rpcModule';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'CreateNftOperation' as const;\nexport const createNftOperation = useOperation<CreateNftOperation>(Key);\nexport type CreateNftOperation = Operation<\n  typeof Key,\n  CreateNftInput,\n  CreateNftOutput\n>;\n\nexport interface CreateNftInput {\n  // Accounts.\n  mint?: Signer; // Defaults to new generated Keypair.\n  payer?: Signer; // Defaults to mx.identity().\n  updateAuthority?: Signer; // Defaults to mx.identity().\n  owner?: PublicKey; // Defaults to mx.identity().\n  tokenAccount?: Signer; // Defaults to creating an associated token account.\n  mintAuthority?: Signer; // Defaults to mx.identity().\n  freezeAuthority?: Option<PublicKey>; // Defaults to mx.identity().\n\n  // Data.\n  uri: string;\n  name: string;\n  sellerFeeBasisPoints: number;\n  symbol?: string; // Defaults to an empty string.\n  creators?: Creator[]; // Defaults to mx.identity() as a single Creator.\n  isMutable?: boolean; // Defaults to true.\n  maxSupply?: Option<BigNumber>; // Defaults to 0.\n  collection?: Option<Collection>; // Defaults to null.\n  uses?: Option<Uses>; // Defaults to null.\n\n  // Programs.\n  tokenProgram?: PublicKey;\n  associatedTokenProgram?: PublicKey;\n\n  // Options.\n  confirmOptions?: ConfirmOptions;\n}\n\nexport interface CreateNftOutput {\n  response: SendAndConfirmTransactionResponse;\n  mintSigner: Signer;\n  metadataAddress: PublicKey;\n  masterEditionAddress: PublicKey;\n  tokenAddress: PublicKey;\n}\n\n// -----------------\n// Handler\n// -----------------\n\nexport const createNftOperationHandler: OperationHandler<CreateNftOperation> = {\n  handle: async (\n    operation: CreateNftOperation,\n    metaplex: Metaplex,\n    scope: DisposableScope\n  ) => {\n    const builder = await createNftBuilder(metaplex, operation.input);\n    scope.throwIfCanceled();\n    return builder.sendAndConfirm(metaplex, operation.input.confirmOptions);\n  },\n};\n\n// -----------------\n// Builder\n// -----------------\n\nexport type CreateNftBuilderParams = Omit<CreateNftInput, 'confirmOptions'> & {\n  createMintAccountInstructionKey?: string;\n  initializeMintInstructionKey?: string;\n  createAssociatedTokenAccountInstructionKey?: string;\n  createTokenAccountInstructionKey?: string;\n  initializeTokenInstructionKey?: string;\n  mintTokensInstructionKey?: string;\n  createMetadataInstructionKey?: string;\n  createMasterEditionInstructionKey?: string;\n};\n\nexport type CreateNftBuilderContext = Omit<CreateNftOutput, 'response'>;\n\nexport const createNftBuilder = async (\n  metaplex: Metaplex,\n  params: CreateNftBuilderParams\n): Promise<TransactionBuilder<CreateNftBuilderContext>> => {\n  const {\n    mint = Keypair.generate(),\n    payer = metaplex.identity(),\n    updateAuthority = metaplex.identity(),\n    owner = metaplex.identity().publicKey,\n    tokenAccount,\n    mintAuthority = metaplex.identity(),\n    freezeAuthority = metaplex.identity().publicKey,\n    tokenProgram,\n    associatedTokenProgram,\n  } = params;\n\n  const tokenWithMintBuilder = await metaplex\n    .tokens()\n    .builders()\n    .createTokenWithMint({\n      decimals: 0,\n      initialSupply: token(1),\n      mint,\n      mintAuthority,\n      freezeAuthority: freezeAuthority ?? null,\n      owner,\n      token: tokenAccount,\n      payer,\n      tokenProgram,\n      associatedTokenProgram,\n      createMintAccountInstructionKey: params.createMintAccountInstructionKey,\n      initializeMintInstructionKey: params.initializeMintInstructionKey,\n      createAssociatedTokenAccountInstructionKey:\n        params.createAssociatedTokenAccountInstructionKey,\n      createTokenAccountInstructionKey: params.createTokenAccountInstructionKey,\n      initializeTokenInstructionKey: params.initializeTokenInstructionKey,\n      mintTokensInstructionKey: params.mintTokensInstructionKey,\n    });\n\n  const { tokenAddress } = tokenWithMintBuilder.getContext();\n  const metadataPda = findMetadataPda(mint.publicKey);\n  const masterEditionPda = findMasterEditionV2Pda(mint.publicKey);\n  const creators =\n    params.creators ?? toUniformVerifiedCreators(updateAuthority.publicKey);\n\n  return (\n    TransactionBuilder.make<CreateNftBuilderContext>()\n      .setFeePayer(payer)\n      .setContext({\n        mintSigner: mint,\n        metadataAddress: metadataPda,\n        masterEditionAddress: masterEditionPda,\n        tokenAddress,\n      })\n\n      // Create the mint and token accounts before minting 1 token to the owner.\n      .add(tokenWithMintBuilder)\n\n      // Create metadata account.\n      .add({\n        instruction: createCreateMetadataAccountV2Instruction(\n          {\n            metadata: metadataPda,\n            mint: mint.publicKey,\n            mintAuthority: mintAuthority.publicKey,\n            payer: payer.publicKey,\n            updateAuthority: updateAuthority.publicKey,\n          },\n          {\n            createMetadataAccountArgsV2: {\n              data: {\n                name: params.name,\n                symbol: params.symbol ?? '',\n                uri: params.uri,\n                sellerFeeBasisPoints: params.sellerFeeBasisPoints,\n                creators,\n                collection: params.collection ?? null,\n                uses: params.uses ?? null,\n              },\n              isMutable: params.isMutable ?? true,\n            },\n          }\n        ),\n        signers: [payer, mintAuthority],\n        key: params.createMetadataInstructionKey ?? 'createMetadata',\n      })\n\n      // Create master edition account (prevents further minting).\n      .add({\n        instruction: createCreateMasterEditionV3Instruction(\n          {\n            edition: masterEditionPda,\n            mint: mint.publicKey,\n            updateAuthority: updateAuthority.publicKey,\n            mintAuthority: mintAuthority.publicKey,\n            payer: payer.publicKey,\n            metadata: metadataPda,\n          },\n          {\n            createMasterEditionArgs: {\n              maxSupply: params.maxSupply === undefined ? 0 : params.maxSupply,\n            },\n          }\n        ),\n        signers: [payer, mintAuthority, updateAuthority],\n        key: params.createMasterEditionInstructionKey ?? 'createMasterEdition',\n      })\n  );\n};\n"],"names":["Key","createNftOperation","useOperation","createNftOperationHandler","handle","operation","metaplex","scope","builder","createNftBuilder","input","throwIfCanceled","sendAndConfirm","confirmOptions","params","mint","Keypair","generate","payer","identity","updateAuthority","owner","publicKey","tokenAccount","mintAuthority","freezeAuthority","tokenProgram","associatedTokenProgram","tokenWithMintBuilder","tokens","builders","createTokenWithMint","decimals","initialSupply","token","createMintAccountInstructionKey","initializeMintInstructionKey","createAssociatedTokenAccountInstructionKey","createTokenAccountInstructionKey","initializeTokenInstructionKey","mintTokensInstructionKey","tokenAddress","getContext","metadataPda","findMetadataPda","masterEditionPda","findMasterEditionV2Pda","creators","toUniformVerifiedCreators","TransactionBuilder","make","setFeePayer","setContext","mintSigner","metadataAddress","masterEditionAddress","add","instruction","createCreateMetadataAccountV2Instruction","metadata","createMetadataAccountArgsV2","data","name","symbol","uri","sellerFeeBasisPoints","collection","uses","isMutable","signers","key","createMetadataInstructionKey","createCreateMasterEditionV3Instruction","edition","createMasterEditionArgs","maxSupply","undefined","createMasterEditionInstructionKey"],"mappings":"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"}