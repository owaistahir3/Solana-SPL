'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var mplTokenMetadata = require('@metaplex-foundation/mpl-token-metadata');
var program = require('./program.cjs');
var gpaBuilders = require('./gpaBuilders.cjs');
var NftClient = require('./NftClient.cjs');
var createNft = require('./createNft.cjs');
var findNftByMint = require('./findNftByMint.cjs');
var findNftsByCreator = require('./findNftsByCreator.cjs');
var findNftsByMintList = require('./findNftsByMintList.cjs');
var findNftsByOwner = require('./findNftsByOwner.cjs');
var findNftsByUpdateAuthority = require('./findNftsByUpdateAuthority.cjs');
var findMintWithMetadataByAddress = require('./findMintWithMetadataByAddress.cjs');
var findMintWithMetadataByMetadata = require('./findMintWithMetadataByMetadata.cjs');
var findTokenWithMetadataByAddress = require('./findTokenWithMetadataByAddress.cjs');
var findTokenWithMetadataByMetadata = require('./findTokenWithMetadataByMetadata.cjs');
var findTokenWithMetadataByMint = require('./findTokenWithMetadataByMint.cjs');
var loadMetadata = require('./loadMetadata.cjs');
var loadNft = require('./loadNft.cjs');
var printNewEdition = require('./printNewEdition.cjs');
var updateNft = require('./updateNft.cjs');
var uploadMetadata = require('./uploadMetadata.cjs');
var useNft = require('./useNft.cjs');

const nftModule = () => ({
  install(metaplex) {
    // Token Metadata Program.
    metaplex.programs().register({
      name: 'TokenMetadataProgram',
      address: program.TokenMetadataProgram.publicKey,
      errorResolver: error => mplTokenMetadata.cusper.errorFromProgramLogs(error.logs, false),
      gpaResolver: metaplex => new gpaBuilders.TokenMetadataGpaBuilder(metaplex, program.TokenMetadataProgram.publicKey)
    }); // Operations.

    const op = metaplex.operations();
    op.register(createNft.createNftOperation, createNft.createNftOperationHandler);
    op.register(findMintWithMetadataByAddress.findMintWithMetadataByAddressOperation, findMintWithMetadataByAddress.findMintWithMetadataByAddressOperationHandler);
    op.register(findMintWithMetadataByMetadata.findMintWithMetadataByMetadataOperation, findMintWithMetadataByMetadata.findMintWithMetadataByMetadataOperationHandler);
    op.register(findNftByMint.findNftByMintOperation, findNftByMint.findNftByMintOperationHandler);
    op.register(findNftsByCreator.findNftsByCreatorOperation, findNftsByCreator.findNftsByCreatorOperationHandler);
    op.register(findNftsByMintList.findNftsByMintListOperation, findNftsByMintList.findNftsByMintListOperationHandler);
    op.register(findNftsByOwner.findNftsByOwnerOperation, findNftsByOwner.findNftsByOwnerOperationHandler);
    op.register(findNftsByUpdateAuthority.findNftsByUpdateAuthorityOperation, findNftsByUpdateAuthority.findNftsByUpdateAuthorityOperationHandler);
    op.register(findTokenWithMetadataByAddress.findTokenWithMetadataByAddressOperation, findTokenWithMetadataByAddress.findTokenWithMetadataByAddressOperationHandler);
    op.register(findTokenWithMetadataByMetadata.findTokenWithMetadataByMetadataOperation, findTokenWithMetadataByMetadata.findTokenWithMetadataByMetadataOperationHandler);
    op.register(findTokenWithMetadataByMint.findTokenWithMetadataByMintOperation, findTokenWithMetadataByMint.findTokenWithMetadataByMintOperationHandler);
    op.register(loadMetadata.loadMetadataOperation, loadMetadata.loadMetadataOperationHandler);
    op.register(loadNft.loadNftOperation, loadNft.loadNftOperationHandler);
    op.register(printNewEdition.printNewEditionOperation, printNewEdition.printNewEditionOperationHandler);
    op.register(updateNft.updateNftOperation, updateNft.updateNftOperationHandler);
    op.register(uploadMetadata.uploadMetadataOperation, uploadMetadata.uploadMetadataOperationHandler);
    op.register(useNft.useNftOperation, useNft.useNftOperationHandler);

    metaplex.nfts = function () {
      return new NftClient.NftClient(this);
    };
  }

});

exports.nftModule = nftModule;
//# sourceMappingURL=plugin.cjs.map
