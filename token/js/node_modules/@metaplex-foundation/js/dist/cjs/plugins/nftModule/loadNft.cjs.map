{"version":3,"file":"loadNft.cjs","sources":["../../../../src/plugins/nftModule/loadNft.ts"],"sourcesContent":["import { Commitment } from '@solana/web3.js';\nimport { Metaplex } from '@/Metaplex';\nimport { Operation, useOperation, OperationHandler } from '@/types';\nimport { DisposableScope } from '@/utils';\nimport { LazyNft, Nft, toNft } from './Nft';\nimport { toOriginalOrPrintEditionAccount } from './accounts';\nimport { findMasterEditionV2Pda } from './pdas';\nimport { toMint, toMintAccount } from '../tokenModule';\nimport { LazyMetadata } from './Metadata';\nimport { toNftEdition } from './NftEdition';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'LoadNftOperation' as const;\nexport const loadNftOperation = useOperation<LoadNftOperation>(Key);\nexport type LoadNftOperation = Operation<typeof Key, LoadNftInput, Nft>;\n\nexport type LoadNftInput = {\n  nft: LazyNft;\n  commitment?: Commitment;\n};\n\n// -----------------\n// Handler\n// -----------------\n\nexport const loadNftOperationHandler: OperationHandler<LoadNftOperation> = {\n  handle: async (\n    operation: LoadNftOperation,\n    metaplex: Metaplex,\n    scope: DisposableScope\n  ): Promise<Nft> => {\n    const { nft, commitment } = operation.input;\n    const mint = nft.mintAddress;\n\n    const accounts = await metaplex\n      .rpc()\n      .getMultipleAccounts([mint, findMasterEditionV2Pda(mint)], commitment);\n    scope.throwIfCanceled();\n\n    const mintAccount = toMintAccount(accounts[0]);\n    const editionAccount = toOriginalOrPrintEditionAccount(accounts[1]);\n    const lazyMetadata: LazyMetadata = {\n      ...nft,\n      model: 'metadata',\n      address: nft.metadataAddress,\n    };\n\n    const metadata = await metaplex\n      .nfts()\n      .loadMetadata(lazyMetadata)\n      .run(scope);\n    scope.throwIfCanceled();\n\n    return toNft(metadata, toMint(mintAccount), toNftEdition(editionAccount));\n  },\n};\n"],"names":["Key","loadNftOperation","useOperation","loadNftOperationHandler","handle","operation","metaplex","scope","nft","commitment","input","mint","mintAddress","accounts","rpc","getMultipleAccounts","findMasterEditionV2Pda","throwIfCanceled","mintAccount","toMintAccount","editionAccount","toOriginalOrPrintEditionAccount","lazyMetadata","model","address","metadataAddress","metadata","nfts","loadMetadata","run","toNft","toMint","toNftEdition"],"mappings":";;;;;;;;;;;;AAYA;AACA;;AAEA,MAAMA,GAAG,GAAG,kBAAZ,CAAA;MACaC,gBAAgB,GAAGC,sBAAY,CAAmBF,GAAnB,EAArC;AAQP;AACA;AACA;AAEO,MAAMG,uBAA2D,GAAG;AACzEC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAIW;IACjB,MAAM;MAAEC,GAAF;AAAOC,MAAAA,UAAAA;KAAeJ,GAAAA,SAAS,CAACK,KAAtC,CAAA;AACA,IAAA,MAAMC,IAAI,GAAGH,GAAG,CAACI,WAAjB,CAAA;AAEA,IAAA,MAAMC,UAAQ,GAAG,MAAMP,QAAQ,CAC5BQ,GADoB,GAEpBC,mBAFoB,CAEA,CAACJ,IAAD,EAAOK,2BAAsB,CAACL,IAAD,CAA7B,CAFA,EAEsCF,UAFtC,CAAvB,CAAA;AAGAF,IAAAA,KAAK,CAACU,eAAN,EAAA,CAAA;IAEA,MAAMC,WAAW,GAAGC,sBAAa,CAACN,UAAQ,CAAC,CAAD,CAAT,CAAjC,CAAA;IACA,MAAMO,cAAc,GAAGC,0CAA+B,CAACR,UAAQ,CAAC,CAAD,CAAT,CAAtD,CAAA;AACA,IAAA,MAAMS,YAA0B,GAAG,EACjC,GAAGd,GAD8B;AAEjCe,MAAAA,KAAK,EAAE,UAF0B;MAGjCC,OAAO,EAAEhB,GAAG,CAACiB,eAAAA;KAHf,CAAA;AAMA,IAAA,MAAMC,QAAQ,GAAG,MAAMpB,QAAQ,CAC5BqB,IADoB,EAAA,CAEpBC,YAFoB,CAEPN,YAFO,CAAA,CAGpBO,GAHoB,CAGhBtB,KAHgB,CAAvB,CAAA;AAIAA,IAAAA,KAAK,CAACU,eAAN,EAAA,CAAA;AAEA,IAAA,OAAOa,SAAK,CAACJ,QAAD,EAAWK,WAAM,CAACb,WAAD,CAAjB,EAAgCc,uBAAY,CAACZ,cAAD,CAA5C,CAAZ,CAAA;AACD,GAAA;AA7BwE;;;;;"}