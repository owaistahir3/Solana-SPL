{"version":3,"file":"NftClient.cjs","sources":["../../../../src/plugins/nftModule/NftClient.ts"],"sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport type { Metaplex } from '@/Metaplex';\nimport { Task } from '@/utils';\nimport { LazyMetadata, Metadata } from './Metadata';\nimport { LazyNft, Nft } from './Nft';\nimport {\n  CreateNftInput,\n  createNftOperation,\n  CreateNftOutput,\n} from './createNft';\nimport {\n  FindMintWithMetadataByAddressInput,\n  findMintWithMetadataByAddressOperation,\n} from './findMintWithMetadataByAddress';\nimport {\n  FindMintWithMetadataByMetadataInput,\n  findMintWithMetadataByMetadataOperation,\n} from './findMintWithMetadataByMetadata';\nimport { FindNftByMintInput, findNftByMintOperation } from './findNftByMint';\nimport {\n  FindNftsByMintListInput,\n  findNftsByMintListOperation,\n} from './findNftsByMintList';\nimport {\n  FindNftsByOwnerInput,\n  findNftsByOwnerOperation,\n} from './findNftsByOwner';\nimport {\n  FindNftsByUpdateAuthorityInput,\n  findNftsByUpdateAuthorityOperation,\n} from './findNftsByUpdateAuthority';\nimport {\n  FindNftsByCreatorInput,\n  findNftsByCreatorOperation,\n} from './findNftsByCreator';\nimport {\n  FindTokenWithMetadataByAddressInput,\n  findTokenWithMetadataByAddressOperation,\n} from './findTokenWithMetadataByAddress';\nimport {\n  FindTokenWithMetadataByMetadataInput,\n  findTokenWithMetadataByMetadataOperation,\n} from './findTokenWithMetadataByMetadata';\nimport {\n  FindTokenWithMetadataByMintInput,\n  findTokenWithMetadataByMintOperation,\n} from './findTokenWithMetadataByMint';\nimport { loadMetadataOperation } from './loadMetadata';\nimport {\n  printNewEditionOperation,\n  PrintNewEditionOutput,\n  PrintNewEditionSharedInput,\n  PrintNewEditionViaInput,\n} from './printNewEdition';\nimport {\n  UploadMetadataInput,\n  uploadMetadataOperation,\n  UploadMetadataOutput,\n} from './uploadMetadata';\nimport {\n  UpdateNftInput,\n  updateNftOperation,\n  UpdateNftOutput,\n} from './updateNft';\nimport { LoadNftInput, loadNftOperation } from './loadNft';\nimport { NftBuildersClient } from './NftBuildersClient';\nimport { UseNftInput, useNftOperation, UseNftOutput } from './useNft';\n\nexport class NftClient {\n  constructor(protected readonly metaplex: Metaplex) {}\n\n  builders() {\n    return new NftBuildersClient(this.metaplex);\n  }\n\n  create(input: CreateNftInput): Task<CreateNftOutput & { nft: Nft }> {\n    return new Task(async (scope) => {\n      const operation = createNftOperation(input);\n      const output = await this.metaplex.operations().execute(operation, scope);\n      scope.throwIfCanceled();\n      const nft = await this.findByMint(output.mintSigner.publicKey).run(scope);\n      return { ...output, nft };\n    });\n  }\n\n  findByMint(\n    mint: PublicKey,\n    options?: Omit<FindNftByMintInput, 'mint'>\n  ): Task<Nft> {\n    return this.metaplex\n      .operations()\n      .getTask(findNftByMintOperation({ mint, ...options }));\n  }\n\n  findAllByMintList(\n    mints: PublicKey[],\n    options?: Omit<FindNftsByMintListInput, 'mints'>\n  ) {\n    return this.metaplex\n      .operations()\n      .getTask(findNftsByMintListOperation({ mints, ...options }));\n  }\n\n  findAllByOwner(\n    owner: PublicKey,\n    options?: Omit<FindNftsByOwnerInput, 'owner'>\n  ) {\n    return this.metaplex\n      .operations()\n      .getTask(findNftsByOwnerOperation({ owner, ...options }));\n  }\n\n  findAllByUpdateAuthority(\n    updateAuthority: PublicKey,\n    options?: Omit<FindNftsByUpdateAuthorityInput, 'updateAuthority'>\n  ) {\n    return this.metaplex\n      .operations()\n      .getTask(\n        findNftsByUpdateAuthorityOperation({ updateAuthority, ...options })\n      );\n  }\n\n  findAllByCreator(\n    creator: PublicKey,\n    options?: Omit<FindNftsByCreatorInput, 'creator'>\n  ) {\n    return this.metaplex\n      .operations()\n      .getTask(findNftsByCreatorOperation({ creator, ...options }));\n  }\n\n  findMintWithMetadataByAddress(\n    address: PublicKey,\n    options?: Omit<FindMintWithMetadataByAddressInput, 'address'>\n  ) {\n    return this.metaplex\n      .operations()\n      .getTask(findMintWithMetadataByAddressOperation({ address, ...options }));\n  }\n\n  findMintWithMetadataByMetadata(\n    address: PublicKey,\n    options?: Omit<FindMintWithMetadataByMetadataInput, 'address'>\n  ) {\n    return this.metaplex\n      .operations()\n      .getTask(\n        findMintWithMetadataByMetadataOperation({ address, ...options })\n      );\n  }\n\n  findTokenWithMetadataByAddress(\n    address: PublicKey,\n    options?: Omit<FindTokenWithMetadataByAddressInput, 'address'>\n  ) {\n    return this.metaplex\n      .operations()\n      .getTask(\n        findTokenWithMetadataByAddressOperation({ address, ...options })\n      );\n  }\n\n  findTokenWithMetadataByMetadata(\n    metadataAddress: PublicKey,\n    ownerAddress: PublicKey,\n    options?: Omit<\n      FindTokenWithMetadataByMetadataInput,\n      'metadataAddress' | 'ownerAddress'\n    >\n  ) {\n    return this.metaplex.operations().getTask(\n      findTokenWithMetadataByMetadataOperation({\n        metadataAddress,\n        ownerAddress,\n        ...options,\n      })\n    );\n  }\n\n  findTokenWithMetadataByMint(\n    mintAddress: PublicKey,\n    ownerAddress: PublicKey,\n    options?: Omit<\n      FindTokenWithMetadataByMintInput,\n      'metadataAddress' | 'ownerAddress'\n    >\n  ) {\n    return this.metaplex.operations().getTask(\n      findTokenWithMetadataByMintOperation({\n        mintAddress,\n        ownerAddress,\n        ...options,\n      })\n    );\n  }\n\n  loadMetadata(metadata: LazyMetadata): Task<Metadata> {\n    return this.metaplex\n      .operations()\n      .getTask(loadMetadataOperation({ metadata }));\n  }\n\n  loadNft(nft: LazyNft, options: Omit<LoadNftInput, 'nft'> = {}): Task<Nft> {\n    return this.metaplex\n      .operations()\n      .getTask(loadNftOperation({ nft, ...options }));\n  }\n\n  printNewEdition(\n    originalNft: Nft | LazyNft | PublicKey,\n    input: Omit<PrintNewEditionSharedInput, 'originalNft'> &\n      PrintNewEditionViaInput = {}\n  ): Task<PrintNewEditionOutput & { nft: Nft }> {\n    return new Task(async (scope) => {\n      const operation = printNewEditionOperation({ originalNft, ...input });\n      const output = await this.metaplex.operations().execute(operation, scope);\n      scope.throwIfCanceled();\n      const nft = await this.findByMint(output.mintSigner.publicKey).run(scope);\n      return { ...output, nft };\n    });\n  }\n\n  uploadMetadata(input: UploadMetadataInput): Task<UploadMetadataOutput> {\n    return this.metaplex.operations().getTask(uploadMetadataOperation(input));\n  }\n\n  update(\n    nft: Nft | LazyNft,\n    input: Omit<UpdateNftInput, 'nft'>\n  ): Task<UpdateNftOutput & { nft: Nft }> {\n    return new Task(async (scope) => {\n      const operation = updateNftOperation({ ...input, nft });\n      const output = await this.metaplex.operations().execute(operation, scope);\n      scope.throwIfCanceled();\n      const updatedNft = await this.findByMint(nft.mintAddress).run(scope);\n      return { ...output, nft: updatedNft };\n    });\n  }\n\n  use(\n    nft: Nft | LazyNft | PublicKey,\n    input: Omit<UseNftInput, 'nft'> = {}\n  ): Task<UseNftOutput & { nft: Nft }> {\n    return new Task(async (scope) => {\n      const operation = useNftOperation({ ...input, nft });\n      const output = await this.metaplex.operations().execute(operation, scope);\n      scope.throwIfCanceled();\n      const updatedNft = await this.findByMint(output.mintAddress).run(scope);\n      return { ...output, nft: updatedNft };\n    });\n  }\n}\n"],"names":["NftClient","constructor","metaplex","builders","NftBuildersClient","create","input","Task","scope","operation","createNftOperation","output","operations","execute","throwIfCanceled","nft","findByMint","mintSigner","publicKey","run","mint","options","getTask","findNftByMintOperation","findAllByMintList","mints","findNftsByMintListOperation","findAllByOwner","owner","findNftsByOwnerOperation","findAllByUpdateAuthority","updateAuthority","findNftsByUpdateAuthorityOperation","findAllByCreator","creator","findNftsByCreatorOperation","findMintWithMetadataByAddress","address","findMintWithMetadataByAddressOperation","findMintWithMetadataByMetadata","findMintWithMetadataByMetadataOperation","findTokenWithMetadataByAddress","findTokenWithMetadataByAddressOperation","findTokenWithMetadataByMetadata","metadataAddress","ownerAddress","findTokenWithMetadataByMetadataOperation","findTokenWithMetadataByMint","mintAddress","findTokenWithMetadataByMintOperation","loadMetadata","metadata","loadMetadataOperation","loadNft","loadNftOperation","printNewEdition","originalNft","printNewEditionOperation","uploadMetadata","uploadMetadataOperation","update","updateNftOperation","updatedNft","use","useNftOperation"],"mappings":"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"}